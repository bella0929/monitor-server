{"version":3,"sources":["alarm_log.js"],"names":["Knex","Logger","moment","DATE_FORMAT","TABLE_COLUMN","BASE_TABLE_NAME","getTableName","insert","projectId","configId","sendAt","errorName","message","tableName","createTime","unix","updateTime","insertData","project_id","config_id","send_at","error_name","create_time","update_time","affectRows","into","catch","err","error","getAlarmLogInRange","startAt","endAt","result","select","from","where","andWhere","getLineAlarmLogInRange","sqlGroupByFormat","SQL_GROUP_BY_HOUR","resultList","count","raw","groupBy"],"mappings":"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","sourcesContent":["import Knex from '~/src/library/mysql'\nimport Logger from '~/src/library/logger'\nimport moment from 'moment'\nimport DATE_FORMAT from '~/src/constants/date_format'\n\nconst TABLE_COLUMN = [\n  `id`,\n  `project_id`,\n  `config_id`,\n  `send_at`,\n  `error_type`,\n  `error_name`,\n  `message`,\n  `create_time`,\n  `update_time`\n]\nconst BASE_TABLE_NAME = 't_r_alarm_log'\n\nfunction getTableName () {\n  return BASE_TABLE_NAME\n}\n\nasync function insert (projectId, configId, sendAt, errorName, message) {\n  const tableName = getTableName()\n  const createTime = moment().unix()\n  const updateTime = createTime\n  let insertData = {\n    project_id: projectId,\n    config_id: configId,\n    send_at: sendAt,\n    error_name: errorName,\n    message: message,\n    create_time: createTime,\n    update_time: updateTime\n  }\n  const affectRows = Knex\n    .insert(insertData)\n    .into(tableName)\n    .catch(err => {\n      Logger.error(err.message)\n      return 0\n    })\n  return affectRows > 0\n}\n\nasync function getAlarmLogInRange (projectId, startAt, endAt) {\n  const tableName = getTableName()\n  const result = await Knex\n    .select(TABLE_COLUMN)\n    .from(tableName)\n    .where('send_at', '>', startAt)\n    .andWhere('send_at', '<', endAt)\n    .andWhere('project_id', projectId)\n    .catch((err) => {\n      Logger.error(err.message)\n      return []\n    })\n  return result\n}\n\nasync function getLineAlarmLogInRange (projectId, startAt, endAt) {\n  const tableName = getTableName()\n  let sqlGroupByFormat = DATE_FORMAT.SQL_GROUP_BY_HOUR\n  const resultList = await Knex\n    .count('* as log_count')\n    .select('config_id', 'error_name', Knex.raw(`FROM_UNIXTIME(\\`send_at\\`, '${sqlGroupByFormat}') as group_by`))\n    .from(tableName)\n    .where('send_at', '>', startAt)\n    .andWhere('send_at', '<', endAt)\n    .andWhere('project_id', projectId)\n    .groupBy('config_id', 'error_name', 'group_by')\n    .catch(err => {\n      Logger.error(err.message)\n      return []\n    })\n  return resultList\n}\n\nexport default {\n  getAlarmLogInRange,\n  getTableName,\n  insert,\n  getLineAlarmLogInRange\n}\n"],"file":"alarm_log.js"}