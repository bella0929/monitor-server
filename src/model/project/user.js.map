{"version":3,"sources":["user.js"],"names":["md5","_","Knex","dateFns","Logger","MD5_SALT","DEFAULT_PASSWORD","ROLE_DEV","ROLE_ADMIN","REGISTER_TYPE_THIRD","REGISTER_TYPE_SITE","DEFAULT_AVATAR_URL","BASE_TABLE_NAME","TABLE_COLUMN","DISPLAY_TABLE_COLUMN","hash","content","v1ResultMd5","v2ResultMd5","v3ResultMd5","getTableName","register","account","userInfo","tableName","parseAccount","parseAccountToUcid","ucid","get","email","passwordMd5","nickname","role","registerType","mobile","avatarUrl","length","nowAt","getUnixTime","Date","insertData","password_md5","register_type","avatar_url","is_delete","create_time","update_time","existUserByAccount","getByAccount","isEmpty","updateResult","update","existUserByUcid","insertResult","returning","insert","into","catch","e","insertId","result","select","from","where","user","getSiteUserByAccount","andWhere","searchByAccount","offset","max","rescordList","limit","getList","rawUpdateData","updateRecord","key","has","affectRows","getUserListByUcid","memberUcidList","whereIn","err","log","message","isAdmin","isExist","formatRecord","rawItem","item","accountMd5","slice","index","charCodeAt"],"mappings":"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","sourcesContent":["import md5 from 'md5'\nimport _ from 'lodash'\nimport Knex from '~/src/library/mysql'\nimport dateFns from 'date-fns'\nimport Logger from '~/src/library/logger'\n\nconst MD5_SALT = '12345678901234567890123'\nconst DEFAULT_PASSWORD = 'kehaolea'\n\nconst ROLE_DEV = 'dev'\nconst ROLE_ADMIN = 'admin'\n\nconst REGISTER_TYPE_THIRD = 'third'\nconst REGISTER_TYPE_SITE = 'site'\n\nconst DEFAULT_AVATAR_URL = 'http://ww1.sinaimg.cn/large/00749HCsly1fwofq2t1kaj30qn0qnaai.jpg'\n\nconst BASE_TABLE_NAME = 't_o_user'\nconst TABLE_COLUMN = [\n  `id`,\n  `ucid`,\n  `account`,\n  `email`,\n  `password_md5`,\n  `nickname`,\n  `role`,\n  `register_type`,\n  `avatar_url`,\n  `mobile`,\n  `is_delete`,\n  `create_time`,\n  `update_time`\n]\n\n/**\n * 对外展示的字段\n */\nconst DISPLAY_TABLE_COLUMN = [\n  `ucid`,\n  `account`,\n  `email`,\n  `nickname`,\n  `role`,\n  `register_type`,\n  `avatar_url`,\n  `mobile`\n]\n\n/**\n * 加密字符串\n * @param {*} content\n */\nfunction hash (content) {\n  let v1ResultMd5 = md5(`${content}_${MD5_SALT}`)\n  let v2ResultMd5 = md5(`${v1ResultMd5}_${MD5_SALT}`)\n  let v3ResultMd5 = md5(`${v2ResultMd5}_${MD5_SALT}`)\n  return v3ResultMd5\n}\n\nfunction getTableName () {\n  return BASE_TABLE_NAME\n}\n\n/**\n * 创建用户\n * @param {object} userInfo\n */\nasync function register (account, userInfo) {\n  const tableName = getTableName()\n  // 没有ucid,则把account转为ucid\n  let parseAccount = parseAccountToUcid(account)\n  let ucid = _.get(userInfo, ['ucid'], parseAccount)\n  let email = _.get(userInfo, ['email'], '')\n  let passwordMd5 = _.get(userInfo, ['password_md5'], hash(DEFAULT_PASSWORD))\n  let nickname = _.get(userInfo, ['nickname'], '')\n  let role = _.get(userInfo, ['role'], ROLE_DEV)\n  let registerType = _.get(userInfo, ['register_type'], REGISTER_TYPE_THIRD)\n  let mobile = _.get(userInfo, ['mobile'], '')\n  let avatarUrl = _.get(userInfo, ['avatarUrl'], DEFAULT_AVATAR_URL)\n  // ucid和account不能为空\n  if (ucid.length === 0 || account === '') {\n    return false\n  }\n\n  let nowAt = dateFns.getUnixTime(new Date())\n  let insertData = {\n    ucid,\n    account,\n    email,\n    password_md5: passwordMd5,\n    nickname,\n    role,\n    register_type: registerType,\n    avatar_url: avatarUrl,\n    mobile,\n    is_delete: 0,\n    create_time: nowAt,\n    update_time: nowAt\n  }\n  // 若用户已存在就直接更新\n  let existUserByAccount = await getByAccount(account)\n\n  // 检查account\n  if (_.isEmpty(existUserByAccount) === false) {\n    if (existUserByAccount.is_delete) {\n      let updateResult = await update(existUserByAccount.ucid, insertData)\n      return updateResult\n    } else {\n      return true\n    }\n  }\n\n  // 检查ucid\n  let existUserByUcid = await getByAccount(ucid)\n  if (_.isEmpty(existUserByUcid) === false) {\n    if (existUserByUcid.is_delete) {\n      let updateResult = await update(existUserByUcid.ucid, insertData)\n      return updateResult\n    } else {\n      return true\n    }\n  }\n\n  let insertResult = await Knex\n    .returning('id')\n    .insert(insertData)\n    .into(tableName)\n    .catch(e => { return [] })\n  let insertId = _.get(insertResult, [0], 0)\n  return insertId > 0\n}\n\n/**\n * 获取用户信息\n * @param {String} ucid\n */\nasync function get (ucid) {\n  const tableName = getTableName()\n\n  const result = await Knex\n    .select(TABLE_COLUMN)\n    .from(tableName)\n    .where('ucid', ucid)\n  let user = _.get(result, [0], {})\n  return user\n}\n\n/**\n * 根据账户获取用户信息\n * @param {String} account\n * @return {Object}\n */\nasync function getByAccount (account) {\n  const tableName = getTableName()\n\n  const result = await Knex\n    .select(TABLE_COLUMN)\n    .from(tableName)\n    .where('account', account)\n  let user = _.get(result, [0], {})\n  return user\n}\n\n/**\n * 根据账户获取网站注册用户（普通用户）的信息\n * @param {String} account\n * @return {Object}\n */\nasync function getSiteUserByAccount (account) {\n  const tableName = getTableName()\n\n  const result = await Knex\n    .select(TABLE_COLUMN)\n    .from(tableName)\n    .where('account', account)\n    .andWhere('register_type', REGISTER_TYPE_SITE)\n  let user = _.get(result, [0], {})\n  return user\n}\n/**\n * 根据账户名搜索用户列表\n * @param {*} account\n * @param {*} offset\n * @param {*} max\n */\nasync function searchByAccount (account, offset = 0, max = 10) {\n  const tableName = getTableName()\n  const rescordList = await Knex\n    .select(TABLE_COLUMN)\n    .from(tableName)\n    .where('is_delete', '=', 0)\n    .andWhere('account', 'like', `%${account}%`)\n    .limit(max)\n    .offset(offset)\n  return rescordList\n}\n\n/**\n * 用户列表\n * @param {number} offset    获取数据的偏移量\n * @param {number} max       一页最多展示的数据\n */\nasync function getList (offset = 0, max = 10) {\n  const tableName = getTableName()\n  const result = await Knex\n    .select(TABLE_COLUMN)\n    .from(tableName)\n    .limit(max)\n    .offset(offset)\n    .where('is_delete', '=', 0)\n  return result\n}\n\n/**\n * 更新记录\n * @param {number} id\n * @param {object} rawUpdateData = {}\n */\nasync function update (ucid, rawUpdateData) {\n  let nowAt = dateFns.getUnixTime(new Date())\n\n  let updateRecord = {}\n  for (let key of [\n    'email',\n    'password_md5',\n    'nickname',\n    'role',\n    'register_type',\n    'avatar_url',\n    'mobile',\n    'is_delete'\n  ]) {\n    if (_.has(rawUpdateData, [key])) {\n      updateRecord[key] = rawUpdateData[key]\n    }\n  }\n\n  updateRecord['update_time'] = nowAt\n  const tableName = getTableName()\n  const affectRows = await Knex(tableName)\n    .update(updateRecord)\n    .where('ucid', ucid)\n  return affectRows > 0\n}\n\n/**\n * 根据memberid获取member信息\n * @param {*} memberIdList\n */\nasync function getUserListByUcid (memberUcidList) {\n  const tableName = getTableName()\n  const result = await Knex\n    .select(TABLE_COLUMN)\n    .from(tableName)\n    .whereIn('ucid', memberUcidList)\n    .catch(err => {\n      Logger.log(err.message, 'getMemberListByUcid出错')\n      return []\n    })\n  return result\n}\n\n/**\n * 检查用户身份是否是管理员\n * @param {*} ucid\n */\nasync function isAdmin (ucid) {\n  let user = await get(ucid)\n  let isExist = _.get(user, ['is_delete'], 1) === 0\n  let isAdmin = _.get(user, ['role'], ROLE_DEV) === ROLE_ADMIN\n  if (isExist && isAdmin) {\n    return true\n  }\n  return false\n}\n\nfunction formatRecord (rawItem) {\n  let item = {}\n  for (let key of DISPLAY_TABLE_COLUMN) {\n    if (_.has(rawItem, [key])) {\n      item[key] = rawItem[key]\n    }\n  }\n  return item\n}\n\nfunction parseAccountToUcid (account) {\n  let ucid = ''\n  let accountMd5 = md5(account)\n  accountMd5 = accountMd5.slice(0, 16)\n  for (let index = 0; index < accountMd5.length; index++) {\n    ucid += accountMd5.charCodeAt(index)\n  }\n  return ucid\n}\nexport default {\n  hash,\n  register,\n  get,\n  getByAccount,\n  getSiteUserByAccount,\n  getList,\n  searchByAccount,\n  update,\n  // 根据ucid获取用户信息（名字，id等）\n  getUserListByUcid,\n\n  isAdmin,\n\n  formatRecord,\n\n  getTableName,\n\n  DEFAULT_AVATAR_URL,\n  REGISTER_TYPE_SITE,\n  REGISTER_TYPE_THIRD,\n  ROLE_ADMIN,\n  ROLE_DEV\n}\n"],"file":"user.js"}