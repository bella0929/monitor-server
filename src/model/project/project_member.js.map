{"version":3,"sources":["project_member.js"],"names":["_","moment","Knex","Logger","MUser","ProjectConfig","ROLE_DEV","ROLE_OWNER","BASE_TABLE_NAME","TABLE_COLUMN","DISPLAY_TABLE_COLUMN","getTableName","formatRecord","rawRecord","record","column","has","add","data","tableName","createTime","unix","updateTime","insertData","create_time","update_time","is_delete","insertResult","returning","insert","into","catch","err","log","message","id","get","result","select","from","where","project","getByProjectIdAndUcid","projectId","ucid","andWhere","getList","update","updateData","nowAt","newRecord","getProjectMemberListByUcid","offset","max","rawRecordList","limit","templateRecord","role","need_alarm","create_ucid","update_ucid","projectMemberMap","project_id","openProjectId","OPEN_PROJECT_ID_LIST","template","push","getProjectMemberList","isProjectOwner","isEmpty","isExist","isOwner","hasPrivilege","indexOf","isAdmin","getAlarmUcidList"],"mappings":"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","sourcesContent":["import _ from 'lodash'\nimport moment from 'moment'\nimport Knex from '~/src/library/mysql'\nimport Logger from '~/src/library/logger'\nimport MUser from '~/src/model/project/user'\nimport ProjectConfig from '~/src/configs/project'\n\nconst ROLE_DEV = 'dev'\nconst ROLE_OWNER = 'owner'\n\nconst BASE_TABLE_NAME = 't_o_project_member'\nconst TABLE_COLUMN = [\n  `id`,\n  `project_id`,\n  `ucid`,\n  `role`,\n  `need_alarm`,\n  `is_delete`,\n  `create_time`,\n  `create_ucid`,\n  `update_time`,\n  `update_ucid`\n]\nconst DISPLAY_TABLE_COLUMN = [\n  `id`,\n  `project_id`,\n  `ucid`,\n  `role`,\n  `need_alarm`,\n  `create_time`,\n  `create_ucid`,\n  `update_time`,\n  `update_ucid`\n]\n\nfunction getTableName () {\n  return BASE_TABLE_NAME\n}\n/**\n * 删除不必要的字段\n * @param {*} rawRecord\n */\nfunction formatRecord (rawRecord) {\n  let record = {}\n  for (let column of DISPLAY_TABLE_COLUMN) {\n    if (_.has(rawRecord, [column])) {\n      record[column] = rawRecord[column]\n    }\n  }\n  return record\n}\n\n/**\n * 添加项目\n * @param {object} data\n */\nasync function add (data) {\n  const tableName = getTableName()\n  const createTime = moment().unix()\n  const updateTime = createTime\n  let insertData = {}\n  for (let column of [\n    `project_id`,\n    `ucid`,\n    `role`,\n    `nead_alarm`,\n    `create_ucid`,\n    `update_ucid`\n  ]) {\n    if (_.has(data, [column])) {\n      insertData[column] = data[column]\n    }\n  }\n  insertData = {\n    ...insertData,\n    create_time: createTime,\n    update_time: updateTime,\n    is_delete: 0\n  }\n  let insertResult = await Knex\n    .returning('id')\n    .insert(insertData)\n    .into(tableName)\n    .catch(err => {\n      Logger.log(err.message, 'project_member    add   出错')\n      return []\n    })\n  let id = _.get(insertResult, [0], 0)\n  return id > 0\n}\n\n/**\n * 获取项目信息\n * @param {number} id\n */\nasync function get (id) {\n  const tableName = getTableName()\n  const result = await Knex\n    .select(TABLE_COLUMN)\n    .from(tableName)\n    .where('id', '=', id)\n    .catch(err => {\n      Logger.log(err.message, 'project_member    get   出错')\n      return []\n    })\n  const project = _.get(result, ['0'], {})\n  return project\n}\n\n/**\n * 根据 项目id & uicd 获取成员记录\n * @param {number} projectId\n * @param {number} ucid\n */\nasync function getByProjectIdAndUcid (projectId, ucid) {\n  let tableName = getTableName()\n  let rawRecord = await Knex\n    .select(TABLE_COLUMN)\n    .from(tableName)\n    .where('project_id', projectId)\n    .andWhere('ucid', ucid)\n    .catch(err => {\n      Logger.log(err.message, 'project_member    getList   出错')\n      return []\n    })\n\n  let record = _.get(rawRecord, [0], {})\n  return record\n}\n\n/**\n * 项目列表\n */\nasync function getList () {\n  const tableName = getTableName()\n  const result = await Knex\n    .select(TABLE_COLUMN)\n    .from(tableName)\n    .where('is_delete', 0)\n    .catch(err => {\n      Logger.log(err.message, 'project_member    getList   出错')\n      return []\n    })\n  return result\n}\n\n/**\n * 更新记录\n * @param {number} id\n * @param {object} updateData = {}\n */\nasync function update (id, updateData) {\n  const nowAt = moment().unix()\n  let newRecord = {}\n  for (let column of [\n    'project_id',\n    'ucid',\n    'role',\n    'need_alarm',\n    'is_delete',\n    'update_ucid'\n  ]) {\n    if (_.has(updateData, [column])) {\n      newRecord[column] = updateData[column]\n    }\n  }\n  newRecord = {\n    ...newRecord,\n    update_time: nowAt\n  }\n  const tableName = getTableName()\n  const result = await Knex(tableName)\n    .update(newRecord)\n    .where('id', id)\n    .catch(err => {\n      Logger.log(err.message, 'project_member    update   出错')\n      return []\n    })\n  return result === 1\n}\n\n/**\n * 获取某一成员下所有项目列表\n * @param {*} ucid 成员的ucid\n */\nasync function getProjectMemberListByUcid (ucid, offset, max) {\n  const tableName = getTableName()\n  let rawRecordList = await Knex\n    .select(TABLE_COLUMN)\n    .from(tableName)\n    .where('ucid', ucid)\n    .andWhere('is_delete', 0)\n    .offset(offset)\n    .limit(max)\n    .catch(err => {\n      Logger.log(err.message, 'project_member    getProjectIdList   出错')\n      return []\n    })\n\n  // 获取默认项目列表，造数据添加权限\n  let templateRecord = {\n    id: 0,\n    ucid,\n    role: ROLE_DEV,\n    need_alarm: 0,\n    is_delete: 0,\n    create_time: 0,\n    create_ucid: 0,\n    update_time: 0,\n    update_ucid: 0\n  }\n  let projectMemberMap = {}\n  for (let rawRecord of rawRecordList) {\n    const { project_id: projectId } = rawRecord\n    projectMemberMap[projectId] = 1\n  }\n  for (let openProjectId of ProjectConfig.OPEN_PROJECT_ID_LIST) {\n    if (_.has(projectMemberMap, [openProjectId]) === false) {\n      let template = {\n        ...templateRecord,\n        project_id: openProjectId\n      }\n      rawRecordList.push(template)\n    }\n  }\n  return rawRecordList\n}\n\n/**\n * 根据项目id获取这个项目下所有用户列表\n * @param {*} projectId\n */\nasync function getProjectMemberList (projectId) {\n  const tableName = getTableName()\n  const result = await Knex\n    .select(TABLE_COLUMN)\n    .from(tableName)\n    .where('project_id', projectId)\n    .andWhere('is_delete', 0)\n    .catch(err => {\n      Logger.log(err.message, 'project_member    getMemberIdList   出错')\n      return []\n    })\n  return result\n}\n\n/**\n * 检查用户是不是项目owner\n * @param {*} projectId\n * @param {*} ucid\n */\nasync function isProjectOwner (projectId, ucid) {\n  let record = await getByProjectIdAndUcid(projectId, ucid)\n  if (_.isEmpty(record)) {\n    return false\n  }\n  let isExist = _.get(record, ['is_delete'], 1) === 0\n  let isOwner = _.get(record, ['role'], ROLE_DEV) === ROLE_OWNER\n  if (isExist && isOwner) {\n    return true\n  }\n  return false\n}\n\n/**\n * 检查用户是否有项目权限\n * @param {*} projectId\n * @param {*} ucid\n */\nasync function hasPrivilege (projectId, ucid) {\n  // 检查是否是项目1，如果是，则通过（默认项目1是展示项目，都会有权限）\n  if (_.indexOf(ProjectConfig.OPEN_PROJECT_ID_LIST, projectId) >= 0) {\n    return true\n  }\n  // 检查是否是admin,如果是，直接通过检查\n  const isAdmin = await MUser.isAdmin(ucid)\n  if (isAdmin) {\n    return true\n  }\n  // 不是admin\n  let record = await getByProjectIdAndUcid(projectId, ucid)\n  if (_.isEmpty(record)) {\n    return false\n  }\n  let isExist = _.get(record, ['is_delete'], 1) === 0\n  return isExist\n}\n\n/**\n * 获取某一下项目下，需要报警的人的ucid列表\n * @param {number} projectId\n */\nasync function getAlarmUcidList (projectId) {\n  const tableName = getTableName()\n  const rawRecordList = await Knex\n    .select('ucid')\n    .from(tableName)\n    .where('project_id', projectId)\n    .andWhere('need_alarm', 1)\n    .catch(() => {\n      return []\n    })\n  let result = []\n  for (let rawRecord of rawRecordList) {\n    let ucid = _.get(rawRecord, ['ucid'], 0)\n    result.push(ucid)\n  }\n  return result\n}\nexport default {\n  get,\n  getList,\n  update,\n  getTableName,\n  add,\n\n  // 限制导出数据\n  formatRecord,\n\n  // 获取某一用户的项目id list\n  getProjectMemberListByUcid,\n  // 获取某一项目的成员id list\n  getProjectMemberList,\n  getByProjectIdAndUcid,\n\n  hasPrivilege,\n  isProjectOwner,\n\n  getAlarmUcidList,\n\n  ROLE_DEV,\n  ROLE_OWNER\n}\n"],"file":"project_member.js"}