{"version":3,"sources":["duration_distribution.js"],"names":["Knex","moment","_","MCityDistribution","DATE_FORMAT","TableName","TABLE_COLUMN","getTableName","replaceUvRecord","projectId","totalStayMs","totalUv","countAtTime","countType","cityDistribute","tableName","updateAt","unix","oldRecordList","select","from","where","andWhere","catch","id","get","cityDistributeIdInDb","createTimeInDb","data","project_id","total_uv","count_at_time","update_time","count_type","isSuccess","isUpdateSuccess","updateCityDistributionRecord","JSON","stringify","affectRows","update","cityDistributeId","insertCityDistributionRecord","insertResult","returning","insert","into","e","insertId","getRecordList","startAt","finishAt","countAtTimeList","dateFormat","DATABASE_BY_UNIT","addDateRange","UNIT","HOUR","DAY","MONTH","finishAtMoment","currentAtMoment","isBefore","clone","add","currentAtFormated","format","push","recordList","orderBy"],"mappings":"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","sourcesContent":["import Knex from '~/src/library/mysql'\nimport moment from 'moment'\nimport _ from 'lodash'\nimport MCityDistribution from '~/src/model/parse/city_distribution'\nimport DATE_FORMAT from '~/src/constants/date_format'\n\nconst TableName = 't_r_duration_distribution'\nconst TABLE_COLUMN = [\n  `id`,\n  `project_id`,\n  `total_stay_ms`,\n  `total_uv`,\n  `count_at_time`,\n  `count_type`,\n  `city_distribute_id`,\n  `create_time`,\n  `update_time`\n]\n\n/**\n * 获取表名\n * @param {number} projectId 项目id\n * @param {number} createTimeAt 创建时间, 时间戳\n * @return {String}\n */\nfunction getTableName () {\n  return TableName\n}\n\n/**\n * 自动创建&更新, 并增加total_stay_ms的值\n * @param {number} projectId\n * @param {number} totalStayMs\n * @param {number} totalUv\n * @param {number} countAtTime\n * @param {string} countType\n * @param {object} cityDistribute\n * @return {boolean}\n */\nasync function replaceUvRecord (projectId, totalStayMs, totalUv, countAtTime, countType, cityDistribute) {\n  let tableName = getTableName()\n  let updateAt = moment().unix()\n  // 返回值是一个列表\n  let oldRecordList = await Knex\n    .select([`city_distribute_id`, `create_time`, `id`])\n    .from(tableName)\n    .where('project_id', '=', projectId)\n    .andWhere('count_at_time', '=', countAtTime)\n    .andWhere('count_type', '=', countType)\n    .catch(() => {\n      return []\n    })\n  // 利用get方法, 不存在直接返回0, 没毛病\n  let id = _.get(oldRecordList, [0, 'id'], 0)\n  let cityDistributeIdInDb = _.get(oldRecordList, [0, 'city_distribute_id'], 0)\n  let createTimeInDb = _.get(oldRecordList, [0, 'create_time'], 0)\n\n  let data = {\n    project_id: projectId,\n    total_uv: totalUv,\n    count_at_time: countAtTime,\n    update_time: updateAt,\n    count_type: countType\n  }\n  let isSuccess = false\n  if (id > 0) {\n    // 更新城市分布数据\n    let isUpdateSuccess = MCityDistribution.updateCityDistributionRecord(cityDistributeIdInDb, projectId, createTimeInDb, JSON.stringify(cityDistribute))\n    if (isUpdateSuccess === false) {\n      return false\n    }\n    data['total_stay_ms'] = totalStayMs\n    let affectRows = await Knex(tableName)\n      .update(data)\n      .where(`id`, '=', id)\n    isSuccess = affectRows > 0\n  } else {\n    // 首先插入城市分布数据\n    let cityDistributeId = await MCityDistribution.insertCityDistributionRecord(JSON.stringify(cityDistribute), projectId, updateAt)\n    if (cityDistributeId === 0) {\n      // 城市分布数据插入失败\n      return false\n    }\n    data['city_distribute_id'] = cityDistributeId\n    data['total_stay_ms'] = totalStayMs\n    data['create_time'] = updateAt\n    let insertResult = await Knex\n      .returning('id')\n      .insert(data)\n      .into(tableName)\n      .catch(e => {\n        return []\n      })\n    let insertId = _.get(insertResult, [0], 0)\n    isSuccess = insertId > 0\n  }\n  return isSuccess\n}\n\nasync function getRecordList (projectId, startAt, finishAt, countType) {\n  let tableName = getTableName()\n  let countAtTimeList = []\n  let dateFormat = DATE_FORMAT.DATABASE_BY_UNIT[countType]\n  let addDateRange = 'day'\n  switch (countType) {\n    case DATE_FORMAT.UNIT.HOUR:\n      addDateRange = 'hour'\n      break\n    case DATE_FORMAT.UNIT.DAY:\n      addDateRange = 'day'\n      break\n    case DATE_FORMAT.UNIT.MONTH:\n      addDateRange = 'month'\n      break\n    default:\n      addDateRange = 'month'\n  }\n  let finishAtMoment = moment.unix(finishAt)\n\n  for (let currentAtMoment = moment.unix(startAt); currentAtMoment.isBefore(finishAtMoment); currentAtMoment = currentAtMoment.clone().add(1, addDateRange)) {\n    let currentAtFormated = currentAtMoment.format(dateFormat)\n    countAtTimeList.push(currentAtFormated)\n  }\n  let recordList = await Knex\n    .select(TABLE_COLUMN)\n    .from(tableName)\n    .where('project_id', projectId)\n    .andWhere('count_at_time', 'in', countAtTimeList)\n    .andWhere('count_type', '=', countType)\n    .orderBy('count_at_time', 'asc')\n    .catch(e => {\n      return []\n    })\n\n  return recordList\n}\n\nexport default {\n  replaceUvRecord,\n  getRecordList,\n  getTableName\n}\n"],"file":"duration_distribution.js"}