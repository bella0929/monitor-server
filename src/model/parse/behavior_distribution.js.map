{"version":3,"sources":["behavior_distribution.js"],"names":["Knex","moment","_","MCityDistribution","DATE_FORMAT","TABLE_NAME","TABLE_COLUMN","getTableName","replaceRecord","projectId","code","name","url","totalCount","countAtTime","countType","cityDistribute","tableName","updateAt","unix","oldRecordList","select","from","where","andWhere","catch","id","get","cityDistributeIdInDb","createTimeInDb","data","project_id","count_at_time","count_type","total_count","update_time","isSuccess","isUpdateSuccess","updateCityDistributionRecord","JSON","stringify","affectRows","update","cityDistributeId","insertCityDistributionRecord","insertResult","returning","insert","into","e","insertId","getRecordList","startAt","finishAt","countAtTimeList","addDateRange","UNIT","HOUR","DAY","MONTH","finishAtMoment","currentAtMoment","isBefore","clone","add","currentAtFormated","format","DATABASE_BY_UNIT","push","recordList","orderBy"],"mappings":"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","sourcesContent":["import Knex from '~/src/library/mysql'\nimport moment from 'moment'\nimport _ from 'lodash'\nimport MCityDistribution from '~/src/model/parse/city_distribution'\nimport DATE_FORMAT from '~/src/constants/date_format'\n\nconst TABLE_NAME = 't_r_behavior_distribution'\nconst TABLE_COLUMN = [\n  `id`,\n  `project_id`,\n  `code`,\n  `name`,\n  `url`,\n  `total_count`,\n  `count_at_time`,\n  `count_type`,\n  `city_distribute_id`,\n  `create_time`,\n  `update_time`\n]\n\n/**\n * 获取表名\n * @param {number} projectId 项目id\n * @param {number} createTimeAt 创建时间, 时间戳\n * @return {String}\n */\nfunction getTableName () {\n  return TABLE_NAME\n}\n\n/**\n * 自动创建&更新, 并增加total_stay_ms的值\n * @param {number} projectId\n * @param {string} code\n * @param {string} name\n * @param {string} url\n * @param {number} totalCount\n * @param {number} countAtTime\n * @param {string} countType\n * @param {object} cityDistribute\n * @return {boolean}\n */\nasync function replaceRecord (projectId, code, name, url, totalCount, countAtTime, countType, cityDistribute) {\n  let tableName = getTableName()\n  let updateAt = moment().unix()\n  // 返回值是一个列表\n  let oldRecordList = await Knex\n    .select([`total_count`, `city_distribute_id`, `create_time`, `id`])\n    .from(tableName)\n    .where('project_id', '=', projectId)\n    .andWhere('count_at_time', '=', countAtTime)\n    .andWhere('code', '=', code)\n    .andWhere('count_type', '=', countType)\n    .catch(() => {\n      return []\n    })\n  // 利用get方法, 不存在直接返回0, 没毛病\n  let id = _.get(oldRecordList, [0, 'id'], 0)\n  let cityDistributeIdInDb = _.get(oldRecordList, [0, 'city_distribute_id'], 0)\n  let createTimeInDb = _.get(oldRecordList, [0, 'create_time'], 0)\n\n  let data = {\n    project_id: projectId,\n    count_at_time: countAtTime,\n    count_type: countType,\n    code,\n    name,\n    url,\n    total_count: totalCount,\n    update_time: updateAt\n  }\n  let isSuccess = false\n  if (id > 0) {\n    // 更新城市分布数据\n    let isUpdateSuccess = MCityDistribution.updateCityDistributionRecord(cityDistributeIdInDb, projectId, createTimeInDb, JSON.stringify(cityDistribute))\n    if (isUpdateSuccess === false) {\n      return false\n    }\n    // 更新具体数据\n    let affectRows = await Knex(tableName)\n      .update(data)\n      .where(`id`, '=', id)\n    isSuccess = affectRows > 0\n  } else {\n    // 首先插入城市分布数据\n    let cityDistributeId = await MCityDistribution.insertCityDistributionRecord(JSON.stringify(cityDistribute), projectId, updateAt)\n    if (cityDistributeId === 0) {\n      // 城市分布数据插入失败\n      return false\n    }\n    data['city_distribute_id'] = cityDistributeId\n    data['create_time'] = updateAt\n    let insertResult = await Knex\n      .returning('id')\n      .insert(data)\n      .into(tableName)\n      .catch(e => { return [] })\n\n    let insertId = _.get(insertResult, [0], 0)\n    isSuccess = insertId > 0\n  }\n  return isSuccess\n}\n\nasync function getRecordList (projectId, startAt, finishAt, countType) {\n  let tableName = getTableName()\n  let countAtTimeList = []\n  let addDateRange = 'day'\n  switch (countType) {\n    case DATE_FORMAT.UNIT.HOUR:\n      addDateRange = 'hour'\n      break\n    case DATE_FORMAT.UNIT.DAY:\n      addDateRange = 'day'\n      break\n    case DATE_FORMAT.UNIT.MONTH:\n      addDateRange = 'month'\n      break\n    default:\n      addDateRange = 'month'\n  }\n  let finishAtMoment = moment.unix(finishAt)\n\n  for (let currentAtMoment = moment.unix(startAt); currentAtMoment.isBefore(finishAtMoment); currentAtMoment = currentAtMoment.clone().add(1, addDateRange)) {\n    let currentAtFormated = currentAtMoment.format(DATE_FORMAT.DATABASE_BY_UNIT[countType])\n    countAtTimeList.push(currentAtFormated)\n  }\n  let recordList = await Knex\n    .select(TABLE_COLUMN)\n    .from(tableName)\n    .where('project_id', projectId)\n    .andWhere('count_at_time', 'in', countAtTimeList)\n    .andWhere('count_type', '=', countType)\n    .orderBy('count_at_time', 'desc')\n    .catch(() => { return [] })\n\n  return recordList\n}\n\nexport default {\n  replaceRecord,\n  getRecordList,\n  getTableName\n}\n"],"file":"behavior_distribution.js"}