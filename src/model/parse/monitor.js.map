{"version":3,"sources":["monitor.js"],"names":["moment","_","Logger","Knex","DATE_FORMAT","MMonitorExt","BaseTableName","ERROR_TYPE_HTTP_ERROR","ERROR_TYPE_接口结构异常","ERROR_TYPE_页面加载异常","ERROR_TYPE_启动异常","ERROR_TYPE_登录异常","ERROR_TYPE_NODE报错","ERROR_TYPE_JS异常","ERROR_TYPE_自定义异常","ERROR_TYPE_MAP","QUERY_GROUP_BY_HOUR","QUERY_GROUP_BY_MINUTE","MAX_SEARCH_ERROR_NAME","MAX_DISPLAY_ERROR","MAX_ERROR_LOG_LENGTH","TABLE_COLUMN","getTableName","projectId","visitAt","visitAtMonth","unix","format","groupBy","params","column","startAt","endAt","whereParams","table","res","select","count","where","andWhere","orderBy","limit","catch","getErrorCountInRangeBySameMonth","finishAt","tableName","rawRecordList","from","e","errorCount","get","getErrorNameDistributionInSameMonth","errorType","url","sqlGroupByFormat","SQL_GROUP_BY_UNIT","jsGroupByFormat","DISPLAY_BY_UNIT","condition","error_type","raw","recordList","rawRecord","record","groupByAt","push","getErrorCountForAlarm","errName","err","log","message","getErrorNameList","nowAt","sevenDayAgoAt","subtract","UNIT","DAY","distinct","as","error","errorNameList","getRecordListInRange","warn","getTotalCountByConditionInSameMonth","offset","max","whereIn","builder","length","totalCount","getListByConditionInSameMonth","rawResult","maxId","extendLogIdList","createAt","extendRecordId","extendRecordList","getRecordListByIdList","extendRecordMap","extendRecord","extJson","extId","ext","JSON","parse"],"mappings":"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","sourcesContent":["import moment from 'moment'\nimport _ from 'lodash'\nimport Logger from '~/src/library/logger'\nimport Knex from '~/src/library/mysql'\nimport DATE_FORMAT from '~/src/constants/date_format'\nimport MMonitorExt from '~/src/model/parse/monitor_ext'\n\nconst BaseTableName = 't_o_monitor'\n\nconst ERROR_TYPE_HTTP_ERROR = '1'\nconst ERROR_TYPE_接口结构异常 = '2'\nconst ERROR_TYPE_页面加载异常 = '3'\nconst ERROR_TYPE_启动异常 = '4'\nconst ERROR_TYPE_登录异常 = '5'\nconst ERROR_TYPE_NODE报错 = '6'\nconst ERROR_TYPE_JS异常 = '7'\nconst ERROR_TYPE_自定义异常 = '8'\n\nconst ERROR_TYPE_MAP = {}\nERROR_TYPE_MAP[ERROR_TYPE_HTTP_ERROR] = 'HTTP_ERROR'\nERROR_TYPE_MAP[ERROR_TYPE_接口结构异常] = '接口结构异常'\nERROR_TYPE_MAP[ERROR_TYPE_页面加载异常] = '页面加载异常'\nERROR_TYPE_MAP[ERROR_TYPE_启动异常] = '启动异常'\nERROR_TYPE_MAP[ERROR_TYPE_登录异常] = '登录异常'\nERROR_TYPE_MAP[ERROR_TYPE_NODE报错] = 'NODE报错'\nERROR_TYPE_MAP[ERROR_TYPE_JS异常] = 'JS异常'\nERROR_TYPE_MAP[ERROR_TYPE_自定义异常] = '自定义异常'\n\nconst QUERY_GROUP_BY_HOUR = 'hour'\nconst QUERY_GROUP_BY_MINUTE = 'minute'\n\nconst MAX_SEARCH_ERROR_NAME = 5000\nconst MAX_DISPLAY_ERROR = 10\nconst MAX_ERROR_LOG_LENGTH = 10000\n\nconst TABLE_COLUMN = [\n  `id`,\n  `error_type`,\n  `error_name`,\n  `http_code`,\n  `monitor_ext_id`,\n  `during_ms`,\n  `request_size_b`,\n  `response_size_b`,\n  `url`,\n  `country`,\n  `province`,\n  `city`,\n  `log_at`,\n  `md5`,\n  `create_time`,\n  `update_time`\n]\n\n/**\n * @param {*} projectId\n * @param {*} visitAt\n */\nfunction getTableName (projectId, visitAt) {\n  let visitAtMonth = moment.unix(visitAt).format('YYYYMM')\n  return `${BaseTableName}_${projectId}_${visitAtMonth}`\n}\n\n/**\n * 统计某一列的个数, 只取前MAX_DISPLAY_ERROR条数据\n * @param {object} params\n */\nasync function groupBy (params) {\n  const { column, startAt, endAt, whereParams, projectId } = params\n  const table = getTableName(projectId, startAt)\n  let res = await Knex(table)\n    .select(column)\n    .count('* as error_count')\n    .groupBy(column)\n    .where(whereParams)\n    .andWhere('log_at', '>', startAt)\n    .andWhere('log_at', '<', endAt)\n    .orderBy('error_count', 'desc')\n    .limit(MAX_DISPLAY_ERROR)\n    .catch(() => { return [] })\n  return res\n}\n\n/**\n * 计算同一个月内, 指定项目的错误总数\n * @param {*} projectId\n * @param {*} startAt\n * @param {*} finishAt\n */\nasync function getErrorCountInRangeBySameMonth (projectId, startAt, finishAt) {\n  const tableName = getTableName(projectId, startAt)\n  let rawRecordList = await Knex\n    .count('* as error_count')\n    .from(tableName)\n    .where('log_at', '>', startAt)\n    .andWhere('log_at', '<', finishAt)\n    .catch(e => {\n      return []\n    })\n  let errorCount = _.get(rawRecordList, [0, 'error_count'], 0)\n  return errorCount\n}\n\n/**\n * 计算同一个月内, 指定项目, 指定错误类型中的错误分布数据(只取前MAX_DISPLAY_ERROR条)\n * @param {*} projectId\n * @param {*} startAt\n * @param {*} finishAt\n * @param {*} errorType\n */\nasync function getErrorNameDistributionInSameMonth (projectId, startAt, finishAt, errorType, url, groupBy = QUERY_GROUP_BY_MINUTE) {\n  // 配置格式化模板\n  let sqlGroupByFormat = DATE_FORMAT.SQL_GROUP_BY_UNIT[groupBy]\n  let jsGroupByFormat = DATE_FORMAT.DISPLAY_BY_UNIT[groupBy]\n\n  let condition = {\n    error_type: errorType\n  }\n  if (url) {\n    condition['url'] = url\n  }\n\n  const tableName = getTableName(projectId, startAt)\n  // 返回值demo =>\n  // [{\"error_count\":8,\"error_name\":\"ERR_ABORTED\",\"group_by\":\"2018-10-23 16:27:00\"},{\"error_count\":20,\"error_name\":\"ERR_ABORTED\",\"group_by\":\"2018-10-23 16:28:00\"},{\"error_count\":11,\"error_name\":\"ERR_ABORTED\",\"group_by\":\"2018-10-23 16:29:00\"},{\"error_count\":1,\"error_name\":\"ERR_BLOCKED_BY_CLIENT\",\"group_by\":\"2018-10-23 16:27:00\"},{\"error_count\":5,\"error_name\":\"ERR_BLOCKED_BY_CLIENT\",\"group_by\":\"2018-10-23 16:28:00\"},{\"error_count\":3,\"error_name\":\"ERR_BLOCKED_BY_CLIENT\",\"group_by\":\"2018-10-23 16:29:00\"},{\"error_count\":1,\"error_name\":\"ERR_CONNECTION_TIMED_OUT\",\"group_by\":\"2018-10-23 16:28:00\"},{\"error_count\":2,\"error_name\":\"ERR_CONNECTION_TIMED_OUT\",\"group_by\":\"2018-10-23 16:29:00\"},{\"error_count\":1,\"error_name\":\"ERR_EMPTY_RESPONSE\",\"group_by\":\"2018-10-23 16:27:00\"},{\"error_count\":2,\"error_name\":\"ERR_EMPTY_RESPONSE\",\"group_by\":\"2018-10-23 16:28:00\"}]\n  let rawRecordList = await Knex\n    .count('* as error_count')\n    .select('error_name', Knex.raw(`FROM_UNIXTIME(\\`log_at\\`, '${sqlGroupByFormat}') as group_by`))\n    .from(tableName)\n    .where('log_at', '>', startAt)\n    .andWhere('log_at', '<', finishAt)\n    .andWhere(condition)\n    .groupBy('error_name', 'group_by')\n    .orderBy('error_count', 'desc')\n    .limit(MAX_DISPLAY_ERROR)\n    .catch((e) => {\n      return []\n    })\n  // 将group_by转换成时间戳\n  let recordList = []\n  for (let rawRecord of rawRecordList) {\n    let record = {}\n    record['error_type'] = errorType\n    record['error_name'] = rawRecord['error_name']\n    record['error_count'] = rawRecord['error_count']\n    let groupByAt = moment(rawRecord['group_by'], jsGroupByFormat).unix()\n    record['group_by_at'] = groupByAt\n    recordList.push(record)\n  }\n  return recordList\n}\n\n/**\n * 在当前月份表里查询一条报警配置对应的错误\n * @param {number} projectId 要查询的项目id\n * @param {string} errType 查询的错误类型\n * @param {string} errName 查询的错误名字\n * @param {number} startAt 查询的开始时间\n * @param {number} endAt 查询的结束时间\n */\nasync function getErrorCountForAlarm (projectId, errName, startAt, endAt) {\n  const tableName = getTableName(projectId, startAt)\n  const whereParams = {}\n  if (errName !== '*') {\n    whereParams['error_name'] = errName\n  }\n  const rawRecordList = await Knex\n    .count('id as error_count')\n    .from(tableName)\n    .where(whereParams)\n    .andWhere('log_at', '>=', startAt)\n    .andWhere('log_at', '<=', endAt)\n    .catch(err => {\n      Logger.log(err.message, '=========>查询报警配置对应的错误数')\n      return []\n    })\n  return _.get(rawRecordList, ['0', 'error_count'], 0)\n}\n\n/**\n * 获取项目的error name 列表\n * @param {number} projectId\n * @param {string} errorType\n */\nasync function getErrorNameList (projectId, errorType) {\n  const nowAt = moment().unix()\n  const sevenDayAgoAt = moment().subtract(7, DATE_FORMAT.UNIT.DAY).unix()\n  const tableName = getTableName(projectId, nowAt)\n  const rawRecordList = await Knex\n    .select()\n    .distinct('error_name')\n    .from(function () {\n      this.select(['id', 'error_name'])\n        .from(tableName)\n        .where('error_type', errorType)\n        .orderBy('id', 'desc')\n        .where('log_at', '>', sevenDayAgoAt)\n        .andWhere('log_at', '<', nowAt)\n        .limit(MAX_SEARCH_ERROR_NAME)\n        .as('t1')\n    })\n    .catch(err => {\n      Logger.error(err.message, '=========>获取项目的error name 列表')\n      return []\n    })\n  const errorNameList = []\n  for (let rawRecord of rawRecordList) {\n    errorNameList.push(rawRecord['error_name'])\n  }\n  return errorNameList\n}\n\nasync function getRecordListInRange (projectId, startAt, endAt) {\n  // @todo(hanqingxin) 应统一使用startAt计算表名\n  const tableName = getTableName(projectId, endAt)\n  const rawRecordList = await Knex\n    .select(TABLE_COLUMN)\n    .from(tableName)\n    .where('log_at', '>', startAt)\n    .andWhere('log_at', '<', endAt)\n    .catch(err => {\n      Logger.warn(err.message)\n      return []\n    })\n  return rawRecordList\n}\n\n/**\n * 获取分页总数\n * @param {*} projectId\n * @param {*} startAt\n * @param {*} endAt\n * @param {*} offset\n * @param {*} max\n * @param {*} errorNameList\n * @param {*} url\n */\nasync function getTotalCountByConditionInSameMonth (projectId, startAt, endAt, offset = 0, max = 10, errorNameList = [], url = '') {\n  let tableName = getTableName(projectId, startAt)\n\n  let rawRecordList = await Knex\n    .count('* as total_count')\n    .from(tableName)\n    .where('log_at', '>', startAt)\n    .andWhere('log_at', '<', endAt)\n    .whereIn('error_name', errorNameList)\n    .andWhere((builder) => {\n      // 外部传入的url可能是去除get参数后的结果, 所以需要进行模糊匹配\n      // @todo(yaozeyuan) 添加字段, 记录 页面真实地址, 以和url进行区分\n      if (url.length > 0) {\n        builder.where('url', 'like', `%${url}%`)\n      }\n    })\n    .catch(e => {\n      Logger.warn(e)\n      return []\n    })\n\n  let totalCount = _.get(rawRecordList, [0, 'total_count'], 0)\n  return totalCount\n}\n\n/**\n * 获取分页数据\n * @param {*} projectId\n * @param {*} startAt\n * @param {*} endAt\n * @param {*} offset\n * @param {*} max\n * @param {*} errorNameList\n * @param {*} url\n */\nasync function getListByConditionInSameMonth (projectId, startAt, endAt, offset = 0, max = 10, errorNameList = [], url = '') {\n  let tableName = getTableName(projectId, startAt)\n\n  // 获取最大id\n  let rawResult = await Knex\n    .max('id as maxId')\n    .from(tableName)\n    .catch(err => {\n      Logger.error('monitor.js => getListByConditionInSameMonth获取最大id出错', err.message)\n      return [{ maxId: 0 }]\n    })\n  let maxId = _.get(rawResult, [0, 'maxId'], 0)\n  if (maxId === null || maxId === 0) return []\n  let rawRecordList = await Knex\n    .select(TABLE_COLUMN)\n    .from(tableName)\n    .where('log_at', '>', startAt)\n    .andWhere('id', '>', maxId - MAX_ERROR_LOG_LENGTH)\n    .andWhere('log_at', '<', endAt)\n    .whereIn('error_name', errorNameList)\n    .andWhere((builder) => {\n      // 外部传入的url可能是去除get参数后的结果, 所以需要进行模糊匹配\n      // @todo(yaozeyuan) 添加字段, 记录 页面真实地址, 以和url进行区分\n      if (url.length > 0) {\n        builder.where('url', 'like', `%${url}%`)\n      }\n    })\n    .orderBy('log_at', 'desc')\n    .offset(offset)\n    .limit(max)\n    .catch(e => {\n      Logger.warn(e)\n      return []\n    })\n\n  let extendLogIdList = []\n  let createAt = 0\n  if (rawRecordList.length === 0) return []\n  for (let rawRecord of rawRecordList) {\n    let extendRecordId = _.get(rawRecord, ['monitor_ext_id'], 0)\n    // 所有记录一定在同一张扩展表里\n    createAt = _.get(rawRecord, ['create_time'], 0)\n    extendLogIdList.push(extendRecordId)\n  }\n  // 补全扩展信息\n  let extendRecordList = await MMonitorExt.getRecordListByIdList(projectId, createAt, extendLogIdList)\n  let extendRecordMap = {}\n  for (let extendRecord of extendRecordList) {\n    let extJson = _.get(extendRecord, ['ext_json'], '{}')\n    let extId = _.get(extendRecord, ['id'], '{}')\n    let ext = {}\n    try {\n      ext = JSON.parse(extJson)\n    } catch (e) {\n      ext = {}\n    }\n    extendRecordMap[extId] = ext\n  }\n\n  // 填充到数据里\n  let recordList = []\n  for (let rawRecord of rawRecordList) {\n    let extendRecordId = _.get(rawRecord, ['monitor_ext_id'], 0)\n    let extendRecord = _.get(extendRecordMap, [extendRecordId], {})\n    rawRecord['ext'] = extendRecord\n    let record = {\n      ...rawRecord\n    }\n    recordList.push(record)\n  }\n\n  return recordList\n}\n\nexport default {\n  getTableName,\n  groupBy,\n  getErrorCountInRangeBySameMonth,\n  getErrorCountForAlarm,\n  getRecordListInRange,\n\n  // 新error接口\n  getTotalCountByConditionInSameMonth,\n  getListByConditionInSameMonth,\n\n  // 错误类型\n  ERROR_TYPE_HTTP_ERROR,\n  ERROR_TYPE_接口结构异常,\n  ERROR_TYPE_页面加载异常,\n  ERROR_TYPE_启动异常,\n  ERROR_TYPE_登录异常,\n  ERROR_TYPE_NODE报错,\n  ERROR_TYPE_JS异常,\n  ERROR_TYPE_自定义异常,\n  ERROR_TYPE_MAP,\n\n  // 分组格式\n  QUERY_GROUP_BY_HOUR,\n  QUERY_GROUP_BY_MINUTE\n}\n"],"file":"monitor.js"}