{"version":3,"sources":["common.js"],"names":["moment","_","Knex","SPLIT_BY","PROJECT","MONTH","getTableName","tableName","splitBy","projectId","yearMonth","format","insertInto","infos","datas","updateAt","unix","TableName","insert","catch","getRecordList","select","where","updateInto","params","update","replaceInto","table","res","from","id","get","isSuccess","affectRows","insertId","into"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAOC,IAAP,MAAiB,qBAAjB;AAEA,MAAMC,QAAQ,GAAG;AACfC,EAAAA,OAAO,EAAE,SADM;AAEfC,EAAAA,KAAK,EAAE;AAFQ,CAAjB;;AAKA,SAASC,YAAT,CAAuBC,SAAvB,EAAkCC,OAAlC,EAA2CC,SAA3C,EAAsD;AACpD,QAAMC,SAAS,GAAGV,MAAM,GAAGW,MAAT,CAAgB,QAAhB,CAAlB;;AACA,MAAIH,OAAO,KAAK,SAAhB,EAA2B;AACzB,WAAQ,GAAED,SAAU,IAAGE,SAAU,EAAjC;AACD,GAFD,MAEO,IAAID,OAAO,KAAK,OAAhB,EAAyB;AAC9B,WAAQ,GAAED,SAAU,IAAGE,SAAU,IAAGC,SAAU,EAA9C;AACD;;AACD,SAAOH,SAAP;AACD;AAED;AACA;AACA;AACA;;;AACA,eAAeK,UAAf,CAA2BC,KAA3B,EAAkC;AAChC,QAAM;AAAEJ,IAAAA,SAAF;AAAaF,IAAAA,SAAb;AAAwBC,IAAAA,OAAxB;AAAiCM,IAAAA;AAAjC,MAA2CD,KAAjD;AACA,MAAIE,QAAQ,GAAGf,MAAM,GAAGgB,IAAT,EAAf;;AACA,MAAI,CAACF,KAAK,CAAC,aAAD,CAAV,EAA2B;AACzBA,IAAAA,KAAK,CAAC,aAAD,CAAL,GAAuBC,QAAvB;AACD;;AACD,MAAI,CAACD,KAAK,CAAC,aAAD,CAAV,EAA2B;AACzBA,IAAAA,KAAK,CAAC,aAAD,CAAL,GAAuBC,QAAvB;AACD;;AACD,QAAME,SAAS,GAAGX,YAAY,CAACC,SAAD,EAAYC,OAAZ,EAAqBC,SAArB,CAA9B;AACA,SAAOP,IAAI,CAACe,SAAD,CAAJ,CACJC,MADI,CACGJ,KADH,EAEJK,KAFI,CAEE,MAAM;AAAE,WAAO,CAAP;AAAU,GAFpB,CAAP;AAGD;;AAED,eAAeC,aAAf,CAA8BP,KAA9B,EAAqC;AACnC,QAAM;AAAEJ,IAAAA,SAAF;AAAaF,IAAAA,SAAb;AAAwBc,IAAAA,MAAxB;AAAgCC,IAAAA,KAAhC;AAAuCd,IAAAA;AAAvC,MAAmDK,KAAzD;AACA,QAAMI,SAAS,GAAGX,YAAY,CAACC,SAAD,EAAYC,OAAZ,EAAqBC,SAArB,CAA9B;AACA,SAAOP,IAAI,CAACe,SAAD,CAAJ,CACJI,MADI,CACGA,MADH,EAEJC,KAFI,CAEEA,KAFF,EAGJH,KAHI,CAGE,MAAM;AAAE,WAAO,EAAP;AAAW,GAHrB,CAAP;AAID;;AAED,eAAeI,UAAf,CAA2BC,MAA3B,EAAmC;AACjC,QAAM;AAAEf,IAAAA,SAAF;AAAaF,IAAAA,SAAb;AAAwBe,IAAAA,KAAxB;AAA+Bd,IAAAA,OAA/B;AAAwCM,IAAAA;AAAxC,MAAkDU,MAAxD;AACA,MAAIT,QAAQ,GAAGf,MAAM,GAAGgB,IAAT,EAAf;AACAF,EAAAA,KAAK,CAAC,aAAD,CAAL,GAAuBC,QAAvB;AACA,QAAME,SAAS,GAAGX,YAAY,CAACC,SAAD,EAAYC,OAAZ,EAAqBC,SAArB,CAA9B;AACA,SAAOP,IAAI,CAACe,SAAD,CAAJ,CACJK,KADI,CACEA,KADF,EAEJG,MAFI,CAEGX,KAFH,EAGJK,KAHI,CAGE,MAAM;AAAE,WAAO,CAAP;AAAU,GAHpB,CAAP;AAID;AAED;AACA;AACA;AACA;;;AACA,eAAeO,WAAf,CAA4BF,MAA5B,EAAoC;AAClC,QAAM;AAAEjB,IAAAA,SAAF;AAAae,IAAAA,KAAb;AAAoBR,IAAAA,KAApB;AAA2BN,IAAAA,OAA3B;AAAoCC,IAAAA;AAApC,MAAkDe,MAAxD;AACA,QAAMG,KAAK,GAAGrB,YAAY,CAACC,SAAD,EAAYC,OAAZ,EAAqBC,SAArB,CAA1B;AACA,MAAImB,GAAG,GAAG,MAAM1B,IAAI,CAAC2B,IAAL,CAAUF,KAAV,EAAiBN,MAAjB,CAAwB,IAAxB,EAA8BC,KAA9B,CAAoCA,KAApC,CAAhB;;AACA,MAAIQ,EAAE,GAAG7B,CAAC,CAAC8B,GAAF,CAAMH,GAAN,EAAW,CAAC,CAAD,EAAI,IAAJ,CAAX,EAAsB,CAAtB,CAAT;;AACA,MAAIb,QAAQ,GAAGf,MAAM,GAAGgB,IAAT,EAAf;AACA,MAAIgB,SAAS,GAAG,KAAhB;;AACA,MAAIF,EAAE,GAAG,CAAT,EAAY;AACVhB,IAAAA,KAAK,CAAC,aAAD,CAAL,GAAuBC,QAAvB;AACA,UAAMkB,UAAU,GAAG,MAAM/B,IAAI,CAACyB,KAAD,CAAJ,CACtBL,KADsB,CACf,IADe,EACV,GADU,EACLQ,EADK,EAEtBL,MAFsB,CAEfX,KAFe,EAGtBK,KAHsB,CAGhB,MAAM;AAAE,aAAO,CAAP;AAAU,KAHF,CAAzB;AAIAa,IAAAA,SAAS,GAAGC,UAAU,GAAG,CAAzB;AACD,GAPD,MAOO;AACLnB,IAAAA,KAAK,CAAC,aAAD,CAAL,GAAuBC,QAAvB;AACAD,IAAAA,KAAK,CAAC,aAAD,CAAL,GAAuBC,QAAvB;AACA,UAAMmB,QAAQ,GAAG,MAAMhC,IAAI,CACxBgB,MADoB,CACbJ,KADa,EAEpBqB,IAFoB,CAEfR,KAFe,EAGpBR,KAHoB,CAGd,MAAM;AAAE,aAAO,CAAP;AAAU,KAHJ,CAAvB;AAIAa,IAAAA,SAAS,GAAGE,QAAQ,GAAG,CAAvB;AACD;;AACD,SAAOF,SAAP;AACD;;AAED,eAAe;AACb7B,EAAAA,QADa;AAEbS,EAAAA,UAFa;AAGbW,EAAAA,UAHa;AAIbG,EAAAA,WAJa;AAKbpB,EAAAA,YALa;AAMbc,EAAAA;AANa,CAAf","sourcesContent":["import moment from 'moment'\nimport _ from 'lodash'\nimport Knex from '~/src/library/mysql'\n\nconst SPLIT_BY = {\n  PROJECT: 'project',\n  MONTH: 'month'\n}\n\nfunction getTableName (tableName, splitBy, projectId) {\n  const yearMonth = moment().format('YYYYMM')\n  if (splitBy === 'project') {\n    return `${tableName}_${projectId}`\n  } else if (splitBy === 'month') {\n    return `${tableName}_${projectId}_${yearMonth}`\n  }\n  return tableName\n}\n\n/**\n * 入库\n * @param {object} datas\n */\nasync function insertInto (infos) {\n  const { projectId, tableName, splitBy, datas } = infos\n  let updateAt = moment().unix()\n  if (!datas['create_time']) {\n    datas['create_time'] = updateAt\n  }\n  if (!datas['update_time']) {\n    datas['update_time'] = updateAt\n  }\n  const TableName = getTableName(tableName, splitBy, projectId)\n  return Knex(TableName)\n    .insert(datas)\n    .catch(() => { return 0 })\n}\n\nasync function getRecordList (infos) {\n  const { projectId, tableName, select, where, splitBy } = infos\n  const TableName = getTableName(tableName, splitBy, projectId)\n  return Knex(TableName)\n    .select(select)\n    .where(where)\n    .catch(() => { return [] })\n}\n\nasync function updateInto (params) {\n  const { projectId, tableName, where, splitBy, datas } = params\n  let updateAt = moment().unix()\n  datas['update_time'] = updateAt\n  const TableName = getTableName(tableName, splitBy, projectId)\n  return Knex(TableName)\n    .where(where)\n    .update(datas)\n    .catch(() => { return 0 })\n}\n\n/**\n * 封装knex，按照指定条件查询，有数据更新，无数据添加\n * @param {object} params\n */\nasync function replaceInto (params) {\n  const { tableName, where, datas, splitBy, projectId } = params\n  const table = getTableName(tableName, splitBy, projectId)\n  let res = await Knex.from(table).select('id').where(where)\n  let id = _.get(res, [0, 'id'], 0)\n  let updateAt = moment().unix()\n  let isSuccess = false\n  if (id > 0) {\n    datas['update_time'] = updateAt\n    const affectRows = await Knex(table)\n      .where(`id`, '=', id)\n      .update(datas)\n      .catch(() => { return 0 })\n    isSuccess = affectRows > 0\n  } else {\n    datas['create_time'] = updateAt\n    datas['update_time'] = updateAt\n    const insertId = await Knex\n      .insert(datas)\n      .into(table)\n      .catch(() => { return 0 })\n    isSuccess = insertId > 0\n  }\n  return isSuccess\n}\n\nexport default {\n  SPLIT_BY,\n  insertInto,\n  updateInto,\n  replaceInto,\n  getTableName,\n  getRecordList\n}\n"],"file":"common.js"}