{"version":3,"sources":["city_distribution.js"],"names":["Knex","moment","_","Logger","DateFormat","BaseTableName","TABLE_COLUMN","getTableName","projectId","createTimeAt","YmDate","unix","format","getCityDistributionRecord","id","tableName","recordList","select","from","where","catch","e","resultJson","get","result","JSON","parse","updateCityDistributionRecord","cityDistributeJson","updateAt","data","city_distribute_json","update_time","affectRows","update","warn","insertCityDistributionRecord","create_time","insertResult","returning","insert","into","insertId","mergeDistributionData","distributionSource","distributionDist","processCityData","cityDataDist","cityDataSource","finalDistribution","clone","country","Object","keys","has","set","countryDistributionSource","countryDistributionDist","province","provinceDistributionSource","provinceDistributionDist","city","cityDistributionSource","cityDistributionDist","getByIdListInOneMonth","cityDistributionIdList","talbeName","rawRecordList","whereIn","err","error","message","getFlattenCityRecordListInDistribution","distribution","countryDistribution","provinceDistribution","cityRecord","push"],"mappings":"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","sourcesContent":["import Knex from '~/src/library/mysql'\nimport moment from 'moment'\nimport _ from 'lodash'\nimport Logger from '~/src/library/logger'\n\nconst DateFormat = 'YYYYMM'\n\nconst BaseTableName = 't_r_city_distribution'\nconst TABLE_COLUMN = [\n  `id`,\n  `city_distribute_json`,\n  `create_time`,\n  `update_time`\n]\n\n/**\n * 获取表名\n * @param {number} projectId 项目id\n * @param {number} createTimeAt 创建时间, 时间戳\n * @return {String}\n */\nfunction getTableName (projectId, createTimeAt) {\n  let YmDate = moment.unix(createTimeAt).format(DateFormat)\n  return BaseTableName + '_' + projectId + '_' + YmDate\n}\n\n/**\n * 获取解析后的城市分布记录, 解析失败返回空对象({})\n * @param {number} id\n * @param {number} projectId\n * @param {number} createTimeAt\n * @return {object}\n */\nasync function getCityDistributionRecord (id, projectId, createTimeAt) {\n  let tableName = getTableName(projectId, createTimeAt)\n  let recordList = await Knex\n    .select(TABLE_COLUMN)\n    .from(tableName)\n    .where('id', '=', id)\n    .catch(e => {\n      return []\n    })\n  let resultJson = _.get(recordList, [0, 'city_distribute_json'], '{}')\n  let result = {}\n  try {\n    result = JSON.parse(resultJson)\n    return result\n  } catch (e) {\n    return {}\n  }\n}\n\n/**\n * 更新城市分布记录, 返回更新是否成功\n * @param {number} id\n * @param {number} projectId\n * @param {number} createTimeAt\n * @param {string} cityDistributeJson\n * @return {boolean}\n */\nasync function updateCityDistributionRecord (id, projectId, createTimeAt, cityDistributeJson) {\n  let tableName = getTableName(projectId, createTimeAt)\n  let updateAt = moment().unix()\n  let data = {\n    city_distribute_json: cityDistributeJson,\n    update_time: updateAt\n  }\n  let affectRows = await Knex(tableName)\n    .update(data)\n    .where('id', '=', id)\n    .catch(e => {\n      Logger.warn('城市数据更新失败, 错误原因 =>', e)\n      return 0\n    })\n  return affectRows > 0\n}\n\n/**\n * 插入城市分布记录, 返回插入id\n * @param {string} cityDistributeJson\n * @param {number} projectId\n * @param {number} createTimeAt\n * @return {number}\n */\nasync function insertCityDistributionRecord (cityDistributeJson, projectId, createTimeAt) {\n  let tableName = getTableName(projectId, createTimeAt)\n  let updateAt = moment().unix()\n  let data = {\n    city_distribute_json: cityDistributeJson,\n    create_time: updateAt,\n    update_time: updateAt\n  }\n  let insertResult = await Knex\n    .returning('id')\n    .insert(data)\n    .into(tableName)\n    .catch(e => {\n      Logger.warn('城市数据插入失败, 错误原因 =>', e)\n      return []\n    })\n  let insertId = _.get(insertResult, [0], 0)\n\n  return insertId\n}\n\n/**\n * 合并分布数据中, 相同城市的数据, 默认直接相加\n * @param {Object} distributionSource   (来源)从数据库中新查出来的数据\n * @param {Object} distributionDist     (目的地)过往累加计入的结果集\n * @param {Function} processCityData\n */\nfunction mergeDistributionData (distributionSource, distributionDist, processCityData = (cityDataDist, cityDataSource) => { return cityDataDist + cityDataSource }) {\n  let finalDistribution = _.clone(distributionDist)\n  for (let country of Object.keys(distributionSource)) {\n    if (_.has(distributionDist, country) === false) {\n      // 没有就直接更新上\n      _.set(finalDistribution, [country], distributionSource[country])\n      continue\n    }\n    let countryDistributionSource = distributionSource[country]\n    let countryDistributionDist = distributionDist[country]\n    for (let province of Object.keys(countryDistributionSource)) {\n      if (_.has(countryDistributionDist, province) === false) {\n        _.set(finalDistribution, [country, province], distributionSource[country][province])\n        continue\n      }\n      let provinceDistributionSource = countryDistributionSource[province]\n      let provinceDistributionDist = countryDistributionDist[province]\n      for (let city of Object.keys(provinceDistributionSource)) {\n        if (_.has(provinceDistributionDist, city) === false) {\n          _.set(finalDistribution, [country, province, city], distributionSource[country][province][city])\n          continue\n        }\n        let cityDistributionSource = provinceDistributionSource[city]\n        let cityDistributionDist = provinceDistributionDist[city]\n        _.set(finalDistribution, [country, province, city], processCityData(cityDistributionDist, cityDistributionSource))\n      }\n    }\n  }\n  return finalDistribution\n}\n\n/**\n * 根据idList获取原始数据\n * @param {*} projectId\n * @param {*} cityDistributionIdList\n * @param {*} createTimeAt\n */\nasync function getByIdListInOneMonth (projectId, cityDistributionIdList, createTimeAt) {\n  const talbeName = getTableName(projectId, createTimeAt)\n  const rawRecordList = await Knex\n    .select(TABLE_COLUMN)\n    .from(talbeName)\n    .whereIn('id', cityDistributionIdList)\n    .catch(err => {\n      Logger.error('citydistribution => getByIdListInOneMonth:', err.message)\n      return []\n    })\n  return rawRecordList\n}\n/**\n * 将城市分布数据拍平后, 作为一个列表返回回来, 方便集中处理\n * @param {*} distribution\n * @return {Array}\n */\nfunction getFlattenCityRecordListInDistribution (distribution) {\n  let recordList = []\n  for (let country of Object.keys(distribution)) {\n    let countryDistribution = distribution[country]\n    for (let province of Object.keys(countryDistribution)) {\n      let provinceDistribution = countryDistribution[province]\n      for (let city of Object.keys(provinceDistribution)) {\n        let cityRecord = provinceDistribution[city]\n        recordList.push(cityRecord)\n      }\n    }\n  }\n  return recordList\n}\n\nexport default {\n  getCityDistributionRecord,\n  insertCityDistributionRecord,\n  updateCityDistributionRecord,\n  mergeDistributionData,\n  getFlattenCityRecordListInDistribution,\n  getTableName,\n  getByIdListInOneMonth\n}\n"],"file":"city_distribution.js"}