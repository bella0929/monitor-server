{"version":3,"sources":["user_first_login_at.js"],"names":["Knex","moment","_","BASE_TABLE_NAME","TABLE_COLUMN","getTableName","projectId","getList","startAt","endAt","tableName","recordList","select","from","where","andWhere","catch","e","replaceInto","ucid","firstVisitAt","country","province","city","updateAt","unix","oldRecordList","id","get","oldFirstVisitAt","data","first_visit_at","update_time","isSuccess","affectRows","update","insertResult","returning","insert","into","insertId","filterExistUcidSetInDb","allUcidList","rawRecordList","whereIn","existUcidSet","Set","rawRecord","add"],"mappings":"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","sourcesContent":["import Knex from '~/src/library/mysql'\nimport moment from 'moment'\nimport _ from 'lodash'\n\nconst BASE_TABLE_NAME = 't_o_user_first_login_at'\nconst TABLE_COLUMN = [\n  `id`,\n  `ucid`,\n  `first_visit_at`,\n  `country`,\n  `province`,\n  `city`,\n  `create_time`,\n  `update_time`\n]\n\n/**\n * 获取表名\n * @param {number} projectId 项目id\n * @return {String}\n */\nfunction getTableName (projectId) {\n  return `${BASE_TABLE_NAME}_${projectId}`\n}\n\nasync function getList (projectId, startAt, endAt) {\n  let tableName = getTableName(projectId)\n  let recordList = await Knex\n    .select(TABLE_COLUMN)\n    .from(tableName)\n    .where('first_visit_at', '>=', startAt)\n    .andWhere('first_visit_at', '<=', endAt)\n    .catch(e => {\n      return []\n    })\n  return recordList\n}\n\n/**\n * 若数据库中记录的最早登陆时间比传入值更晚, 则更新为传入的更新时间\n * @param {number} projectId\n * @param {string} ucid\n * @param {number} visitAt\n * @param {number} pvCount\n * @param {string} country\n * @param {string} province\n * @param {string} city\n * @return {boolean}\n */\nasync function replaceInto (projectId, ucid, firstVisitAt, country, province, city) {\n  let tableName = getTableName(projectId)\n  let updateAt = moment().unix()\n  // 返回值是一个列表\n  let oldRecordList = await Knex\n    .select([`id`, `first_visit_at`])\n    .from(tableName)\n    .where('ucid', '=', ucid)\n    .catch(() => {\n      return []\n    })\n  // 利用get方法, 不存在直接返回0, 没毛病\n  let id = _.get(oldRecordList, [0, 'id'], 0)\n  let oldFirstVisitAt = _.get(oldRecordList, [0, 'first_visit_at'], 0)\n  let data = {\n    ucid,\n    first_visit_at: firstVisitAt,\n    country,\n    province,\n    city,\n    update_time: updateAt\n  }\n  let isSuccess = false\n  if (id > 0) {\n    if (oldFirstVisitAt > 0 && oldFirstVisitAt > firstVisitAt) {\n      // 有更新的数据时更新一下\n      let affectRows = await Knex(tableName)\n        .update(data)\n        .where(`id`, '=', id)\n      isSuccess = affectRows > 0\n    } else {\n      return true\n    }\n  } else {\n    data['create_time'] = updateAt\n    let insertResult = await Knex.returning('id')\n      .insert(data)\n      .into(tableName)\n      .catch(e => {\n        return []\n      })\n    let insertId = _.get(insertResult, [0], 0)\n    isSuccess = insertId > 0\n  }\n  return isSuccess\n}\n\n/**\n * 过滤所有已存在在数据库中的ucid(使用Set, 以便区分Map和Object)\n * @param {*} projectId\n * @param {*} allUcidList\n * @returns {object}\n */\nasync function filterExistUcidSetInDb (projectId, allUcidList) {\n  let tableName = getTableName(projectId)\n  let rawRecordList = await Knex\n    .select('ucid')\n    .from(tableName)\n    .whereIn('ucid', allUcidList)\n  let existUcidSet = new Set()\n  for (let rawRecord of rawRecordList) {\n    let ucid = _.get(rawRecord, ['ucid'], '')\n    existUcidSet.add(ucid)\n  }\n  return existUcidSet\n}\n\nexport default {\n  getTableName,\n\n  getList,\n  filterExistUcidSetInDb,\n  replaceInto\n}\n"],"file":"user_first_login_at.js"}