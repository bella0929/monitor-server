{"version":3,"sources":["performance.js"],"names":["moment","_","Knex","DATE_FORMAT","DatabaseUtil","Logger","MCityDistribution","BASE_TABLE_NAME","INDICATOR_TYPE_DNS查询耗时","INDICATOR_TYPE_TCP链接耗时","INDICATOR_TYPE_请求响应耗时","INDICATOR_TYPE_内容传输耗时","INDICATOR_TYPE_DOM解析耗时","INDICATOR_TYPE_资源加载耗时","INDICATOR_TYPE_SSL连接耗时","INDICATOR_TYPE_首次渲染耗时","INDICATOR_TYPE_首包时间耗时","INDICATOR_TYPE_首次可交互耗时","INDICATOR_TYPE_DOM_READY_耗时","INDICATOR_TYPE_页面完全加载耗时","INDICATOR_TYPE_MAP","INDICATOR_TYPE_LIST","Object","keys","TABLE_COLUMN","getTableName","projectId","createAt","createAtMoment","unix","monthStr","clone","format","get","url","indicator","countAt","countType","UNIT","MINUTE","tableName","dateFormat","DATABASE_BY_UNIT","countAtTime","rawRecord","select","from","where","count_at_time","count_type","catch","e","warn","record","getList","startAt","finishAt","condition","startAtMoment","recordList","tableNameList","getTableNameListInRange","log","countAtTimeList","countStartAtMoment","add","formatCountAtTime","push","rawRecordList","whereIn","andWhere","builder","has","concat","getDistinctUrlListInRange","indicatorList","endAt","startOf","urlList","console","distinct","distinctUrlList","union","getUrlOverviewInSameMonth","overview","sum","groupBy","rawOverview","totalSumIndicatorValue","totalPv","oldTotalSumIndicatorValue","oldTotalPv","set","pv","parseInt","computePercent","getIndicatorLineChartDataInSameMonth","lineChartDataList","lineChartDataMap","unixKeyList","sumIndicatorValue","recordAt","unixKey","result","index","DISPLAY_BY_UNIT","index_timestamp_ms","value","getCityDistributeInRange","cityDistributeTotal","cityDistributeId","recordCreateAt","isEmpty","cityDistributeItem","getCityDistributionRecord","mergeDistributionData","cityDataItem","cityDataTotal","key","replaceInto","cityDistribute","updateAt","oldRecordList","id","createTimeInDb","cityDistributeIdInDb","data","sum_indicator_value","update_time","isSuccess","isUpdateSuccess","updateCityDistributionRecord","JSON","stringify","affectRows","update","insertCityDistributionRecord","insertResult","insert","into","insertId"],"mappings":"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","sourcesContent":["import moment from 'moment'\nimport _ from 'lodash'\nimport Knex from '~/src/library/mysql'\nimport DATE_FORMAT from '~/src/constants/date_format'\nimport DatabaseUtil from '~/src/library/utils/modules/database'\nimport Logger from '~/src/library/logger'\n\nimport MCityDistribution from '~/src/model/parse/city_distribution'\n\nconst BASE_TABLE_NAME = 't_r_performance'\n\nconst INDICATOR_TYPE_DNS查询耗时 = 'dns_lookup_ms'\nconst INDICATOR_TYPE_TCP链接耗时 = 'tcp_connect_ms'\nconst INDICATOR_TYPE_请求响应耗时 = 'response_request_ms'\nconst INDICATOR_TYPE_内容传输耗时 = 'response_transfer_ms'\nconst INDICATOR_TYPE_DOM解析耗时 = 'dom_parse_ms'\nconst INDICATOR_TYPE_资源加载耗时 = 'load_resource_ms'\nconst INDICATOR_TYPE_SSL连接耗时 = 'ssl_connect_ms'\n\nconst INDICATOR_TYPE_首次渲染耗时 = 'first_render_ms'\nconst INDICATOR_TYPE_首包时间耗时 = 'first_tcp_ms'\nconst INDICATOR_TYPE_首次可交互耗时 = 'first_response_ms'\nconst INDICATOR_TYPE_DOM_READY_耗时 = 'dom_ready_ms'\nconst INDICATOR_TYPE_页面完全加载耗时 = 'load_complete_ms'\n\n// 只能通过中括号形式设置key值\nconst INDICATOR_TYPE_MAP = {}\nINDICATOR_TYPE_MAP[INDICATOR_TYPE_DNS查询耗时] = 'DNS查询耗时'\nINDICATOR_TYPE_MAP[INDICATOR_TYPE_TCP链接耗时] = 'TCP链接耗时'\nINDICATOR_TYPE_MAP[INDICATOR_TYPE_请求响应耗时] = '请求响应耗时'\nINDICATOR_TYPE_MAP[INDICATOR_TYPE_内容传输耗时] = '内容传输耗时'\nINDICATOR_TYPE_MAP[INDICATOR_TYPE_DOM解析耗时] = 'DOM解析耗时'\nINDICATOR_TYPE_MAP[INDICATOR_TYPE_资源加载耗时] = '资源加载耗时'\nINDICATOR_TYPE_MAP[INDICATOR_TYPE_SSL连接耗时] = 'SSL连接耗时'\n\nINDICATOR_TYPE_MAP[INDICATOR_TYPE_首包时间耗时] = '首包时间耗时'\nINDICATOR_TYPE_MAP[INDICATOR_TYPE_首次渲染耗时] = '首次渲染耗时'\nINDICATOR_TYPE_MAP[INDICATOR_TYPE_首次可交互耗时] = '首次可交互耗时'\nINDICATOR_TYPE_MAP[INDICATOR_TYPE_DOM_READY_耗时] = 'DOM_READY_耗时'\nINDICATOR_TYPE_MAP[INDICATOR_TYPE_页面完全加载耗时] = '页面完全加载耗时'\n\n// 指标列表\nconst INDICATOR_TYPE_LIST = Object.keys(INDICATOR_TYPE_MAP)\n\nconst TABLE_COLUMN = [\n  `id`,\n  `sum_indicator_value`,\n  `pv`,\n  `indicator`,\n  `url`,\n  `city_distribute_id`,\n  `count_at_time`,\n  `count_type`,\n  `create_time`,\n  `update_time`\n]\n\n/**\n * 获取表名\n * @param {*} projectId\n * @param {number} createAt\n */\nfunction getTableName (projectId, createAt) {\n  let createAtMoment = moment.unix(createAt)\n  let monthStr = createAtMoment.clone().format('YYYYMM')\n  return `${BASE_TABLE_NAME}_${projectId}_${monthStr}`\n}\n\n/**\n * 获取性能指标记录\n * @param {*} projectId\n * @param {*} url\n * @param {*} indicator\n * @param {*} countAt\n * @param {*} countType\n */\nasync function get (projectId, url, indicator, countAt, countType = DATE_FORMAT.UNIT.MINUTE) {\n  let tableName = getTableName(projectId, countAt)\n  let dateFormat = DATE_FORMAT.DATABASE_BY_UNIT[countType]\n\n  let countAtTime = moment.unix(countAt).format(dateFormat)\n  let rawRecord = await Knex\n    .select(TABLE_COLUMN)\n    .from(tableName)\n    .where({\n      url: url,\n      indicator: indicator,\n      count_at_time: countAtTime,\n      count_type: countType\n    })\n    .catch((e) => {\n      Logger.warn('查询失败, 错误原因 =>', e)\n      return []\n    })\n  let record = _.get(rawRecord, [0], {})\n  return record\n}\n\n/**\n * 获取记录列表\n * @param {*} projectId\n * @param {*} startAt\n * @param {*} finishAt\n * @param {*} condition\n * @param {*} countAt\n * @param {*} countType\n */\nasync function getList (projectId, startAt, finishAt, condition = {}, countType = DATE_FORMAT.UNIT.MINUTE) {\n  let startAtMoment = moment.unix(startAt)\n  let recordList = []\n  let tableNameList = DatabaseUtil.getTableNameListInRange(projectId, startAt, finishAt, getTableName)\n  Logger.log('parse\\performance.js tableNameList',tableNameList);\n  let countAtTimeList = []\n  // 获取所有可能的countAtTime\n  for (let countStartAtMoment = startAtMoment.clone(); countStartAtMoment.unix() < finishAt; countStartAtMoment = countStartAtMoment.clone().add(1, countType)) {\n    let formatCountAtTime = countStartAtMoment.format(DATE_FORMAT.DATABASE_BY_UNIT[countType])\n    countAtTimeList.push(formatCountAtTime)\n  }\n  Logger.log('parse\\performance.js countAtTimeList',countAtTimeList);\n  for (let tableName of tableNameList) {\n    let rawRecordList = await Knex\n      .select(TABLE_COLUMN)\n      .from(tableName)\n      .where('count_type', '=', countType)\n      .whereIn('count_at_time', countAtTimeList)\n      .andWhere(builder => {\n        // url和indicator需要实时判断是否有该条件\n        if (_.has(condition, ['urlList'])) {\n          builder.whereIn('url', condition['urlList'])\n        }\n        if (_.has(condition, ['indicatorList'])) {\n          builder.whereIn('indicator', condition['indicatorList'])\n        }\n      })\n      .catch((e) => {\n        Logger.warn('查询失败, 错误原因 =>', e)\n        return []\n      })\n    recordList = recordList.concat(rawRecordList)\n  }\n  return recordList\n}\n\n/**\n * 获取一段时间内的所有url列表, 方便进行汇总计算\n * @param {*} projectId\n * @param {*} indicatorList\n * @param {*} startAt\n * @param {*} endAt\n * @param {*} countType\n */\nasync function getDistinctUrlListInRange (projectId, indicatorList, startAt, endAt, countType = DATE_FORMAT.UNIT.MINUTE) {\n  let startAtMoment = moment.unix(startAt).startOf(countType)\n  let urlList = []\n  let tableNameList = DatabaseUtil.getTableNameListInRange(projectId, startAt, endAt, getTableName)\n\n  let countAtTimeList = []\n  // 获取所有可能的countAtTime\n  for (let countStartAtMoment = startAtMoment.clone(); countStartAtMoment.unix() < endAt; countStartAtMoment = countStartAtMoment.clone().add(1, countType)) {\n    let formatCountAtTime = countStartAtMoment.format(DATE_FORMAT.DATABASE_BY_UNIT[countType])\n    countAtTimeList.push(formatCountAtTime)\n  }\n  \n  \n  // 循环查询数据库\n  for (let tableName of tableNameList) {\n    console.log('tableName,countType,indicatorList,countAtTimeList',tableName,countType,indicatorList,countAtTimeList);\n    let rawRecordList = await Knex\n      .distinct(['url'])\n      .from(tableName)\n      .where({\n        count_type: countType\n      })\n      .whereIn('indicator', indicatorList)\n      .whereIn('count_at_time', countAtTimeList)\n      .catch((e) => {\n        Logger.warn('查询失败, 错误原因 =>', e)\n        return []\n      })\n    for (let rawRecord of rawRecordList) {\n      if (_.has(rawRecord, ['url'])) {\n        let url = _.get(rawRecord, ['url'])\n        urlList.push(url)\n      }\n    }\n  }\n  let distinctUrlList = _.union(urlList);\n  Logger.log('performance distinctUrlList',distinctUrlList);\n  return distinctUrlList\n}\n\nasync function getUrlOverviewInSameMonth (projectId, urlList, startAt, endAt, countType) {\n  let startAtMoment = moment.unix(startAt).startOf(countType)\n  let overview = {}\n  let tableName = getTableName(projectId, startAt)\n\n  let countAtTimeList = []\n  // 获取所有可能的countAtTime\n  for (let countStartAtMoment = startAtMoment.clone(); countStartAtMoment.unix() < endAt; countStartAtMoment = countStartAtMoment.clone().add(1, countType)) {\n    let formatCountAtTime = countStartAtMoment.format(DATE_FORMAT.DATABASE_BY_UNIT[countType])\n    countAtTimeList.push(formatCountAtTime)\n  }\n\n  console.log('tableName,countType,urlList,countAtTimeList',tableName,countType,urlList,countAtTimeList);\n  \n  // 查询数据库\n  let rawRecordList = await Knex\n    .select(['url', 'count_type', 'indicator'])\n    .sum('sum_indicator_value as total_sum_indicator_value')\n    .sum('pv as total_pv')\n    .from(tableName)\n    .where({\n      count_type: countType\n    })\n    .whereIn('url', urlList)\n    .whereIn('count_at_time', countAtTimeList)\n    .groupBy([\n      'url', 'count_type', 'indicator'\n    ])\n    .catch((e) => {\n      Logger.warn('查询失败, 错误原因 =>', e)\n      return []\n    })\n  let rawOverview = {}\n  for (let rawRecord of rawRecordList) {\n    let indicator = _.get(rawRecord, ['indicator'], '')\n    let totalSumIndicatorValue = _.get(rawRecord, ['total_sum_indicator_value'], 0)\n    let totalPv = _.get(rawRecord, ['total_pv'], 0)\n    if (_.has(rawOverview, [indicator])) {\n      let oldTotalSumIndicatorValue = _.get(rawOverview, [indicator, 'total_sum_indicator_value'], 0)\n      let oldTotalPv = _.get(rawOverview, [indicator, 'total_pv'], 0)\n      _.set(rawOverview, [indicator, 'total_sum_indicator_value'], oldTotalSumIndicatorValue + totalSumIndicatorValue)\n      _.set(rawOverview, [indicator, 'total_pv'], oldTotalPv + totalPv)\n    } else {\n      _.set(rawOverview, [indicator, 'total_sum_indicator_value'], totalSumIndicatorValue)\n      _.set(rawOverview, [indicator, 'total_pv'], totalPv)\n    }\n  }\n\n  for (let indicator of INDICATOR_TYPE_LIST) {\n    if (_.has(rawOverview, [indicator])) {\n      let sum = _.get(rawOverview, [indicator, 'total_sum_indicator_value'], 0)\n      let pv = _.get(rawOverview, [indicator, 'total_pv'], 0)\n      overview[indicator] = parseInt(DatabaseUtil.computePercent(sum, pv, false))\n    } else {\n      overview[indicator] = 0\n    }\n  }\n  console.log('overview',overview);\n  \n  return overview\n}\n\n/**\n * 生成同一月内的指标数据\n * @param {*} projectId\n * @param {*} url\n * @param {*} indicator\n * @param {*} startAt\n * @param {*} endAt\n * @param {*} countType\n */\nasync function getIndicatorLineChartDataInSameMonth (projectId, url, indicator, startAt, endAt, countType) {\n  let startAtMoment = moment.unix(startAt).startOf(countType)\n  let lineChartDataList = []\n  let lineChartDataMap = {}\n  let tableName = getTableName(projectId, startAt)\n  let unixKeyList = []\n\n  let countAtTimeList = []\n  // 获取所有可能的countAtTime\n  for (let countStartAtMoment = startAtMoment.clone(); countStartAtMoment.unix() < endAt; countStartAtMoment = countStartAtMoment.clone().add(1, countType)) {\n    let formatCountAtTime = countStartAtMoment.format(DATE_FORMAT.DATABASE_BY_UNIT[countType])\n    countAtTimeList.push(formatCountAtTime)\n    // 将来会以时间戳为key, 对数据进行排序\n    unixKeyList.push(countStartAtMoment.unix())\n  }\n  console.log('tableName,countType,url,indicator,countAtTimeList',tableName,countType,url,indicator,countAtTimeList);\n  \n  // 查询数据库\n  let rawRecordList = await Knex\n    .select(['sum_indicator_value', 'pv', 'count_at_time'])\n    .from(tableName)\n    .where({\n      count_type: countType\n    })\n    .where('url', url)\n    .where('indicator', indicator)\n    .whereIn('count_at_time', countAtTimeList)\n    .catch((e) => {\n      Logger.warn('查询失败, 错误原因 =>', e)\n      return []\n    })\n  for (let rawRecord of rawRecordList) {\n    let countAtTime = _.get(rawRecord, ['count_at_time'], 0)\n    let sumIndicatorValue = _.get(rawRecord, ['sum_indicator_value'], 0)\n    let pv = _.get(rawRecord, ['pv'], 0)\n    let recordAt = moment(countAtTime, DATE_FORMAT.DATABASE_BY_UNIT[countType]).unix()\n    lineChartDataMap[recordAt] = parseInt(DatabaseUtil.computePercent(sumIndicatorValue, pv, false))\n  }\n  for (let unixKey of unixKeyList) {\n    let result = _.get(lineChartDataMap, [unixKey], 0)\n    lineChartDataList.push({\n      indicator: indicator,\n      index: moment.unix(unixKey).format(DATE_FORMAT.DISPLAY_BY_UNIT[countType]),\n      index_timestamp_ms: unixKey * 1000,\n      value: result\n    })\n  }\n  return lineChartDataList\n}\n\n/**\n * 获取指定时间范围内的按城市分布的性能指标\n * @param {*} projectId\n * @param {*} startAt\n * @param {*} endAt\n * @param {*} countType\n * @returns {Object}\n */\nasync function getCityDistributeInRange (projectId, urlList, indicatorList, startAt, endAt, countType = DATE_FORMAT.UNIT.MINUTE) {\n  let cityDistributeTotal = {}\n  // uv记录表按月分表, 因此需要分月计算总uv\n  let rawRecordList = await getList(projectId, startAt, endAt, { urlList, indicatorList }, countType)\n  for (let rawRecord of rawRecordList) {\n    let cityDistributeId = _.get(rawRecord, ['city_distribute_id'], 0)\n    let recordCreateAt = _.get(rawRecord, ['create_time'], 0)\n    if (_.isEmpty(rawRecord) || cityDistributeId === 0) {\n      continue\n    }\n    let cityDistributeItem = await MCityDistribution.getCityDistributionRecord(cityDistributeId, projectId, recordCreateAt)\n    cityDistributeTotal = MCityDistribution.mergeDistributionData(\n      cityDistributeItem,\n      cityDistributeTotal,\n      (cityDataItem, cityDataTotal) => {\n        let result = {}\n        for (let key of Object.keys(cityDataItem)) {\n          result[key] = cityDataItem[key] + cityDataTotal[key]\n        }\n        return result\n      })\n  }\n  return cityDistributeTotal\n}\n\n/**\n * 自动创建&更新页面性能数据记录\n */\nasync function replaceInto (projectId, url, indicator, countAt, countType = DATE_FORMAT.UNIT.MINUTE, sumIndicatorValue = 0, pv = 0, cityDistribute = {}) {\n  let tableName = getTableName(projectId, countAt)\n  Logger.log('performance tableName',tableName);\n  let dateFormat = DATE_FORMAT.DATABASE_BY_UNIT[countType]\n  Logger.log('performance dateFormat',dateFormat);\n  let countAtTime = moment.unix(countAt).format(dateFormat)\n  Logger.log('performance countAtTime',countAtTime);\n  let updateAt = moment().unix()\n  Logger.log('performance updateAt',updateAt);\n  // 返回值是一个列表\n  let oldRecordList = await Knex\n    .select([`id`, `create_time`, `city_distribute_id`])\n    .from(tableName)\n    .where({\n      url: url,\n      indicator: indicator,\n      count_at_time: countAtTime,\n      count_type: countType\n    })\n    .catch((e) => {\n      Logger.warn(`${tableName} 查询失败, 错误原因 =>`, e)\n      return []\n    })\n  Logger.log(`performance ${tableName} oldRecordList`,oldRecordList);\n  // 利用get方法, 不存在直接返回0, 没毛病\n  let id = _.get(oldRecordList, [0, 'id'], 0);\n  Logger.log('performance id ',id);\n  let createTimeInDb = _.get(oldRecordList, [0, 'create_time'], 0);\n  Logger.log('performance createTimeInDb ',createTimeInDb);\n  let cityDistributeIdInDb = _.get(oldRecordList, [0, 'city_distribute_id'], 0)\n  Logger.log('performance cityDistributeIdInDb ',cityDistributeIdInDb);\n  let data = {\n    url,\n    indicator,\n    pv,\n    count_at_time: countAtTime,\n    count_type: countType,\n    sum_indicator_value: sumIndicatorValue,\n    update_time: updateAt\n  }\n  Logger.log('performance data',data);\n  let isSuccess = false\n  if (id > 0) {\n    // 更新城市分布数据\n    let isUpdateSuccess = MCityDistribution.updateCityDistributionRecord(cityDistributeIdInDb, projectId, createTimeInDb, JSON.stringify(cityDistribute))\n    if (isUpdateSuccess === false) {\n      Logger.log('城市数据更新失败')\n      return false\n    }\n    // 更新具体数据\n    let affectRows = await Knex(tableName)\n      .update(data)\n      .where(`id`, '=', id)\n    isSuccess = affectRows > 0\n  } else {\n    // 首先插入城市分布数据\n    let cityDistributeId = await MCityDistribution.insertCityDistributionRecord(JSON.stringify(cityDistribute), projectId, updateAt)\n    if (cityDistributeId === 0) {\n      // 城市分布数据插入失败\n      Logger.log('城市数据插入失败')\n      return false\n    }\n    data['city_distribute_id'] = cityDistributeId\n    data['create_time'] = updateAt\n    let insertResult = await Knex\n      //.returning('id')\n      .insert(data)\n      .into(tableName)\n      .catch((e) => {\n        Logger.warn(`${tableName} 插入失败, 原记录 =>`, data, '错误原因 =>', e)\n        return []\n      })\n    let insertId = _.get(insertResult, [0], 0)\n    isSuccess = insertId > 0\n  }\n  return isSuccess\n}\n\nexport default {\n  getTableName,\n\n  get,\n  getList,\n  replaceInto,\n  getCityDistributeInRange,\n  getDistinctUrlListInRange,\n\n  getUrlOverviewInSameMonth,\n  getIndicatorLineChartDataInSameMonth,\n\n  // 常量列表\n  // 区间段耗时\n  INDICATOR_TYPE_DNS查询耗时,\n  INDICATOR_TYPE_TCP链接耗时,\n  INDICATOR_TYPE_请求响应耗时,\n  INDICATOR_TYPE_DOM解析耗时,\n  INDICATOR_TYPE_内容传输耗时,\n  INDICATOR_TYPE_资源加载耗时,\n  INDICATOR_TYPE_SSL连接耗时,\n\n  // 关键性能指标\n  INDICATOR_TYPE_首包时间耗时,\n  INDICATOR_TYPE_首次渲染耗时,\n  INDICATOR_TYPE_首次可交互耗时,\n  INDICATOR_TYPE_DOM_READY_耗时,\n  INDICATOR_TYPE_页面完全加载耗时,\n\n  INDICATOR_TYPE_MAP,\n  INDICATOR_TYPE_LIST\n}\n"],"file":"performance.js"}