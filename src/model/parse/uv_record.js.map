{"version":3,"sources":["uv_record.js"],"names":["Knex","moment","_","DATE_FORMAT","TableNameDateFormat","VisitAtHourDateFormat","DATABASE_BY_HOUR","BASE_TABLE_NAME","TABLE_COLUMN","getTableName","projectId","createTimeAt","dateYm","unix","format","replaceUvRecord","uuid","visitAt","country","province","city","pvCount","visitAtHour","tableName","updateAt","oldRecordList","select","from","where","andWhere","catch","id","get","data","visit_at_hour","pv_count","update_time","isSuccess","affectRows","update","insertResult","returning","insert","into","e","insertId","getExistUuidSetInHour","rawRecordList","uuidSet","Set","rawRecord","add","getCityDistributeInRange","startAt","finishAt","startAtMoment","finishAtMoment","cityDistribute","currentAtMoment","isBefore","clone","countDistinct","groupBy","uvCount","locationPath","has","set"],"mappings":"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","sourcesContent":["import Knex from '~/src/library/mysql'\nimport moment from 'moment'\nimport _ from 'lodash'\nimport DATE_FORMAT from '~/src/constants/date_format'\n\nconst TableNameDateFormat = 'YYYYMM'\nconst VisitAtHourDateFormat = DATE_FORMAT.DATABASE_BY_HOUR\nconst BASE_TABLE_NAME = 't_o_uv_record'\nconst TABLE_COLUMN = [\n  `id`,\n  `uuid`,\n  `country`,\n  `province`,\n  `city`,\n  `visit_at_hour`,\n  `pv_count`,\n  `create_time`,\n  `update_time`\n]\n\n/**\n * 获取表名\n * @param {number} projectId 项目id\n * @param {number} createTimeAt 创建时间, 时间戳\n * @return {String}\n */\nfunction getTableName (projectId, createTimeAt) {\n  let dateYm = moment.unix(createTimeAt).format(TableNameDateFormat)\n  return `${BASE_TABLE_NAME}_${projectId}_${dateYm}`\n}\n\n/**\n * 自动创建&更新uv记录(不更新pv, pv无意义)\n * @param {number} projectId\n * @param {string} uuid\n * @param {number} visitAt\n * @param {string} country\n * @param {string} province\n * @param {string} city\n * @return {boolean}\n */\nasync function replaceUvRecord (projectId, uuid, visitAt, country, province, city) {\n  // pv数无意义, 不再计算\n  let pvCount = 0\n  let visitAtHour = moment.unix(visitAt).format(VisitAtHourDateFormat)\n  let tableName = getTableName(projectId, visitAt)\n  let updateAt = moment().unix()\n  // 返回值是一个列表\n  let oldRecordList = await Knex\n    .select([`id`])\n    .from(tableName)\n    .where('uuid', '=', uuid)\n    .andWhere('visit_at_hour', '=', visitAtHour)\n    .catch(() => {\n      return []\n    })\n  // 利用get方法, 不存在直接返回0, 没毛病\n  let id = _.get(oldRecordList, [0, 'id'], 0)\n  let data = {\n    uuid,\n    visit_at_hour: visitAtHour,\n    pv_count: pvCount,\n    country,\n    province,\n    city,\n    update_time: updateAt\n  }\n  let isSuccess = false\n  if (id > 0) {\n    let affectRows = await Knex(tableName)\n      .update(data)\n      .where(`id`, '=', id)\n    isSuccess = affectRows > 0\n  } else {\n    data['create_time'] = updateAt\n    let insertResult = await Knex\n      .returning('id')\n      .insert(data)\n      .into(tableName)\n      .catch(e => {\n        return []\n      })\n    let insertId = _.get(insertResult, [0], 0)\n    isSuccess = insertId > 0\n  }\n  return isSuccess\n}\n\n/**\n * 获取指定小时内的uuid列表\n * @param {*} projectId\n * @param {*} uuid\n * @param {*} visitAt\n * @return {Object}\n */\nasync function getExistUuidSetInHour (projectId, visitAt) {\n  let visitAtHour = moment.unix(visitAt).format(VisitAtHourDateFormat)\n  let tableName = getTableName(projectId, visitAt)\n  let rawRecordList = await Knex\n    .select('uuid')\n    .from(tableName)\n    .where('visit_at_hour', '=', visitAtHour)\n    .catch(e => {\n      return []\n    })\n  let uuidSet = new Set()\n  for (let rawRecord of rawRecordList) {\n    let uuid = _.get(rawRecord, ['uuid'], '')\n    uuidSet.add(uuid)\n  }\n  return uuidSet\n}\n\n/**\n * 获取一段时间范围内的按城市分布uv数\n * @param {*} projectId\n * @param {*} startAt\n * @param {*} finishAt\n * @returns {Array}\n */\nasync function getCityDistributeInRange (projectId, startAt, finishAt) {\n  let startAtMoment = moment.unix(startAt)\n  let finishAtMoment = moment.unix(finishAt)\n  let cityDistribute = {}\n  // uv记录表按月分表, 因此需要分月计算总uv\n  for (let currentAtMoment = startAtMoment; currentAtMoment.isBefore(finishAtMoment); currentAtMoment = currentAtMoment.clone().add(1, 'months')) {\n    let tableName = getTableName(projectId, startAt)\n    let rawRecordList = await Knex\n      .countDistinct('uuid as uv_count')\n      .select([`country`, `province`, `city`])\n      .from(tableName)\n      .where('create_time', '>', startAt)\n      .andWhere('create_time', '<', finishAt)\n      .groupBy([`country`, `province`, `city`])\n      .catch(() => { return [] })\n\n    for (let rawRecord of rawRecordList) {\n      let country = _.get(rawRecord, ['country'], '')\n      let province = _.get(rawRecord, ['province'], '')\n      let city = _.get(rawRecord, ['city'], '')\n      let uvCount = _.get(rawRecord, ['uv_count'], '')\n\n      let locationPath = [country, province, city]\n      if (_.has(cityDistribute, locationPath)) {\n        uvCount = uvCount + _.get(cityDistribute, locationPath, 0)\n      }\n      _.set(cityDistribute, locationPath, uvCount)\n    }\n  }\n  return cityDistribute\n}\n\nexport default {\n  replaceUvRecord,\n  getExistUuidSetInHour,\n  getCityDistributeInRange,\n  getTableName\n}\n"],"file":"uv_record.js"}