{"version":3,"sources":["new_user_summary.js"],"names":["Knex","moment","_","MCityDistribution","Logger","BASE_TABLE_NAME","TABLE_COLUMN","getTableName","replaceInto","projectId","totalCount","countAtTime","countType","cityDistribute","tableName","updateAt","unix","oldRecordList","select","from","where","andWhere","catch","id","get","cityDistributeIdInDb","createTimeInDb","data","project_id","count_at_time","total_count","count_type","update_time","isSuccess","isUpdateSuccess","updateCityDistributionRecord","JSON","stringify","affectRows","update","cityDistributeId","insertCityDistributionRecord","insertResult","returning","insert","into","e","insertId","getNewUserDistribution","timeList","rawRecordList","whereIn","err","error","message"],"mappings":"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","sourcesContent":["import Knex from '~/src/library/mysql'\nimport moment from 'moment'\nimport _ from 'lodash'\nimport MCityDistribution from '~/src/model/parse/city_distribution'\nimport Logger from '~/src/library/logger'\nconst BASE_TABLE_NAME = 't_r_new_user_summary'\nconst TABLE_COLUMN = [\n  `id`,\n  `project_id`,\n  `total_count`,\n  `count_at_time`,\n  `count_type`,\n  `city_distribute_id`,\n  `create_time`,\n  `update_time`\n]\n\n/**\n * 获取表名\n * @return {String}\n */\nfunction getTableName () {\n  return `${BASE_TABLE_NAME}`\n}\n\nasync function replaceInto (projectId, totalCount, countAtTime, countType, cityDistribute) {\n  let tableName = getTableName()\n  let updateAt = moment().unix()\n  // 返回值是一个列表\n  let oldRecordList = await Knex\n    .select([`city_distribute_id`, `create_time`, `id`])\n    .from(tableName)\n    .where('project_id', '=', projectId)\n    .andWhere('count_at_time', '=', countAtTime)\n    .andWhere('count_type', '=', countType)\n    .catch(() => {\n      return []\n    })\n  // 利用get方法, 不存在直接返回0, 没毛病\n  let id = _.get(oldRecordList, [0, 'id'], 0)\n  let cityDistributeIdInDb = _.get(oldRecordList, [0, 'city_distribute_id'], 0)\n  let createTimeInDb = _.get(oldRecordList, [0, 'create_time'], 0)\n\n  let data = {\n    project_id: projectId,\n    count_at_time: countAtTime,\n    total_count: totalCount,\n    count_type: countType,\n    update_time: updateAt\n  }\n  let isSuccess = false\n  if (id > 0) {\n    // 更新城市分布数据\n    let isUpdateSuccess = MCityDistribution.updateCityDistributionRecord(cityDistributeIdInDb, projectId, createTimeInDb, JSON.stringify(cityDistribute))\n    if (isUpdateSuccess === false) {\n      return false\n    }\n    // 更新具体数据\n    let affectRows = await Knex(tableName)\n      .update(data)\n      .where(`id`, '=', id)\n    isSuccess = affectRows > 0\n  } else {\n    // 首先插入城市分布数据\n    let cityDistributeId = await MCityDistribution.insertCityDistributionRecord(JSON.stringify(cityDistribute), projectId, updateAt)\n    if (cityDistributeId === 0) {\n      // 城市分布数据插入失败\n      return false\n    }\n    data['city_distribute_id'] = cityDistributeId\n    data['create_time'] = updateAt\n    let insertResult = await Knex\n      .returning('id')\n      .insert(data)\n      .into(tableName)\n      .catch(e => { return [] })\n    let insertId = _.get(insertResult, [0], 0)\n    isSuccess = insertId > 0\n  }\n  return isSuccess\n}\n\nasync function getNewUserDistribution (projectId, countType, timeList) {\n  const tableName = getTableName()\n  let rawRecordList = Knex\n    .select(TABLE_COLUMN)\n    .from(tableName)\n    .where('project_id', projectId)\n    .andWhere('count_type', countType)\n    .whereIn('count_at_time', timeList)\n    .catch(err => {\n      Logger.error(err.message, '======getNewUserDistribution')\n      return []\n    })\n  return rawRecordList\n}\nexport default {\n  getTableName,\n  replaceInto,\n  getNewUserDistribution\n}\n"],"file":"new_user_summary.js"}