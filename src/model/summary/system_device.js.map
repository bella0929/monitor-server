{"version":3,"sources":["system_device.js"],"names":["Knex","moment","_","MProject","MSystem","Logger","MCityDistribution","DATE_FORMAT","BASE_TABLE_NAME","TABLE_COLUMN","getTableName","summarySystemDevice","visitAt","visitAtMonth","unix","format","DATABASE_BY_MONTH","projectList","getList","rawProject","projectId","get","projectName","systemTableName","info","sumRes","count","select","from","where","groupBy","catch","err","error","length","deviceVersionRecord","countItem","device_model","deviceModel","device_vendor","deviceVendor","country","province","city","total_count","totalCount","visit_at_month","countAtMonth","distribution","distributionPath","set","deviceVersionKey","has","oldCount","newCount","oldDistribution","cityDistribute","mergeDistributionData","newCityRecord","oldCityRecord","console","log","item","Object","keys","recordInfo","replaceAndAutoIncreaseDeviceRecord","tableName","updateAt","oldRecordList","andWhere","id","cityDistributeIdInDb","createTimeInDb","data","project_id","count_at_month","update_time","isSuccess","isUpdateSuccess","updateCityDistributionRecord","JSON","stringify","affectRows","update","cityDistributeId","insertCityDistributionRecord","insertResult","returning","insert","into","e","insertId","getRecord","recordList"],"mappings":"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","sourcesContent":["import Knex from '~/src/library/mysql'\nimport moment from 'moment'\nimport _ from 'lodash'\nimport MProject from '~/src/model/project/project'\nimport MSystem from '~/src/model/parse/system'\nimport Logger from '~/src/library/logger'\nimport MCityDistribution from '~/src/model/parse/city_distribution'\nimport DATE_FORMAT from '~/src/constants/date_format'\n\nconst BASE_TABLE_NAME = 't_r_system_device'\nconst TABLE_COLUMN = [\n  `id`,\n  `project_id`,\n  `device_vendor`,\n  `device_model`,\n  `total_count`,\n  `count_at_month`,\n  `city_distribute_id`,\n  `create_time`,\n  `update_time`\n]\n\n/**\n * 获取表名\n * @param {number} projectId 项目id\n * @param {number} createTimeAt 创建时间, 时间戳\n * @return {String}\n */\nfunction getTableName () {\n  return BASE_TABLE_NAME\n}\n\nasync function summarySystemDevice (visitAt) {\n  let visitAtMonth = moment.unix(visitAt).format(DATE_FORMAT.DATABASE_BY_MONTH)\n  const projectList = await MProject.getList()\n  for (let rawProject of projectList) {\n    const projectId = _.get(rawProject, 'id', '')\n    const projectName = _.get(rawProject, 'project_name', '')\n    const systemTableName = MSystem.getTableName(projectId)\n    Logger.info(`开始处理项目${projectId}(${projectName})的数据`)\n    Logger.info(`[${projectId}(${projectName})] 统计月份:${visitAtMonth}`)\n    const sumRes = await Knex\n      .count('* as total_count')\n      .select([`device_vendor`, `device_model`, `visit_at_month`, `country`, `province`, `city`])\n      .from(systemTableName)\n      .where('visit_at_month', '=', visitAtMonth)\n      .groupBy('device_vendor')\n      .groupBy('device_model')\n      .groupBy('country')\n      .groupBy('province')\n      .groupBy('city')\n      .catch((err) => {\n        Logger.error(err)\n        return [];\n      })\n    Logger.info(`sumRes`,sumRes)  \n    if (sumRes.length === 0) {\n      continue\n    }\n    \n    let deviceVersionRecord = {}\n    for (let countItem of sumRes) {\n      const { device_model: deviceModel, device_vendor: deviceVendor, country, province, city, total_count: totalCount, visit_at_month: countAtMonth } = countItem\n      let distribution = {}\n      let distributionPath = [country, province, city]\n      _.set(distribution, distributionPath, totalCount)\n      let deviceVersionKey = deviceModel + deviceVendor\n      if (_.has(deviceVersionRecord, deviceVersionKey)) {\n        // 若是已经有，更新count/distribution\n        let oldCount = _.get(deviceVersionRecord, [deviceVersionKey, 'totalCount'], 0)\n        let newCount = oldCount + totalCount\n        let oldDistribution = _.get(deviceVersionRecord, [deviceVersionKey, 'distribution'], {})\n        let cityDistribute = MCityDistribution.mergeDistributionData(distribution, oldDistribution, (newCityRecord, oldCityRecord) => { return newCityRecord + oldCityRecord })\n        _.set(deviceVersionRecord, [deviceVersionKey, 'totalCount'], newCount)\n        _.set(deviceVersionRecord, [deviceVersionKey, 'distribution'], cityDistribute)\n      } else {\n        _.set(deviceVersionRecord, [deviceVersionKey], {\n          totalCount: totalCount,\n          deviceVendor: deviceVendor,\n          deviceModel: deviceModel,\n          countAtMonth: countAtMonth,\n          distribution: distribution\n        })\n      }\n    }\n\n    let totalCount = 0\n    console.log('deviceVersionRecord',deviceVersionRecord);\n    for (let item of Object.keys(deviceVersionRecord)) {\n      if (item) {\n        totalCount = totalCount + 1\n      }\n      let recordInfo = deviceVersionRecord[item]\n      await replaceAndAutoIncreaseDeviceRecord(projectId, recordInfo, recordInfo['distribution'])\n    }\n    Logger.info(`项目${projectId}(${projectName})处理完毕, 共处理${totalCount}条数据`)\n  }\n}\n\n/**\n * 自动创建&更新, 并增加total_count的值\n * @param {number} projectId\n * @param {number} totalCount\n * @param {number} countAtMonth\n * @param {string} countType\n * @param {object} cityDistribute\n * @return {boolean}\n */\nasync function replaceAndAutoIncreaseDeviceRecord (projectId, recordInfo, cityDistribute) {\n  const { totalCount, deviceVendor, deviceModel, countAtMonth } = recordInfo\n  if (!deviceVendor || !deviceModel || !countAtMonth) {\n    return false\n  }\n  let tableName = getTableName()\n  let updateAt = moment().unix()\n  // 返回值是一个列表\n  let oldRecordList = await Knex\n    .select([`total_count`, `city_distribute_id`, `create_time`, `id`])\n    .from(tableName)\n    .where('project_id', '=', projectId)\n    .andWhere('count_at_month', '=', countAtMonth)\n    .andWhere('device_vendor', '=', deviceVendor)\n    .andWhere('device_model', '=', deviceModel)\n    .catch(() => {\n      return []\n    })\n  // 利用get方法, 不存在直接返回0, 没毛病\n  let id = _.get(oldRecordList, [0, 'id'], 0)\n  let cityDistributeIdInDb = _.get(oldRecordList, [0, 'city_distribute_id'], 0)\n  let createTimeInDb = _.get(oldRecordList, [0, 'create_time'], 0)\n\n  let data = {\n    project_id: projectId,\n    count_at_month: countAtMonth,\n    total_count: totalCount,\n    update_time: updateAt\n  }\n  let isSuccess = false\n  if (id > 0) {\n    // 更新城市分布数据\n    let isUpdateSuccess = MCityDistribution.updateCityDistributionRecord(cityDistributeIdInDb, projectId, createTimeInDb, JSON.stringify(cityDistribute))\n    if (isUpdateSuccess === false) {\n      return false\n    }\n    // 更新具体数据\n    let affectRows = await Knex(tableName)\n      .update(data)\n      .where(`id`, '=', id)\n    isSuccess = affectRows > 0\n  } else {\n    // 首先插入城市分布数据\n    let cityDistributeId = await MCityDistribution.insertCityDistributionRecord(JSON.stringify(cityDistribute), projectId, updateAt)\n    if (cityDistributeId === 0) {\n      // 城市分布数据插入失败\n      return false\n    }\n    data['device_vendor'] = deviceVendor\n    data['device_model'] = deviceModel\n    data['city_distribute_id'] = cityDistributeId\n    data['total_count'] = totalCount\n    data['create_time'] = updateAt\n    let insertResult = await Knex\n      .returning('id')\n      .insert(data)\n      .into(tableName)\n      .catch(e => { return [] })\n    let insertId = _.get(insertResult, [0], 0)\n    isSuccess = insertId > 0\n  }\n  return isSuccess\n}\n\n/**\n * 获取记录\n */\nasync function getRecord (projectId, countAtMonth) {\n  let tableName = getTableName()\n  let recordList = await Knex\n    .select(TABLE_COLUMN)\n    .from(tableName)\n    .where('project_id', '=', projectId)\n    .andWhere('count_at_month', '=', countAtMonth)\n    .catch(() => {\n      return []\n    })\n  return _.get(recordList, [0], {})\n}\n\nexport default {\n  getRecord,\n  summarySystemDevice\n}\n"],"file":"system_device.js"}