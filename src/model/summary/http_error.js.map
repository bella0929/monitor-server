{"version":3,"sources":["http_error.js"],"names":["Knex","moment","_","Logger","MProject","MMonitor","MCityDistribution","DATE_FORMAT","BASE_TABLE_NAME","TABLE_COLUMN","getTableName","summaryHttpError","visitAt","countType","startTimestamp","endTimestamp","visitAtTime","unix","format","DISPLAY_BY_MINUTE","countAtTime","DATABASE_BY_UNIT","projectList","getList","rawProject","projectId","get","projectName","systemTableName","info","sumRes","count","select","from","where","andWhere","groupBy","catch","err","error","length","distribution","totalCount","recodeInfo","countItem","country","province","city","total_count","distributionPath","errorTypeName","getHttpCodeType","has","set","replaceAndAutoIncreaseHttpErrorRecord","httpCode","codeType","isNumber","type","floor","recordInfo","cityDistribute","http_code_2xx_count","httpCode2xx","http_code_3xx_count","httpCode3xx","http_code_4xx_count","httpCode4xx","http_code_5xx_count","httpCode5xx","http_code_other_count","httpCodeOther","tableName","updateAt","oldRecordList","id","cityDistributeIdInDb","createTimeInDb","data","project_id","count_at_time","count_type","update_time","isSuccess","isUpdateSuccess","updateCityDistributionRecord","JSON","stringify","affectRows","update","cityDistributeId","insertCityDistributionRecord","insertResult","returning","insert","into","e","insertId","getRecord","countAtMonth","recordList"],"mappings":"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","sourcesContent":["import Knex from '~/src/library/mysql'\nimport moment from 'moment'\nimport _ from 'lodash'\nimport Logger from '~/src/library/logger'\nimport MProject from '~/src/model/project/project'\nimport MMonitor from '~/src/model/parse/monitor'\nimport MCityDistribution from '~/src/model/parse/city_distribution'\nimport DATE_FORMAT from '~/src/constants/date_format'\n\nconst BASE_TABLE_NAME = 't_r_http_error_distribution'\nconst TABLE_COLUMN = [\n  `id`,\n  `project_id`,\n  `total_count`,\n  `http_code_2xx_count`,\n  `http_code_3xx_count`,\n  `http_code_4xx_count`,\n  `http_code_5xx_count`,\n  `http_code_other_count`,\n  `city_distribute_id`,\n  `count_type`,\n  `count_at_time`,\n  `create_time`,\n  `update_time`\n]\n\n/**\n * 获取表名\n * @param {number} projectId 项目id\n * @param {number} createTimeAt 创建时间, 时间戳\n * @return {String}\n */\nfunction getTableName () {\n  return BASE_TABLE_NAME\n}\n\nasync function summaryHttpError (visitAt, countType, startTimestamp, endTimestamp) {\n  const visitAtTime = moment.unix(visitAt).format(DATE_FORMAT.DISPLAY_BY_MINUTE)\n  const countAtTime = moment.unix(visitAt).format(DATE_FORMAT.DATABASE_BY_UNIT[countType])\n  const projectList = await MProject.getList()\n  for (let rawProject of projectList) {\n    const projectId = _.get(rawProject, 'id', '')\n    const projectName = _.get(rawProject, 'project_name', '')\n    const systemTableName = MMonitor.getTableName(projectId, visitAt)\n    Logger.info(`开始处理项目${projectId}(${projectName})的数据`)\n    Logger.info(`[${projectId}(${projectName})] 统计时间:${visitAtTime}`)\n    const sumRes = await Knex.count('* as total_count').select([`http_code`, `country`, `province`, `city`])\n      .from(systemTableName)\n      .where('http_code', '>', 0)\n      .andWhere('log_at', '>', startTimestamp)\n      .andWhere('log_at', '<', endTimestamp)\n      .groupBy('http_code')\n      .groupBy('country')\n      .groupBy('province')\n      .groupBy('city')\n      .catch((err) => {\n        Logger.error(err)\n        return []\n      })\n    if (sumRes.length === 0) {\n      return\n    }\n\n    let distribution = {}\n    let totalCount = 0\n    let recodeInfo = {}\n    for (let countItem of sumRes) {\n      const { country, province, city, total_count: count } = countItem\n      let distributionPath = [country, province, city]\n      let errorTypeName = getHttpCodeType(countItem['http_code'])\n      if (_.has(recodeInfo, errorTypeName)) {\n        recodeInfo[errorTypeName] += count\n      } else {\n        recodeInfo[errorTypeName] = 1\n      }\n      countItem['http_code_type'] = errorTypeName\n      totalCount = totalCount + count\n      _.set(distribution, distributionPath, count)\n    }\n    recodeInfo.totalCount = totalCount\n    await replaceAndAutoIncreaseHttpErrorRecord(projectId, countType, countAtTime, recodeInfo, distribution)\n    Logger.info(`项目${projectId}(${projectName})处理完毕`)\n  }\n}\n\nfunction getHttpCodeType (httpCode) {\n  let codeType\n  if (_.isNumber(httpCode) && httpCode > 99 && httpCode < 1000) {\n    const type = _.floor(httpCode / 100)\n    switch (type) {\n      case 2:\n        codeType = 'http_code_2xx_count'\n        break\n      case 3:\n        codeType = 'http_code_3xx_count'\n        break\n      case 4:\n        codeType = 'http_code_4xx_count'\n        break\n      case 5:\n        codeType = 'http_code_5xx_count'\n        break\n      default:\n        codeType = 'http_code_other_count'\n    }\n  }\n  return codeType\n}\n\n/**\n * 自动创建&更新, 并增加total_count的值\n * @param {number} projectId\n * @param {number} totalCount\n * @param {number} countAtMonth\n * @param {string} countType\n * @param {object} cityDistribute\n * @return {boolean}\n */\nasync function replaceAndAutoIncreaseHttpErrorRecord (projectId, countType, countAtTime, recordInfo, cityDistribute) {\n  const {\n    totalCount,\n    http_code_2xx_count: httpCode2xx,\n    http_code_3xx_count: httpCode3xx,\n    http_code_4xx_count: httpCode4xx,\n    http_code_5xx_count: httpCode5xx,\n    http_code_other_count: httpCodeOther\n  } = recordInfo\n\n  if (!httpCode2xx && !httpCode3xx && !httpCode4xx && !httpCode5xx && !httpCodeOther) {\n    return false\n  }\n  let tableName = getTableName()\n  let updateAt = moment().unix()\n  // 返回值是一个列表\n  let oldRecordList = await Knex\n    .select([`total_count`, `city_distribute_id`, `create_time`, `id`])\n    .from(tableName)\n    .where('project_id', '=', projectId)\n    .andWhere('count_at_time', '=', countAtTime)\n    .catch((err) => {\n      Logger.error(err)\n      return []\n    })\n  // 利用get方法, 不存在直接返回0, 没毛病\n  let id = _.get(oldRecordList, [0, 'id'], 0)\n  let cityDistributeIdInDb = _.get(oldRecordList, [0, 'city_distribute_id'], 0)\n  let createTimeInDb = _.get(oldRecordList, [0, 'create_time'], 0)\n  // let cityDistributeJsonInDb = '{}'\n  // if (cityDistributeIdInDb > 0) {\n  //   cityDistributeJsonInDb = await getCityDistributionRecord(cityDistributeIdInDb, projectId, createTimeInDb)\n  // }\n  // let cityDistributeInDb = JSON.parse(cityDistributeJsonInDb)\n\n  let data = {\n    project_id: projectId,\n    http_code_2xx_count: httpCode2xx,\n    http_code_3xx_count: httpCode3xx,\n    http_code_4xx_count: httpCode4xx,\n    http_code_5xx_count: httpCode5xx,\n    http_code_other_count: httpCodeOther,\n    count_at_time: countAtTime,\n    total_count: totalCount,\n    count_type: countType,\n    update_time: updateAt\n  }\n  let isSuccess = false\n  if (id > 0) {\n    // 更新城市分布数据\n    // cityDistribute = mergeDistributionData(cityDistributeInDb, cityDistribute, (newCityRecord, oldCityRecord) => { return newCityRecord + oldCityRecord })\n    let isUpdateSuccess = MCityDistribution.updateCityDistributionRecord(cityDistributeIdInDb, projectId, createTimeInDb, JSON.stringify(cityDistribute))\n    if (isUpdateSuccess === false) {\n      return false\n    }\n    // 更新具体数据\n    let affectRows = await Knex(tableName)\n      .update(data)\n      .where(`id`, '=', id)\n    isSuccess = affectRows > 0\n  } else {\n    // 首先插入城市分布数据\n    let cityDistributeId = await MCityDistribution.insertCityDistributionRecord(JSON.stringify(cityDistribute), projectId, updateAt)\n    if (cityDistributeId === 0) {\n      // 城市分布数据插入失败\n      return false\n    }\n    data['city_distribute_id'] = cityDistributeId\n    data['create_time'] = updateAt\n    let insertResult = await Knex\n      .returning('id')\n      .insert(data)\n      .into(tableName)\n      .catch(e => { return [] })\n    let insertId = _.get(insertResult, [0], 0)\n    isSuccess = insertId > 0\n  }\n  return isSuccess\n}\n\n/**\n * 获取记录\n */\nasync function getRecord (projectId, countAtMonth) {\n  let tableName = getTableName()\n  let recordList = await Knex\n    .select(TABLE_COLUMN)\n    .from(tableName)\n    .where('project_id', '=', projectId)\n    .andWhere('count_at_time', '=', countAtMonth)\n    .catch((err) => {\n      Logger.error(err)\n      return []\n    })\n  return _.get(recordList, [0], {})\n}\n\nexport default {\n  getRecord,\n  getHttpCodeType,\n  summaryHttpError\n}\n"],"file":"http_error.js"}