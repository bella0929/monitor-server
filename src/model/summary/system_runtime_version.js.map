{"version":3,"sources":["system_runtime_version.js"],"names":["Knex","moment","_","MProject","MSystem","Logger","MCityDistribution","DATE_FORMAT","BASE_TABLE_NAME","TABLE_COLUMN","getTableName","sumarySystemRuntimeVersion","visitAt","visitAtMonth","unix","format","DATABASE_BY_MONTH","projectList","getList","rawProject","projectId","get","projectName","systemTableName","info","sumRes","count","select","from","where","groupBy","catch","err","error","length","runtimeVersionRecord","countItem","runtime_version","runtimeVersion","country","province","city","total_count","totalCount","visit_at_month","countAtMonth","distribution","distributionPath","set","has","oldCount","newCount","oldDistribution","cityDistribute","mergeDistributionData","newCityRecord","oldCityRecord","item","Object","keys","recordInfo","replaceAndAutoIncreaseRuntimeVersionRecord","tableName","updateAt","oldRecordList","andWhere","id","cityDistributeIdInDb","createTimeInDb","data","project_id","count_at_month","update_time","isSuccess","isUpdateSuccess","updateCityDistributionRecord","JSON","stringify","affectRows","update","cityDistributeId","insertCityDistributionRecord","insertResult","returning","insert","into","e","insertId","getRecord","recordList"],"mappings":"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","sourcesContent":["import Knex from '~/src/library/mysql'\nimport moment from 'moment'\nimport _ from 'lodash'\nimport MProject from '~/src/model/project/project'\nimport MSystem from '~/src/model/parse/system'\nimport Logger from '~/src/library/logger'\nimport MCityDistribution from '~/src/model/parse/city_distribution'\nimport DATE_FORMAT from '~/src/constants/date_format'\n\nconst BASE_TABLE_NAME = 't_r_system_runtime_version'\nconst TABLE_COLUMN = [\n  `id`,\n  `project_id`,\n  `runtime_version`,\n  `total_count`,\n  `count_at_month`,\n  `create_time`,\n  `update_time`\n]\n\n/**\n * 获取表名\n * @param {number} projectId 项目id\n * @param {number} createTimeAt 创建时间, 时间戳\n * @return {String}\n */\nfunction getTableName () {\n  return BASE_TABLE_NAME\n}\n\nasync function sumarySystemRuntimeVersion (visitAt) {\n  let visitAtMonth = moment.unix(visitAt).format(DATE_FORMAT.DATABASE_BY_MONTH)\n  const projectList = await MProject.getList()\n  for (let rawProject of projectList) {\n    const projectId = _.get(rawProject, 'id', '')\n    const projectName = _.get(rawProject, 'project_name', '')\n    const systemTableName = MSystem.getTableName(projectId)\n    Logger.info(`开始处理项目${projectId}(${projectName})的数据`)\n    Logger.info(`[${projectId}(${projectName})] 统计月份:${visitAtMonth}`)\n    const sumRes = await Knex\n      .count('* as total_count')\n      .select([`runtime_version`, `visit_at_month`, `country`, `province`, `city`])\n      .from(systemTableName)\n      .where('visit_at_month', '=', visitAtMonth)\n      .groupBy('runtime_version')\n      .groupBy('country')\n      .groupBy('province')\n      .groupBy('city')\n      .catch((err) => {\n        Logger.error(err)\n        return []\n      })\n    if (sumRes.length === 0) {\n      Logger.info(`没有查询到数据，返回`)\n      continue\n    }\n    let runtimeVersionRecord = {}\n    for (let countItem of sumRes) {\n      const { runtime_version: runtimeVersion, country, province, city, total_count: totalCount, visit_at_month: countAtMonth } = countItem\n      let distribution = {}\n      let distributionPath = [country, province, city]\n      _.set(distribution, distributionPath, totalCount)\n      if (_.has(runtimeVersionRecord, runtimeVersion)) {\n        // 若是已经有，更新count/distribution\n        let oldCount = _.get(runtimeVersionRecord, [runtimeVersion, 'totalCount'], 0)\n        let newCount = oldCount + totalCount\n        let oldDistribution = _.get(runtimeVersionRecord, [runtimeVersion, 'distribution'], {})\n        let cityDistribute = MCityDistribution.mergeDistributionData(distribution, oldDistribution, (newCityRecord, oldCityRecord) => { return newCityRecord + oldCityRecord })\n        _.set(runtimeVersionRecord, [runtimeVersion, 'totalCount'], newCount)\n        _.set(runtimeVersionRecord, [runtimeVersion, 'distribution'], cityDistribute)\n      } else {\n        _.set(runtimeVersionRecord, [runtimeVersion], {\n          totalCount: totalCount,\n          runtimeVersion,\n          countAtMonth: countAtMonth,\n          distribution: distribution\n        })\n      }\n    }\n\n    let totalCount = 0\n    Logger.info(`项目${projectId}(${projectName})处理完毕, 共处理${totalCount}条数据`)\n    for (let item of Object.keys(runtimeVersionRecord)) {\n      if (item) {\n        totalCount = totalCount + 1\n      }\n      let recordInfo = runtimeVersionRecord[item]\n      await replaceAndAutoIncreaseRuntimeVersionRecord(projectId, recordInfo, recordInfo['distribution'])\n    }\n    Logger.info(`项目${projectId}(${projectName})处理完毕, 共处理${totalCount}条数据`)\n  }\n}\n\n/**\n * 自动创建&更新, 并增加total_count的值\n * @param {number} projectId\n * @param {number} totalCount\n * @param {number} countAtMonth\n * @param {string} countType\n * @param {object} cityDistribute\n * @return {boolean}\n */\nasync function replaceAndAutoIncreaseRuntimeVersionRecord (projectId, recordInfo, cityDistribute) {\n  const { totalCount, runtimeVersion, countAtMonth } = recordInfo\n  if (!runtimeVersion || !countAtMonth) {\n    return false\n  }\n  let tableName = getTableName()\n  let updateAt = moment().unix()\n  // 返回值是一个列表\n  let oldRecordList = await Knex\n    .select([`total_count`, `city_distribute_id`, `create_time`, `id`])\n    .from(tableName)\n    .where('project_id', '=', projectId)\n    .andWhere('count_at_month', '=', countAtMonth)\n    .andWhere('runtime_version', '=', runtimeVersion)\n    .catch(() => {\n      return []\n    })\n  // 利用get方法, 不存在直接返回0, 没毛病\n  let id = _.get(oldRecordList, [0, 'id'], 0)\n  let cityDistributeIdInDb = _.get(oldRecordList, [0, 'city_distribute_id'], 0)\n  let createTimeInDb = _.get(oldRecordList, [0, 'create_time'], 0)\n  let data = {\n    project_id: projectId,\n    count_at_month: countAtMonth,\n    total_count: totalCount,\n    update_time: updateAt\n  }\n  let isSuccess = false\n  if (id > 0) {\n    // 更新城市分布数据\n    let isUpdateSuccess = MCityDistribution.updateCityDistributionRecord(cityDistributeIdInDb, projectId, createTimeInDb, JSON.stringify(cityDistribute))\n    if (isUpdateSuccess === false) {\n      return false\n    }\n    // 更新具体数据\n    let affectRows = await Knex(tableName)\n      .update(data)\n      .where(`id`, '=', id)\n    isSuccess = affectRows > 0\n  } else {\n    // 首先插入城市分布数据\n    let cityDistributeId = await MCityDistribution.insertCityDistributionRecord(JSON.stringify(cityDistribute), projectId, updateAt)\n    if (cityDistributeId === 0) {\n      // 城市分布数据插入失败\n      return false\n    }\n    data['runtime_version'] = runtimeVersion\n    data['city_distribute_id'] = cityDistributeId\n    data['total_count'] = totalCount\n    data['create_time'] = updateAt\n    let insertResult = await Knex\n      .returning('id')\n      .insert(data)\n      .into(tableName)\n      .catch(e => {\n        Logger.info('数据插入失败')\n        Logger.info(e)\n        return []\n      })\n    let insertId = _.get(insertResult, [0], 0)\n    isSuccess = insertId > 0\n  }\n  return isSuccess\n}\n\n/**\n * 获取记录\n */\nasync function getRecord (projectId, countAtMonth) {\n  let tableName = getTableName()\n  let recordList = await Knex\n    .select(TABLE_COLUMN)\n    .from(tableName)\n    .where('project_id', '=', projectId)\n    .andWhere('count_at_month', '=', countAtMonth)\n    .catch(() => {\n      return []\n    })\n  return _.get(recordList, [0], {})\n}\n\nexport default {\n  getRecord,\n  sumarySystemRuntimeVersion\n}\n"],"file":"system_runtime_version.js"}