{"version":3,"sources":["error_summary.js"],"names":["Knex","moment","_","Logger","redis","MCityDistribution","DATE_FORMAT","DatabaseUtil","TABLE_COLUMN","BASE_TABLE_NAME","MAX_LIMIT","BASE_REDIS_KEY","REDIS_KEY_ERROR_NAME_DISTRIBUTION_CACHE","getTableName","projectId","createTimeAt","YmDate","unix","format","insertErrorSummaryRecord","countAt","countType","errorType","errorName","urlPath","cityDistributionId","errorCount","tableName","countAtTime","DATABASE_BY_UNIT","createTime","insertData","error_type","error_name","url_path","city_distribution_id","count_at_time","count_type","error_count","create_time","update_time","result","returning","insert","into","catch","err","error","message","get","updateErrorSummaryRecord","id","updateTime","updateData","affecRows","update","where","replaceSummaryRecord","cityDistrubutionJsonString","rawRecord","isEmpty","insertCityDistributionRecord","isSuccess","errorSummaryId","updateCityDistributionRecord","wherePrams","select","from","getErrorNameDistributionListInSameMonth","startAt","endAt","errorNameList","url","countAtTimeList","getDatabaseTimeList","extendCondition","length","rawRecordList","sum","whereIn","andWhere","groupBy","orderBy","recordList","sum_error_count","record","push","getErrorNameList","nowMoment","endOf","sevenDaysAgoMoment","clone","subtract","UNIT","DAY","startOf","timeList","timeAt","time","DATABASE_BY_DAY","distinct","getUrlPathDistributionListByErrorNameList","max","limit","getStackAreaDistribution","sumErrorCount","getList","cityDistributionIdList","createAt","rawCityDistributionReocrdList","getByIdListInOneMonth","cityDistributionMap","cityDistributionJson","cityDistribution","JSON","parse","e","getErrorNameDistributionInSameMonth","rawDistributionList","warn","distributionList","rawDistribution","distribution","getErrorNameDistributionByTimeWithCache","forceUpdate","distributionMap","key","getRedisKey","redisDistributionList","asyncGet","asyncSetex","redisDistribution","oldCount","set","Object","keys","getErrorSummaryByCountType","rawResultList","baseKey"],"mappings":"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","sourcesContent":["import Knex from '~/src/library/mysql'\nimport moment from 'moment'\nimport _ from 'lodash'\nimport Logger from '~/src/library/logger'\nimport redis from '~/src/library/redis'\nimport MCityDistribution from '~/src/model/parse/city_distribution'\nimport DATE_FORMAT from '~/src/constants/date_format'\nimport DatabaseUtil from '~/src/library/utils/modules/database'\n\nconst TABLE_COLUMN = [\n  `id`,\n  `error_type`,\n  `error_name`,\n  `url_path`,\n  `city_distribution_id`,\n  `count_at_time`,\n  `count_type`,\n  `error_count`,\n  `create_time`,\n  `update_time`\n]\n\nconst BASE_TABLE_NAME = 't_r_error_summary'\nconst MAX_LIMIT = 100\n\nconst BASE_REDIS_KEY = 'error_summary'\nconst REDIS_KEY_ERROR_NAME_DISTRIBUTION_CACHE = BASE_REDIS_KEY + '_' + 'error_name_distribution_cache'\n\n/**\n * 获取表名\n * @param {number} projectId 项目id\n * @param {number} createTimeAt 创建时间, 时间戳\n * @return {String}\n */\nfunction getTableName (projectId, createTimeAt) {\n  const DATE_FORMAT = 'YYYYMM'\n  let YmDate = moment.unix(createTimeAt).format(DATE_FORMAT)\n  return BASE_TABLE_NAME + '_' + projectId + '_' + YmDate\n}\n\nasync function insertErrorSummaryRecord (projectId, countAt, countType, errorType, errorName, urlPath, cityDistributionId, errorCount) {\n  const tableName = getTableName(projectId, countAt)\n  const countAtTime = moment.unix(countAt).format(DATE_FORMAT.DATABASE_BY_UNIT[countType])\n  const createTime = moment().unix()\n  const insertData = {\n    error_type: errorType,\n    error_name: errorName,\n    url_path: urlPath,\n    city_distribution_id: cityDistributionId,\n    count_at_time: countAtTime,\n    count_type: countType,\n    error_count: errorCount,\n    create_time: createTime,\n    update_time: createTime\n  }\n  const result = await Knex\n    .returning('id')\n    .insert(insertData)\n    .into(tableName)\n    .catch((err) => {\n      Logger.error(err.message)\n      return [0]\n    })\n  return _.get(result, [0], 0) > 0\n}\n\nasync function updateErrorSummaryRecord (id, projectId, countAt, countType, errorType, errorName, urlPath, errorCount) {\n  const tableName = getTableName(projectId, countAt)\n  const countAtTime = moment.unix(countAt).format(DATE_FORMAT.DATABASE_BY_UNIT[countType])\n  const updateTime = moment().unix()\n  const updateData = {\n    error_type: errorType,\n    error_name: errorName,\n    url_path: urlPath,\n    count_at_time: countAtTime,\n    count_type: countType,\n    error_count: errorCount,\n    update_time: updateTime\n  }\n  const affecRows = await Knex(tableName)\n    .update(updateData)\n    .where('id', id)\n    .catch((err) => {\n      Logger.error(err.message)\n      return 0\n    })\n  return affecRows > 0\n}\n\nasync function replaceSummaryRecord (projectId, countAt, countType, errorType, errorName, urlPath, errorCount, cityDistrubutionJsonString) {\n  const rawRecord = await get(projectId, countAt, countType, errorType, errorName, urlPath)\n\n  if (_.isEmpty(rawRecord)) {\n    // 如果不存在对应的记录\n    // 先插城市分布数据获取id\n    const cityDistributionId = await MCityDistribution.insertCityDistributionRecord(cityDistrubutionJsonString, projectId, countAt)\n\n    // 再插errorSummary数据\n    const isSuccess = await insertErrorSummaryRecord(projectId, countAt, countType, errorType, errorName, urlPath, cityDistributionId, errorCount)\n    return isSuccess\n  } else {\n    // 如果存在对应的记录\n    const { id: errorSummaryId, city_distribution_id: cityDistributionId } = rawRecord\n\n    // 更新城市分布记录\n    await MCityDistribution.updateCityDistributionRecord(cityDistributionId, projectId, countAt, cityDistrubutionJsonString)\n\n    // 更新errorSummary记录\n    const isSuccess = await updateErrorSummaryRecord(errorSummaryId, projectId, countAt, countType, errorType, errorName, urlPath, errorCount)\n    return isSuccess\n  }\n}\n\nasync function get (projectId, countAt, countType, errorType, errorName, urlPath) {\n  const tableName = getTableName(projectId, countAt)\n  const countAtTime = moment.unix(countAt).format(DATE_FORMAT.DATABASE_BY_UNIT[countType])\n\n  const wherePrams = {\n    count_at_time: countAtTime,\n    count_type: countType,\n    error_name: errorName,\n    url_path: urlPath\n  }\n  const result = await Knex\n    .select(TABLE_COLUMN)\n    .from(tableName)\n    .where(wherePrams)\n    .catch((err) => {\n      Logger.error(err.message)\n      return []\n    })\n  return _.get(result, [0], {})\n}\n\n/**\n * 获取指定error_name中的错误分布数, 或指定url下, 指定errorNameList下的错误分布数\n * @param {*} projectId\n * @param {*} startAt\n * @param {*} endAt\n * @param {*} countType\n * @param {*} errorNameList\n * @param {*} url\n */\nasync function getErrorNameDistributionListInSameMonth (projectId, startAt, endAt, countType, errorNameList = [], url = {}) {\n  const tableName = getTableName(projectId, startAt)\n  let countAtTimeList = DatabaseUtil.getDatabaseTimeList(startAt, endAt, countType)\n  let extendCondition = {}\n  if (url.length > 0) {\n    extendCondition['url_path'] = url\n  }\n  let rawRecordList = await Knex\n    .select('error_name')\n    .sum('error_count as sum_error_count')\n    .from(tableName)\n    .where('count_type', countType)\n    .whereIn('count_at_time', countAtTimeList)\n    .whereIn('error_name', errorNameList)\n    .andWhere(extendCondition)\n    .groupBy('error_name')\n    .orderBy('sum_error_count', 'desc')\n    .catch(err => {\n      Logger.error(err.message)\n      return []\n    })\n\n  let recordList = []\n  for (let rawRecord of rawRecordList) {\n    let { sum_error_count: errorCount, error_name: errorName } = rawRecord\n    let record = {\n      error_count: errorCount,\n      error_name: errorName\n    }\n    recordList.push(record)\n  }\n\n  return recordList\n}\n\nasync function getErrorNameList (projectId, errorType) {\n  const nowMoment = moment().endOf('YYYY-MM-DD')\n  const sevenDaysAgoMoment = nowMoment.clone().subtract(3, DATE_FORMAT.UNIT.DAY).startOf('YYYY-MM-DD')\n  const tableName = getTableName(projectId, nowMoment.unix())\n\n  let timeList = []\n  for (let timeAt = sevenDaysAgoMoment.unix(); timeAt < nowMoment.unix(); timeAt += 86400) {\n    const time = moment.unix(timeAt).format(DATE_FORMAT.DATABASE_BY_DAY)\n    timeList.push(time)\n  }\n  const rawRecordList = await Knex\n    .select()\n    .distinct('error_name')\n    .from(tableName)\n    .where('count_type', DATE_FORMAT.UNIT.DAY)\n    .where('error_type', errorType)\n    .whereIn('count_at_time', timeList)\n    .catch(err => {\n      Logger.error(err.message)\n      return []\n    })\n  const errorNameList = []\n  for (let rawRecord of rawRecordList) {\n    errorNameList.push(rawRecord['error_name'])\n  }\n  return errorNameList\n}\n\n/**\n * 根据errorNameList获取url分布\n * @param {*} projectId\n * @param {*} startAt\n * @param {*} endAt\n * @param {*} errorNameList\n * @param {*} countType\n * @param {*} max\n */\nasync function getUrlPathDistributionListByErrorNameList (projectId, startAt, endAt, errorNameList, countType, max = 10) {\n  const tableName = getTableName(projectId, startAt)\n  let countAtTimeList = DatabaseUtil.getDatabaseTimeList(startAt, endAt, countType)\n  let rawRecordList = await Knex\n    .select('url_path')\n    .sum('error_count as total_count')\n    .from(tableName)\n    .where('count_type', countType)\n    .whereIn('error_name', errorNameList)\n    .whereIn('count_at_time', countAtTimeList)\n    .groupBy('url_path')\n    .orderBy('total_count', 'desc')\n    .limit(max)\n    .catch(err => {\n      Logger.error(err.message)\n      return []\n    })\n  let recordList = []\n  for (let rawRecord of rawRecordList) {\n    let urlPath = _.get(rawRecord, ['url_path'], '')\n    let errorCount = _.get(rawRecord, ['total_count'], 0)\n    let record = {\n      url_path: urlPath,\n      error_count: errorCount\n    }\n    recordList.push(record)\n  }\n  return recordList\n}\n\n/**\n * 获取错误堆叠图分布\n * @param {*} projectId\n * @param {*} countType\n * @param {*} errorType\n * @param {*} startAt\n * @param {*} endAt\n * @param {*} extendCondition\n */\nasync function getStackAreaDistribution (projectId, startAt, endAt, countType, errorNameList = [], url = '') {\n  const tableName = getTableName(projectId, startAt)\n  let timeList = DatabaseUtil.getDatabaseTimeList(startAt, endAt, countType)\n  let extendCondition = {}\n  if (url.length > 0) {\n    extendCondition['url_path'] = url\n  }\n\n  let rawRecordList = await Knex\n    .sum('error_count as sum_error_count')\n    .select(['error_name', 'count_at_time'])\n    .from(tableName)\n    .where('count_type', countType)\n    .andWhere(extendCondition)\n    .whereIn('count_at_time', timeList)\n    .whereIn('error_name', errorNameList)\n    .groupBy(['count_at_time', 'error_name'])\n    .catch(err => {\n      Logger.error(err.message)\n      return []\n    })\n  let recordList = []\n  for (let rawRecord of rawRecordList) {\n    let { error_name: errorName, count_at_time: countAtTime, sum_error_count: sumErrorCount } = rawRecord\n    let record = {\n      error_name: errorName,\n      count_at_time: countAtTime,\n      error_count: sumErrorCount\n    }\n    recordList.push(record)\n  }\n  return recordList\n}\n\nasync function getList (projectId, startAt, endAt, countType, errorNameList = [], url = '') {\n  const tableName = getTableName(projectId, startAt)\n  let timeList = DatabaseUtil.getDatabaseTimeList(startAt, endAt, countType)\n\n  let extendCondition = {}\n  if (url.length > 0) {\n    extendCondition['url_path'] = url\n  }\n\n  let rawRecordList = await Knex\n    .select(TABLE_COLUMN)\n    .from(tableName)\n    .where('count_type', countType)\n    .whereIn('count_at_time', timeList)\n    .whereIn('error_name', errorNameList)\n    .andWhere(extendCondition)\n    .orderBy('error_count', 'desc')\n    .catch(err => {\n      Logger.error(err.message)\n      return []\n    })\n  if (rawRecordList.length === 0) return []\n  let cityDistributionIdList = []\n  let createAt = 0\n  for (let rawRecord of rawRecordList) {\n    let cityDistributionId = _.get(rawRecord, ['city_distribution_id'], 0)\n    createAt = _.get(rawRecord, ['create_time'], 0)\n    cityDistributionIdList.push(cityDistributionId)\n  }\n  let rawCityDistributionReocrdList = await MCityDistribution.getByIdListInOneMonth(projectId, cityDistributionIdList, createAt)\n\n  let cityDistributionMap = {}\n  for (let rawRecord of rawCityDistributionReocrdList) {\n    let cityDistributionJson = _.get(rawRecord, ['city_distribute_json'], '{}')\n    let cityDistributionId = _.get(rawRecord, ['id'], 0)\n    let cityDistribution = {}\n    try {\n      cityDistribution = JSON.parse(cityDistributionJson)\n    } catch (e) {\n      cityDistribution = {}\n    }\n    cityDistributionMap[cityDistributionId] = cityDistribution\n  }\n  let recordList = []\n  for (let rawRecord of rawRecordList) {\n    let cityDistributionId = _.get(rawRecord, ['city_distribution_id'], 0)\n    let cityDistribution = _.get(cityDistributionMap, [cityDistributionId], {})\n    rawRecord['city_distribution'] = cityDistribution\n    recordList.push(rawRecord)\n  }\n  return recordList\n}\n\n/**\n * 获取时间范围内, 报错数最多的前max个errorName\n * @param {*} projectId\n * @param {*} startAt\n * @param {*} endAt\n * @return {Array}\n */\nasync function getErrorNameDistributionInSameMonth (projectId, startAt, endAt, max = 500) {\n  let tableName = getTableName(projectId, startAt)\n  let timeList = DatabaseUtil.getDatabaseTimeList(startAt, endAt, DATE_FORMAT.UNIT.DAY)\n  let rawDistributionList = await Knex\n    .sum('error_count as sum_error_count')\n    .select('error_name')\n    .from(tableName)\n    .whereIn('count_at_time', timeList)\n    .andWhere('count_type', DATE_FORMAT.UNIT.DAY)\n    .groupBy('error_name')\n    .orderBy('sum_error_count', 'desc')\n    .limit(max)\n    .catch((e) => {\n      Logger.warn('getErrorNameDistributionInSameMonth查询错误, 错误信息=>', e)\n      return []\n    })\n  let distributionList = []\n  for (let rawDistribution of rawDistributionList) {\n    let errorName = _.get(rawDistribution, ['error_name'], '')\n    let errorCount = _.get(rawDistribution, ['sum_error_count'], '')\n    let distribution = {\n      error_name: errorName,\n      error_count: errorCount\n    }\n    distributionList.push(distribution)\n  }\n  return distributionList\n}\n\n/**\n * 从缓存中获取最近指定时间范围内的错误数分布, 缓存不存在则重新查询\n * @param {*} projectId\n * @param {*} forceUpdate 是否强制更新缓存\n */\nasync function getErrorNameDistributionByTimeWithCache (projectId, startAt, endAt, forceUpdate = false) {\n  let distributionList = []\n  let distributionMap = {}\n  for (let timeAt = startAt; timeAt <= endAt; timeAt += 86400) {\n    let key = getRedisKey(REDIS_KEY_ERROR_NAME_DISTRIBUTION_CACHE, projectId, timeAt)\n    let redisDistributionList = await redis.asyncGet(key)\n\n    if (_.isEmpty(redisDistributionList) || forceUpdate) {\n      redisDistributionList = await getErrorNameDistributionInSameMonth(projectId, moment.unix(timeAt).startOf('day').unix(), moment.unix(timeAt).endOf('day').unix())\n      await redis.asyncSetex(key, 86400, redisDistributionList)\n    }\n    for (let redisDistribution of redisDistributionList) {\n      let errorName = _.get(redisDistribution, ['error_name'], '')\n      let errorCount = _.get(redisDistribution, ['error_count'], 0)\n      let oldCount = _.get(distributionMap, [errorName], 0)\n      _.set(distributionMap, [errorName], oldCount + errorCount)\n    }\n  }\n  for (let errorName of Object.keys(distributionMap)) {\n    distributionList.push({\n      error_name: errorName,\n      error_count: _.get(distributionMap, [errorName], 0)\n    })\n  }\n  return distributionList\n}\n\n/**\n * 获取一个错误name在某一小时或某一天的总次数，服务于errorSummary指令\n * @param {*} projectId\n * @param {*} minuteTimeList\n * @param {*} countType\n */\nasync function getErrorSummaryByCountType (projectId, startAt, endAt, countType) {\n  let tableName = getTableName(projectId, startAt)\n  let timeList = DatabaseUtil.getDatabaseTimeList(startAt, endAt, countType)\n  let rawResultList = await Knex\n    .select(TABLE_COLUMN)\n    .from(tableName)\n    .where('count_type', countType)\n    .whereIn('count_at_time', timeList)\n    .catch(err => {\n      Logger.error('getErrorSummary', err.message)\n      return []\n    })\n  return rawResultList\n}\n\nfunction getRedisKey (baseKey, projectId, timeAt) {\n  return baseKey + '_' + projectId + '_' + moment.unix(timeAt).format('YYYY-MM-DD')\n}\nexport default {\n  insertErrorSummaryRecord,\n  getTableName,\n  get,\n  replaceSummaryRecord,\n  getErrorNameList,\n  getErrorNameDistributionByTimeWithCache,\n\n  getUrlPathDistributionListByErrorNameList,\n  getErrorNameDistributionListInSameMonth,\n  getList,\n  getStackAreaDistribution,\n  getErrorSummaryByCountType\n}\n"],"file":"error_summary.js"}