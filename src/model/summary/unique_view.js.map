{"version":3,"sources":["unique_view.js"],"names":["Knex","moment","_","MCityDistribution","DATE_FORMAT","DatabaseUtil","Logger","BASE_TABLE_NAME","TABLE_COLUMN","getTableName","replaceUvRecord","projectId","totalCount","countAtTime","countType","cityDistribute","tableName","updateAt","unix","oldRecordList","select","from","where","andWhere","catch","id","get","cityDistributeIdInDb","createTimeInDb","data","project_id","count_at_time","total_count","count_type","update_time","isSuccess","isUpdateSuccess","updateCityDistributionRecord","JSON","stringify","affectRows","update","cityDistributeId","insertCityDistributionRecord","insertResult","returning","insert","into","e","insertId","getRecord","recordList","getTotalUv","record","getUVInRange","startAt","finishAt","startAtMoment","format","DATABASE_BY_HOUR","finishAtMoment","rawRecord","sum","UNIT","HOUR","totalUV","getRawRecordListInRange","endAt","timeList","getDatabaseTimeList","rawRecordList","whereIn","err","error","message"],"mappings":"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","sourcesContent":["import Knex from '~/src/library/mysql'\nimport moment from 'moment'\nimport _ from 'lodash'\nimport MCityDistribution from '~/src/model/parse/city_distribution'\nimport DATE_FORMAT from '~/src/constants/date_format'\nimport DatabaseUtil from '~/src/library/utils/modules/database'\nimport Logger from '~/src/library/logger'\n// 统计类别\n\nconst BASE_TABLE_NAME = 't_r_unique_view'\nconst TABLE_COLUMN = [\n  `id`,\n  `project_id`,\n  `total_count`,\n  `count_at_time`,\n  `count_type`,\n  `city_distribute_id`,\n  `create_time`,\n  `update_time`\n]\n\n/**\n * 获取表名\n * @param {number} projectId 项目id\n * @param {number} createTimeAt 创建时间, 时间戳\n * @return {String}\n */\nfunction getTableName () {\n  return BASE_TABLE_NAME\n}\n\n/**\n * 自动创建/替换总uv记录\n * @param {number} projectId\n * @param {number} totalCount\n * @param {number} countAtTime\n * @param {string} countType\n * @param {object} cityDistribute\n * @return {boolean}\n */\nasync function replaceUvRecord (projectId, totalCount, countAtTime, countType, cityDistribute) {\n  let tableName = getTableName()\n  let updateAt = moment().unix()\n  // 返回值是一个列表\n  let oldRecordList = await Knex\n    .select([`city_distribute_id`, `create_time`, `id`])\n    .from(tableName)\n    .where('project_id', '=', projectId)\n    .andWhere('count_at_time', '=', countAtTime)\n    .andWhere('count_type', '=', countType)\n    .catch(() => {\n      return []\n    })\n  // 利用get方法, 不存在直接返回0, 没毛病\n  let id = _.get(oldRecordList, [0, 'id'], 0)\n  let cityDistributeIdInDb = _.get(oldRecordList, [0, 'city_distribute_id'], 0)\n  let createTimeInDb = _.get(oldRecordList, [0, 'create_time'], 0)\n\n  let data = {\n    project_id: projectId,\n    count_at_time: countAtTime,\n    total_count: totalCount,\n    count_type: countType,\n    update_time: updateAt\n  }\n  let isSuccess = false\n  if (id > 0) {\n    // 更新城市分布数据\n    let isUpdateSuccess = MCityDistribution.updateCityDistributionRecord(cityDistributeIdInDb, projectId, createTimeInDb, JSON.stringify(cityDistribute))\n    if (isUpdateSuccess === false) {\n      return false\n    }\n    // 更新具体数据\n    let affectRows = await Knex(tableName)\n      .update(data)\n      .where(`id`, '=', id)\n    isSuccess = affectRows > 0\n  } else {\n    // 首先插入城市分布数据\n    let cityDistributeId = await MCityDistribution.insertCityDistributionRecord(JSON.stringify(cityDistribute), projectId, updateAt)\n    if (cityDistributeId === 0) {\n      // 城市分布数据插入失败\n      return false\n    }\n    data['city_distribute_id'] = cityDistributeId\n    data['total_count'] = totalCount\n    data['create_time'] = updateAt\n    let insertResult = await Knex\n      .returning('id')\n      .insert(data)\n      .into(tableName)\n      .catch(e => { return [] })\n    let insertId = _.get(insertResult, [0], 0)\n    isSuccess = insertId > 0\n  }\n  return isSuccess\n}\n\n/**\n * 获取记录\n */\nasync function getRecord (projectId, countAtTime, countType) {\n  let tableName = getTableName()\n  let recordList = await Knex\n    .select(TABLE_COLUMN)\n    .from(tableName)\n    .where('project_id', '=', projectId)\n    .andWhere('count_at_time', '=', countAtTime)\n    .andWhere('count_type', '=', countType)\n    .catch(e => {\n      return []\n    })\n  return _.get(recordList, [0], {})\n}\n\n/**\n * 获取总uv, 记录不存在返回0\n * @param {number} projectId\n * @param {string} countAtTime\n * @param {string} countType\n * @return {number}\n */\nasync function getTotalUv (projectId, countAtTime, countType) {\n  let record = await getRecord(projectId, countAtTime, countType)\n  return _.get(record, ['total_count'], 0)\n}\n\n/**\n * 获取一段时间范围内的uv数\n * @param {*} projectId\n * @param {*} startAt\n * @param {*} finishAt\n * @returns {Number}\n */\nasync function getUVInRange (projectId, startAt, finishAt) {\n  let startAtMoment = moment.unix(startAt).format(DATE_FORMAT.DATABASE_BY_HOUR)\n  let finishAtMoment = moment.unix(finishAt).format(DATE_FORMAT.DATABASE_BY_HOUR)\n  let tableName = getTableName(projectId, startAt)\n  let rawRecord = await Knex\n    .from(tableName)\n    .sum('total_count as total')\n    .where('count_type', '=', DATE_FORMAT.UNIT.HOUR)\n    .where('count_at_time', '>', startAtMoment)\n    .andWhere('count_at_time', '<', finishAtMoment)\n    .catch(e => {\n      return 0\n    })\n  let totalUV = _.get(rawRecord, [0, 'total'], 0)\n  return totalUV\n}\n\nasync function getRawRecordListInRange (projectId, startAt, endAt, countType) {\n  let timeList = DatabaseUtil.getDatabaseTimeList(startAt, endAt, countType)\n  let tableName = getTableName(projectId, startAt)\n  let rawRecordList = await Knex\n    .select(TABLE_COLUMN)\n    .from(tableName)\n    .where('project_id', projectId)\n    .andWhere('count_type', countType)\n    .whereIn('count_at_time', timeList)\n    .catch(err => {\n      Logger.error('unique_view => getRawRecordListInRange', err.message)\n      return []\n    })\n  return rawRecordList\n}\nexport default {\n  replaceUvRecord,\n  getRecord,\n  getTotalUv,\n  getTableName,\n  getUVInRange,\n  getRawRecordListInRange\n}\n"],"file":"unique_view.js"}