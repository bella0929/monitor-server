{"version":3,"sources":["mocha_test.js"],"names":["Redis","knex","Manage","assert","require","mysql_host","mysql_port","describe","it","done","Knex","client","connection","host","port","user","password","database","debug","pool","max","min","idleTimeoutMillis","reapIntervalMillis","acquireConnectionTimeout","log","error","message","select","from","then","response","undefined","equal","redis_host","redis_port","redisClient","retryStrategy","hasRetryTimes","lazyConnect","showFriendlyErrorStack","stream","scanStream","on","resultKeys","length","manage","registerTaskRepeatPer1Minute","registerTaskRepeatPer10Minute","registerTaskRepeatPer6Hour","getOtherTaskMangerPidList","process","err","p"],"mappings":"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","sourcesContent":["\nimport Redis from 'ioredis'\nimport knex from 'knex'\nimport Manage from '~/src/commands/task/manage'\n\nconst assert = require('assert')\n\n// redis服务器地址\nlet mysql_host = '127.0.0.1'\nlet mysql_port = '3306'\n\ndescribe('Mysql 数据库环境断言', () => {\n  it(mysql_host + ':' + mysql_port, (done) => {\n    /**  knex 方式 */\n    const Knex = knex({\n      client: 'mysql',\n      connection: {\n        host: mysql_host,\n        port: mysql_port,\n        user: 'root',\n        password: '123456',\n        database: 'database'\n      },\n      debug: false,\n      pool: {\n        max: 10,\n        min: 0,\n        // 由于存在资源池, 导致句柄不被释放, 程序不能退出\n        // 因此将最小句柄数设为0, 每100ms检查一次是否有超过120ms未被使用的资源\n        // 以便句柄的及时回收\n        // free resouces are destroyed after this many milliseconds\n        idleTimeoutMillis: 100,\n        // how often to check for idle resources to destroy\n        reapIntervalMillis: 150\n      },\n      acquireConnectionTimeout: 60000,\n      log: {\n        error (message) {\n          // assert.equal(1 > 0, true)\n        }\n      }\n    })\n\n    Knex\n      .select('*')\n      .from('t_o_project')\n      .then(function (response) {\n        if (response === undefined || response == 'undefined') {\n          assert.equal(true, 2 < 1)\n        } else {\n          assert.equal(true, 2 > 1)\n        }\n        done()\n      })\n  })\n})\n\n// redis服务器地址\nlet redis_host = '127.0.0.1'\nlet redis_port = '6379'\n\ndescribe('Redis 缓存环境断言', () => {\n  it(redis_host + ':' + redis_port, (done) => {\n    var redisClient = new Redis({\n      port: redis_port,\n      host: redis_host,\n      retryStrategy: (hasRetryTimes) => {\n        // 关闭自动重连功能\n        return false\n      },\n      lazyConnect: true, // 初始化时不能连接Redis Server, 否则会因为无法断开连接, 导致npm run fee命令不能退出\n      showFriendlyErrorStack: true\n    })\n\n    // Create a readable stream (object mode)\n    var stream = redisClient.scanStream()\n    stream.on('data', function (resultKeys) {\n      assert.equal(true, resultKeys.length > 0)\n      done()\n    })\n    stream.on('end', function () {\n\n    })\n  })\n})\n\ndescribe('指令系统校验', () => {\n  var manage = new Manage()\n  it('每分钟任务', () => {\n    // 每分钟任务\n    manage.registerTaskRepeatPer1Minute()\n  })\n\n  it('每十分钟任务', () => {\n    // 每十分钟任务\n    manage.registerTaskRepeatPer10Minute()\n  })\n\n  it('每六小时任务', () => {\n    // 每六小时任务\n    manage.registerTaskRepeatPer6Hour()\n  })\n\n  it('获取任务pid', () => {\n    // 获取任务pid\n    manage.getOtherTaskMangerPidList()\n  })\n\n  it('关闭所有任务', () => {\n    // 关闭所有任务\n    manage.getOtherTaskMangerPidList()\n  })\n})\nprocess.on('unhandledRejection', function (err, p) {\n  throw err\n})\n"],"file":"mocha_test.js"}