{"version":3,"sources":["index.js"],"names":["express","PrivilegeChecker","RouterConfigBuilder","Api","Logger","baseRouter","Router","withoutLoginRouter","loginRouter","loginProjectRouter","loginCommonRouter","routerConfigMap","registerRouterByMethod","customerRouter","routerConfig","url","methodType","METHOD_TYPE_GET","get","req","res","func","METHOD_TYPE_POST","post","use","checkLogin","checkPrivilege","Object","keys","needLogin","needProjectPriv","log","render","title1","title2","title3","title4"],"mappings":"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","sourcesContent":["import express from 'express'\nimport PrivilegeChecker from '~/src/middlewares/privilege'\nimport RouterConfigBuilder from '~/src/library/utils/modules/router_config_builder'\nimport Api from '~/src/routes/api'\nimport Logger from '~/src/library/logger'\n\nconst baseRouter = express.Router()\n\n// 路由分为以下部分\n// 不需要登录\nconst withoutLoginRouter = express.Router()\n// 需要登录\nconst loginRouter = express.Router()\n// 需要登录-需要项目id\nconst loginProjectRouter = express.Router()\n// 需要登录-不需要项目id\nconst loginCommonRouter = express.Router()\n\nlet routerConfigMap = {\n  ...Api\n}\n\n/**\n * 根据请求方法注册路由\n * @param {*} customerRouter\n * @param {*} routerConfig\n * @param {*} url\n */\nfunction registerRouterByMethod (customerRouter, routerConfig, url) {\n  switch (routerConfig.methodType) {\n    case RouterConfigBuilder.METHOD_TYPE_GET:\n      customerRouter.get(url, (req, res) => {\n        return routerConfig.func(req, res)\n      })\n      break\n    case RouterConfigBuilder.METHOD_TYPE_POST:\n      customerRouter.post(url, (req, res) => {\n        return routerConfig.func(req, res)\n      })\n      break\n    default:\n  }\n}\n\n// 注册路由中间件, 需要在注册路由地址之前使用\nloginRouter.use(PrivilegeChecker.checkLogin)\nloginProjectRouter.use(PrivilegeChecker.checkPrivilege)\n\n// 自动注册\nfor (let url of Object.keys(routerConfigMap)) {\n  let routerConfig = routerConfigMap[url]\n  if (routerConfig.needLogin) {\n    // 需要登录\n    if (routerConfig.needProjectPriv) {\n      // 需要校验项目权限\n      Logger.log(`需要登录,也需要检验项目权限(Method: ${routerConfig.methodType}) =>`, url)\n      registerRouterByMethod(loginProjectRouter, routerConfig, url)\n    } else {\n      // 不需要校验项目权限\n      Logger.log(`需要登录,但不需要检验项目权限(Method: ${routerConfig.methodType}) =>`, url)\n      registerRouterByMethod(loginCommonRouter, routerConfig, url)\n    }\n  } else {\n    Logger.log(`不需要登录(Method: ${routerConfig.methodType}) =>`, url)\n    // 不需要登录\n    registerRouterByMethod(withoutLoginRouter, routerConfig, url)\n  }\n}\n\n// 额外注册下首页\nwithoutLoginRouter.get('/', (req, res) => {\n  res.render('index', {\n    title1: '建设进展',\n    title2: '应用进展',\n    title3: '同类设施',\n    title4: '情报报告'\n  })\n})\n\n// 处理逻辑为: 从上到下, 依次处理\nloginRouter.use('/', loginCommonRouter)\nloginRouter.use('/project/:id', loginProjectRouter)\n\nbaseRouter.use('/', withoutLoginRouter)\nbaseRouter.use('/', loginRouter)\n\nexport default baseRouter\n"],"file":"index.js"}