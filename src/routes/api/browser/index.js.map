{"version":3,"sources":["index.js"],"names":["moment","_","CModel","API_RES","Util","DATE_FORMAT","RouterConfigBuilder","getBrowserList","routerConfigBuilder","METHOD_TYPE_GET","req","res","tableName","currentMonth","format","DATABASE_BY_MONTH","month","get","projectId","browserRecordParams","distinctName","where","count_at_month","project_id","browserRecordList","getDistinct","result","browserRecord","push","browser","send","showResult","err","showError","message","getBrowserDistributionByVersion","splitBy","SPLIT_BY","NONE","getSelect","catch","browser_version","browserVersion","split","total_count","version","getBrowser","browserQuery","datas","objectToArray"],"mappings":"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","sourcesContent":["import moment from 'moment'\nimport _ from 'lodash'\nimport CModel from '~/src/model'\nimport API_RES from '~/src/constants/api_res'\nimport Util from '~/src/library/utils/modules/util'\nimport DATE_FORMAT from '~/src/constants/date_format'\nimport RouterConfigBuilder from '~/src/library/utils/modules/router_config_builder'\n\nlet getBrowserList = RouterConfigBuilder.routerConfigBuilder('/api/browser/list', RouterConfigBuilder.METHOD_TYPE_GET, async (req, res) => {\n  try {\n    let tableName = 't_r_system_browser'\n    let currentMonth = moment().format(DATE_FORMAT.DATABASE_BY_MONTH)\n    let month = _.get(req, ['query', 'month'], currentMonth)\n    const projectId = _.get(req, ['fee', 'project', 'projectId'], 0)\n\n    let browserRecordParams = {\n      tableName: tableName,\n      distinctName: 'browser',\n      where: {\n        count_at_month: month,\n        project_id: projectId\n      }\n    }\n\n    let browserRecordList = await CModel.getDistinct(browserRecordParams)\n\n    let result = []\n    for (let browserRecord of browserRecordList) {\n      result.push(browserRecord.browser)\n    }\n\n    res.send(API_RES.showResult(result))\n  } catch (err) {\n    res.send(API_RES.showError(err.message))\n  }\n})\nlet getBrowserDistributionByVersion = RouterConfigBuilder.routerConfigBuilder('/api/browser/distribution_version', RouterConfigBuilder.METHOD_TYPE_GET, async (req, res) => {\n  let currentMonth = moment().format(DATE_FORMAT.DATABASE_BY_MONTH)\n  let month = _.get(req, ['query', 'month'], currentMonth)\n  let projectId = _.get(req, ['fee', 'project', 'projectId'], 0)\n\n  let browserRecordParams = {\n    tableName: 't_r_system_browser',\n    splitBy: CModel.SPLIT_BY.NONE,\n    where: {\n      project_id: projectId,\n      count_at_month: month\n    },\n    projectId\n  }\n\n  let browserRecordList = await CModel.getSelect(browserRecordParams).catch(\n    err => res.send(API_RES.showError(err.message))\n  )\n\n  let result = []\n  for (let browserRecord of browserRecordList) {\n    // 将浏览器版本 chromium_ver 改为 50.0.2661.102\n    if (browserRecord.browser_version === 'chromium_ver') {\n      browserRecord.browser_version = '50'\n    }\n\n    let browserVersion = browserRecord.browser_version.split('.')[0]\n    result.push({\n      total_count: browserRecord.total_count,\n      version: browserVersion,\n      browser: browserRecord.browser\n    })\n  }\n  res.send(API_RES.showResult(result))\n})\n\nlet getBrowser = RouterConfigBuilder.routerConfigBuilder('/api/browser', RouterConfigBuilder.METHOD_TYPE_GET, async (req, res) => {\n  try {\n    let currentMonth = moment().format(DATE_FORMAT.DATABASE_BY_MONTH)\n    let month = _.get(req, ['query', 'month'], currentMonth)\n    const projectId = _.get(req, ['fee', 'project', 'projectId'], 0)\n    let browserQuery = _.get(req, ['query', 'q'], 'chrome')\n    let browserRecordParams = {\n      tableName: 't_r_system_browser',\n      where: {\n        count_at_month: month,\n        project_id: projectId,\n        browser: browserQuery\n      }\n    }\n\n    let browserRecordList = await CModel.getSelect(browserRecordParams)\n    let datas = {}\n    for (let browserRecord of browserRecordList) {\n      if (browserRecord.browser_version === 'chromium_ver') {\n        browserRecord.browser_version = '50.0.2661.102'\n      }\n\n      let browserVersion = browserRecord.browser_version.split('.')[0]\n\n      if (datas[browserVersion]) {\n        datas[browserVersion] += browserRecord.total_count\n      } else {\n        datas[browserVersion] = browserRecord.total_count\n      }\n    }\n    let result = Util.objectToArray(datas)\n    res.send(API_RES.showResult(result))\n  } catch (err) {\n    res.send(API_RES.showError(err.message))\n  }\n})\n\nexport default {\n  ...getBrowserList,\n  ...getBrowser,\n  ...getBrowserDistributionByVersion\n}\n"],"file":"index.js"}