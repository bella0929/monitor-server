{"version":3,"sources":["index.js"],"names":["_","moment","MErrorSummary","API_RES","DATE_FORMAT","RouterConfigBuilder","DatabaseUtil","parseQueryParam","request","projectId","get","startAt","endAt","url","page","countType","UNIT","HOUR","errorNameListJson","errorNameList","JSON","parse","error","startOf","DAY","unix","endOf","parseResult","stackArea","routerConfigBuilder","METHOD_TYPE_GET","req","res","displayFormatTpl","MINUTE","rawRecordList","getStackAreaDistribution","errorDistributionMap","rawRecord","errorName","errorCount","countAtTime","countAt","DATABASE_BY_UNIT","record","index","name","value","has","push","rawStackAreaRecordList","stackAreaRecordList","Object","keys","paddingResultList","paddingTimeList","concat","rawStackAreaRecord","formatedIndex","format","stackAreaRecord","index_display","sort","a","b","send","showResult"],"mappings":"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","sourcesContent":["import _ from 'lodash'\nimport moment from 'moment'\nimport MErrorSummary from '~/src/model/summary/error_summary'\nimport API_RES from '~/src/constants/api_res'\nimport DATE_FORMAT from '~/src/constants/date_format'\nimport RouterConfigBuilder from '~/src/library/utils/modules/router_config_builder'\nimport DatabaseUtil from '~/src/library/utils/modules/database'\n\n/**\n * 提供一个方法, 集中解析request参数\n * @param {*} request\n */\nfunction parseQueryParam (request) {\n  let projectId = _.get(request, ['fee', 'project', 'projectId'], 0)\n  let startAt = _.get(request, ['query', 'start_at'], 0)\n  let endAt = _.get(request, ['query', 'end_at'], 0)\n  let url = _.get(request, ['query', 'url'], '')\n  let page = _.get(request, ['query', 'page'], 1)\n  let countType = _.get(request, ['query', 'count_type'], DATE_FORMAT.UNIT.HOUR)\n  let errorNameListJson = _.get(request, ['query', 'error_name_list_json'], '[]')\n  let errorNameList = []\n  try {\n    errorNameList = JSON.parse(errorNameListJson)\n  } catch (error) {\n    errorNameList = []\n  }\n\n  // 提供默认值\n  if (startAt <= 0) {\n    startAt = moment().startOf(DATE_FORMAT.UNIT.DAY).unix()\n  }\n  if (endAt <= 0) {\n    endAt = moment().endOf(DATE_FORMAT.UNIT.DAY).unix()\n  }\n\n  let parseResult = {\n    projectId,\n    startAt,\n    endAt,\n    url,\n    page,\n    errorNameList,\n    countType\n  }\n  return parseResult\n}\n\nlet stackArea = RouterConfigBuilder.routerConfigBuilder('/api/error/viser/area/stack_area', RouterConfigBuilder.METHOD_TYPE_GET, async (req, res) => {\n  let parseResult = parseQueryParam(req)\n  let {\n    projectId,\n    errorNameList,\n    startAt,\n    endAt,\n    url,\n    countType\n  } = parseResult\n  let displayFormatTpl = 'MM-DD HH:mm:ss'\n  switch (countType) {\n    case DATE_FORMAT.UNIT.MINUTE:\n      displayFormatTpl = 'D日HH点mm分'\n      break\n    case DATE_FORMAT.UNIT.HOUR:\n      displayFormatTpl = 'D日HH点'\n      break\n    case DATE_FORMAT.UNIT.DAY:\n      displayFormatTpl = 'MM-DD'\n      break\n    default:\n      countType = DATE_FORMAT.UNIT.HOUR\n      displayFormatTpl = 'D日HH点'\n  }\n\n  // 需要保证传进来的都是整点的数据\n  startAt = moment.unix(startAt).startOf(countType).unix()\n  endAt = moment.unix(endAt).endOf(countType).unix()\n\n  let rawRecordList = await MErrorSummary.getStackAreaDistribution(projectId, startAt, endAt, countType, errorNameList, url)\n\n  let errorDistributionMap = {}\n  for (let rawRecord of rawRecordList) {\n    let errorName = _.get(rawRecord, ['error_name'], '')\n    let errorCount = _.get(rawRecord, ['error_count'], 0)\n    let countAtTime = _.get(rawRecord, ['count_at_time'], '')\n\n    let countAt = moment(countAtTime, DATE_FORMAT.DATABASE_BY_UNIT[countType]).unix()\n    let record = {\n      index: countAt,\n      name: errorName,\n      value: errorCount\n    }\n\n    if (_.has(errorDistributionMap, [errorName])) {\n      errorDistributionMap[errorName].push(record)\n    } else {\n      errorDistributionMap[errorName] = [record]\n    }\n  }\n\n  let rawStackAreaRecordList = []\n  let stackAreaRecordList = []\n\n  for (let errorName of Object.keys(errorDistributionMap)) {\n    let rawRecordList = errorDistributionMap[errorName]\n    let paddingResultList = DatabaseUtil.paddingTimeList(rawRecordList, startAt, endAt, countType, {\n      name: errorName,\n      value: 0\n    })\n    // 补全后添加到最终结果中\n    rawStackAreaRecordList = rawStackAreaRecordList.concat(paddingResultList)\n  }\n\n  // 时间格式化\n  for (let rawStackAreaRecord of rawStackAreaRecordList) {\n    let index = _.get(rawStackAreaRecord, ['index'], 0)\n    let formatedIndex = moment.unix(index).format(displayFormatTpl)\n    let stackAreaRecord = {\n      ...rawStackAreaRecord,\n      index_display: formatedIndex\n    }\n    stackAreaRecordList.push(stackAreaRecord)\n  }\n\n  // 按时间顺序排序\n  stackAreaRecordList.sort((a, b) => a['index'] - b['index'])\n  res.send(API_RES.showResult(stackAreaRecordList))\n})\n\nexport default {\n  ...stackArea\n}\n"],"file":"index.js"}