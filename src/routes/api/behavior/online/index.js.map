{"version":3,"sources":["index.js"],"names":["_","moment","MDurationDistribution","API_RES","DATE_FORMAT","RouterConfigBuilder","REQUEST_FILTER_BY_HOUR","REQUEST_FILTER_BY_DAY","REQUEST_FILTER_BY_WEEK","REQUEST_FILTER_BY_MONTH","online","req","res","filterBy","st","et","query","projectId","get","parseInt","startAtMoment","unix","endAtMoment","countType","UNIT","DAY","momentIncreaceStep","HOUR","MONTH","rawRecordList","getRecordList","orderMap","Map","checkAtMoment","clone","isBefore","add","startAtKey","endAtKey","format","resultKey","subtract","set","DATABASE_BY_UNIT","key","value","recordList","rawRecord","countAtTime","countAtMoment","tosMs","divide","record","index_timestamp_ms","push","bufRecordList","bufRecord","values","send","showResult","err","showError","message","onlineRouterConfig","routerConfigBuilder","METHOD_TYPE_GET"],"mappings":"AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,qBAAP,MAAkC,yCAAlC;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,WAAP,MAAwB,6BAAxB;AACA,OAAOC,mBAAP,MAAgC,mDAAhC;AAEA,MAAMC,sBAAsB,GAAG,MAA/B;AACA,MAAMC,qBAAqB,GAAG,KAA9B;AACA,MAAMC,sBAAsB,GAAG,MAA/B;AACA,MAAMC,uBAAuB,GAAG,OAAhC;;AAEA,eAAeC,MAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC/B,MAAI;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,EAAZ;AAAgBC,IAAAA;AAAhB,MAAuBJ,GAAG,CAACK,KAA/B;;AACA,MAAIC,SAAS,GAAGjB,CAAC,CAACkB,GAAF,CAAMP,GAAN,EAAW,CAAC,KAAD,EAAQ,SAAR,EAAmB,WAAnB,CAAX,EAA4C,CAA5C,CAAhB,CAF+B,CAI/B;;;AACAG,EAAAA,EAAE,GAAGK,QAAQ,CAACL,EAAE,GAAG,IAAN,CAAb;AACAC,EAAAA,EAAE,GAAGI,QAAQ,CAACJ,EAAE,GAAG,IAAN,CAAb;AACA,MAAIK,aAAa,GAAGnB,MAAM,CAACoB,IAAP,CAAYP,EAAZ,CAApB;AACA,MAAIQ,WAAW,GAAGrB,MAAM,CAACoB,IAAP,CAAYN,EAAZ,CAAlB;AACA,MAAIQ,SAAS,GAAGnB,WAAW,CAACoB,IAAZ,CAAiBC,GAAjC;AACA,MAAIC,kBAAkB,GAAG,OAAzB;;AACA,UAAQb,QAAR;AACE,SAAKP,sBAAL;AACEiB,MAAAA,SAAS,GAAGnB,WAAW,CAACoB,IAAZ,CAAiBG,IAA7B;AACAD,MAAAA,kBAAkB,GAAG,OAArB;AACA;;AACF,SAAKnB,qBAAL;AACEgB,MAAAA,SAAS,GAAGnB,WAAW,CAACoB,IAAZ,CAAiBC,GAA7B;AACAC,MAAAA,kBAAkB,GAAG,MAArB;AACA;;AACF,SAAKlB,sBAAL;AACEe,MAAAA,SAAS,GAAGnB,WAAW,CAACoB,IAAZ,CAAiBC,GAA7B;AACAC,MAAAA,kBAAkB,GAAG,OAArB;AACA;;AACF,SAAKjB,uBAAL;AACEc,MAAAA,SAAS,GAAGnB,WAAW,CAACoB,IAAZ,CAAiBI,KAA7B;AACAF,MAAAA,kBAAkB,GAAG,QAArB;AACA;AAhBJ;;AAmBA,MAAIG,aAAa,GAAG,MAAM3B,qBAAqB,CAAC4B,aAAtB,CAAoCb,SAApC,EAA+CG,aAAa,CAACC,IAAd,EAA/C,EAAqEC,WAAW,CAACD,IAAZ,EAArE,EAAyFE,SAAzF,CAA1B;AAEA,MAAIQ,QAAQ,GAAG,IAAIC,GAAJ,EAAf,CAhC+B,CAiC/B;;AACA,OAAK,IAAIC,aAAa,GAAGb,aAAa,CAACc,KAAd,EAAzB,EAAgDD,aAAa,CAACE,QAAd,CAAuBb,WAAvB,CAAhD,EAAqFW,aAAa,GAAGA,aAAa,CAACC,KAAd,GAAsBE,GAAtB,CAA0B,CAA1B,EAA6BV,kBAA7B,CAArG,EAAuJ;AACrJ,QAAIW,UAAU,GAAG,EAAjB;AACA,QAAIC,QAAQ,GAAG,EAAf;AACA,QAAIC,MAAM,GAAG,EAAb;AACA,QAAIC,SAAS,GAAG,EAAhB;;AACA,YAAQ3B,QAAR;AACE,WAAKP,sBAAL;AACEiC,QAAAA,MAAM,GAAG,aAAT;AACAF,QAAAA,UAAU,GAAGJ,aAAa,CAACC,KAAd,GAAsBK,MAAtB,CAA6B,aAA7B,CAAb;AACAD,QAAAA,QAAQ,GAAGL,aAAa,CAACC,KAAd,GAAsBE,GAAtB,CAA0B,EAA1B,EAA8B,SAA9B,EAAyCG,MAAzC,CAAgD,OAAhD,CAAX;AACAC,QAAAA,SAAS,GAAI,GAAEH,UAAW,IAAGC,QAAS,EAAtC;AACA;;AACF,WAAK/B,qBAAL;AACEgC,QAAAA,MAAM,GAAG,YAAT;AACAF,QAAAA,UAAU,GAAGJ,aAAa,CAACC,KAAd,GAAsBK,MAAtB,CAA6BA,MAA7B,CAAb,CAFF,CAGE;;AACAC,QAAAA,SAAS,GAAI,GAAEH,UAAW,EAA1B;AACA;;AACF,WAAK7B,sBAAL;AACE+B,QAAAA,MAAM,GAAG,YAAT;AACAF,QAAAA,UAAU,GAAGJ,aAAa,CAACC,KAAd,GAAsBK,MAAtB,CAA6BA,MAA7B,CAAb;AACAD,QAAAA,QAAQ,GAAGL,aAAa,CAACC,KAAd,GAAsBE,GAAtB,CAA0B,CAA1B,EAA6B,MAA7B,EAAqCG,MAArC,CAA4CA,MAA5C,CAAX;AACAC,QAAAA,SAAS,GAAI,GAAEH,UAAW,IAAGC,QAAS,EAAtC;AACA;;AACF,WAAK7B,uBAAL;AACE8B,QAAAA,MAAM,GAAG,YAAT;AACAF,QAAAA,UAAU,GAAGJ,aAAa,CAACC,KAAd,GAAsBK,MAAtB,CAA6B,YAA7B,CAAb;AACAD,QAAAA,QAAQ,GAAGrC,MAAM,CAACgC,aAAa,CAACC,KAAd,GAAsBK,MAAtB,CAA6B,YAA7B,CAAD,EAA6C,YAA7C,CAAN,CAAiEH,GAAjE,CAAqE,CAArE,EAAwE,QAAxE,EAAkFK,QAAlF,CAA2F,CAA3F,EAA8F,MAA9F,EAAsGF,MAAtG,CAA6GA,MAA7G,CAAX;AACAC,QAAAA,SAAS,GAAI,GAAEH,UAAW,IAAGC,QAAS,EAAtC;AACA;AAxBJ;;AA2BAP,IAAAA,QAAQ,CAACW,GAAT,CAAaT,aAAa,CAACM,MAAd,CAAqBnC,WAAW,CAACuC,gBAAZ,CAA6BpB,SAA7B,CAArB,CAAb,EAA4E;AAC1EqB,MAAAA,GAAG,EAAEJ,SADqE;AAE1EK,MAAAA,KAAK,EAAE,CAFmE,CAEjE;;AAFiE,KAA5E;AAID;;AAED,MAAIC,UAAU,GAAG,EAAjB;;AACA,OAAK,IAAIC,SAAT,IAAsBlB,aAAtB,EAAqC;AACnC,QAAImB,WAAW,GAAGD,SAAS,CAAC,eAAD,CAA3B;AACA,QAAIE,aAAa,GAAGhD,MAAM,CAAC+C,WAAD,EAAc5C,WAAW,CAACuC,gBAAZ,CAA6BpB,SAA7B,CAAd,CAA1B;AAEA,QAAIc,UAAU,GAAG,EAAjB;AACA,QAAIC,QAAQ,GAAG,EAAf;AACA,QAAIC,MAAM,GAAG,EAAb;AACA,QAAIC,SAAS,GAAG,EAAhB;;AACA,YAAQ3B,QAAR;AACE,WAAKP,sBAAL;AACEiC,QAAAA,MAAM,GAAG,aAAT;AACAF,QAAAA,UAAU,GAAGY,aAAa,CAACf,KAAd,GAAsBK,MAAtB,CAA6B,aAA7B,CAAb;AACAD,QAAAA,QAAQ,GAAGW,aAAa,CAACf,KAAd,GAAsBE,GAAtB,CAA0B,EAA1B,EAA8B,SAA9B,EAAyCG,MAAzC,CAAgD,OAAhD,CAAX;AACAC,QAAAA,SAAS,GAAI,GAAEH,UAAW,IAAGC,QAAS,EAAtC;AACA;;AACF,WAAK/B,qBAAL;AACEgC,QAAAA,MAAM,GAAG,YAAT;AACAF,QAAAA,UAAU,GAAGY,aAAa,CAACf,KAAd,GAAsBK,MAAtB,CAA6BA,MAA7B,CAAb,CAFF,CAGE;;AACAC,QAAAA,SAAS,GAAI,GAAEH,UAAW,EAA1B;AACA;;AACF,WAAK7B,sBAAL;AACE+B,QAAAA,MAAM,GAAG,YAAT;AACAF,QAAAA,UAAU,GAAGY,aAAa,CAACf,KAAd,GAAsBK,MAAtB,CAA6BA,MAA7B,CAAb;AACAD,QAAAA,QAAQ,GAAGW,aAAa,CAACf,KAAd,GAAsBE,GAAtB,CAA0B,CAA1B,EAA6B,MAA7B,EAAqCG,MAArC,CAA4CA,MAA5C,CAAX;AACAC,QAAAA,SAAS,GAAI,GAAEH,UAAW,IAAGC,QAAS,EAAtC;AACA;;AACF,WAAK7B,uBAAL;AACE8B,QAAAA,MAAM,GAAG,YAAT;AACAF,QAAAA,UAAU,GAAGY,aAAa,CAACf,KAAd,GAAsBK,MAAtB,CAA6BA,MAA7B,CAAb;AACAD,QAAAA,QAAQ,GAAGW,aAAa,CAACf,KAAd,GAAsBE,GAAtB,CAA0B,CAA1B,EAA6B,QAA7B,EAAuCK,QAAvC,CAAgD,CAAhD,EAAmD,MAAnD,EAA2DF,MAA3D,CAAkEA,MAAlE,CAAX;AACAC,QAAAA,SAAS,GAAI,GAAEH,UAAW,IAAGC,QAAS,EAAtC;AACA;AAxBJ,KARmC,CAmCnC;;;AACA,QAAIY,KAAK,GAAG/B,QAAQ,CAACnB,CAAC,CAACmD,MAAF,CAASJ,SAAS,CAAC,eAAD,CAAlB,EAAqCA,SAAS,CAAC,UAAD,CAA9C,CAAD,CAApB;;AACA,QAAI,CAACG,KAAL,EAAY;AACVA,MAAAA,KAAK,GAAG,CAAR;AACD;;AACD,QAAIE,MAAM,GAAG;AACXR,MAAAA,GAAG,EAAEJ,SADM;AAEXK,MAAAA,KAAK,EAAEK,KAFI;AAGXG,MAAAA,kBAAkB,EAAEJ,aAAa,CAAC5B,IAAd,KAAuB,IAHhC,CAGqC;;AAHrC,KAAb;AAKAU,IAAAA,QAAQ,CAACW,GAAT,CAAaO,aAAa,CAACV,MAAd,CAAqBnC,WAAW,CAACuC,gBAAZ,CAA6BpB,SAA7B,CAArB,CAAb,EAA4E6B,MAA5E;AACAN,IAAAA,UAAU,CAACQ,IAAX,CAAgBF,MAAhB;AACD,GAxH8B,CA0H/B;;;AACA,MAAIG,aAAa,GAAG,EAApB;;AACA,OAAK,IAAIC,SAAT,IAAsBzB,QAAQ,CAAC0B,MAAT,EAAtB,EAAyC;AACvCF,IAAAA,aAAa,CAACD,IAAd,CAAmBE,SAAnB;AACD;;AACDV,EAAAA,UAAU,GAAGS,aAAb;;AAEA,MAAI;AACF3C,IAAAA,GAAG,CAAC8C,IAAJ,CAASvD,OAAO,CAACwD,UAAR,CAAmBb,UAAnB,CAAT;AACD,GAFD,CAEE,OAAOc,GAAP,EAAY;AACZhD,IAAAA,GAAG,CAAC8C,IAAJ,CAASvD,OAAO,CAAC0D,SAAR,CAAkBD,GAAG,CAACE,OAAtB,CAAT;AACD;AACF;;AAED,IAAIC,kBAAkB,GAAG1D,mBAAmB,CAAC2D,mBAApB,CACvB,sBADuB,EAEvB3D,mBAAmB,CAAC4D,eAFG,EAGvBvD,MAHuB,CAAzB;AAMA,eAAe,EACb,GAAGqD;AADU,CAAf","sourcesContent":["import _ from 'lodash'\nimport moment from 'moment'\nimport MDurationDistribution from '~/src/model/parse/duration_distribution'\nimport API_RES from '~/src/constants/api_res'\nimport DATE_FORMAT from '~/src/constants/date_format'\nimport RouterConfigBuilder from '~/src/library/utils/modules/router_config_builder'\n\nconst REQUEST_FILTER_BY_HOUR = 'hour'\nconst REQUEST_FILTER_BY_DAY = 'day'\nconst REQUEST_FILTER_BY_WEEK = 'week'\nconst REQUEST_FILTER_BY_MONTH = 'month'\n\nasync function online (req, res) {\n  let { filterBy, st, et } = req.query\n  let projectId = _.get(req, ['fee', 'project', 'projectId'], 0)\n\n  // 传上来的时间戳是毫秒级的\n  st = parseInt(st / 1000)\n  et = parseInt(et / 1000)\n  let startAtMoment = moment.unix(st)\n  let endAtMoment = moment.unix(et)\n  let countType = DATE_FORMAT.UNIT.DAY\n  let momentIncreaceStep = 'hours'\n  switch (filterBy) {\n    case REQUEST_FILTER_BY_HOUR:\n      countType = DATE_FORMAT.UNIT.HOUR\n      momentIncreaceStep = 'hours'\n      break\n    case REQUEST_FILTER_BY_DAY:\n      countType = DATE_FORMAT.UNIT.DAY\n      momentIncreaceStep = 'days'\n      break\n    case REQUEST_FILTER_BY_WEEK:\n      countType = DATE_FORMAT.UNIT.DAY\n      momentIncreaceStep = 'weeks'\n      break\n    case REQUEST_FILTER_BY_MONTH:\n      countType = DATE_FORMAT.UNIT.MONTH\n      momentIncreaceStep = 'months'\n      break\n  }\n\n  let rawRecordList = await MDurationDistribution.getRecordList(projectId, startAtMoment.unix(), endAtMoment.unix(), countType)\n\n  let orderMap = new Map()\n  // 对于按周期查看的情况, 需要保证在周期内有所有的数据\n  for (let checkAtMoment = startAtMoment.clone(); checkAtMoment.isBefore(endAtMoment); checkAtMoment = checkAtMoment.clone().add(1, momentIncreaceStep)) {\n    let startAtKey = ''\n    let endAtKey = ''\n    let format = ''\n    let resultKey = ''\n    switch (filterBy) {\n      case REQUEST_FILTER_BY_HOUR:\n        format = 'MM/DD HH:mm'\n        startAtKey = checkAtMoment.clone().format('MM/DD HH:mm')\n        endAtKey = checkAtMoment.clone().add(59, 'minutes').format('HH:mm')\n        resultKey = `${startAtKey}~${endAtKey}`\n        break\n      case REQUEST_FILTER_BY_DAY:\n        format = 'YYYY/MM/DD'\n        startAtKey = checkAtMoment.clone().format(format)\n        // endAtKey = checkAtMoment.clone().subtract(1, 'days').format(format)\n        resultKey = `${startAtKey}`\n        break\n      case REQUEST_FILTER_BY_WEEK:\n        format = 'YYYY/MM/DD'\n        startAtKey = checkAtMoment.clone().format(format)\n        endAtKey = checkAtMoment.clone().add(6, 'days').format(format)\n        resultKey = `${startAtKey}~${endAtKey}`\n        break\n      case REQUEST_FILTER_BY_MONTH:\n        format = 'YYYY/MM/DD'\n        startAtKey = checkAtMoment.clone().format('YYYY/MM/01')\n        endAtKey = moment(checkAtMoment.clone().format('YYYY/MM/01'), 'YYYY/MM/DD').add(1, 'months').subtract(1, 'days').format(format)\n        resultKey = `${startAtKey}~${endAtKey}`\n        break\n    }\n\n    orderMap.set(checkAtMoment.format(DATE_FORMAT.DATABASE_BY_UNIT[countType]), {\n      key: resultKey,\n      value: 0 // 默认为0\n    })\n  }\n\n  let recordList = []\n  for (let rawRecord of rawRecordList) {\n    let countAtTime = rawRecord['count_at_time']\n    let countAtMoment = moment(countAtTime, DATE_FORMAT.DATABASE_BY_UNIT[countType])\n\n    let startAtKey = ''\n    let endAtKey = ''\n    let format = ''\n    let resultKey = ''\n    switch (filterBy) {\n      case REQUEST_FILTER_BY_HOUR:\n        format = 'MM/DD HH:mm'\n        startAtKey = countAtMoment.clone().format('MM/DD HH:mm')\n        endAtKey = countAtMoment.clone().add(59, 'minutes').format('HH:mm')\n        resultKey = `${startAtKey}~${endAtKey}`\n        break\n      case REQUEST_FILTER_BY_DAY:\n        format = 'YYYY/MM/DD'\n        startAtKey = countAtMoment.clone().format(format)\n        // endAtKey = countAtMoment.clone().subtract(1, 'days').format(format)\n        resultKey = `${startAtKey}`\n        break\n      case REQUEST_FILTER_BY_WEEK:\n        format = 'YYYY/MM/DD'\n        startAtKey = countAtMoment.clone().format(format)\n        endAtKey = countAtMoment.clone().add(6, 'days').format(format)\n        resultKey = `${startAtKey}~${endAtKey}`\n        break\n      case REQUEST_FILTER_BY_MONTH:\n        format = 'YYYY/MM/DD'\n        startAtKey = countAtMoment.clone().format(format)\n        endAtKey = countAtMoment.clone().add(1, 'months').subtract(1, 'days').format(format)\n        resultKey = `${startAtKey}~${endAtKey}`\n        break\n    }\n\n    // 平均在线时长\n    let tosMs = parseInt(_.divide(rawRecord['total_stay_ms'], rawRecord['total_uv']))\n    if (!tosMs) {\n      tosMs = 0\n    }\n    let record = {\n      key: resultKey,\n      value: tosMs,\n      index_timestamp_ms: countAtMoment.unix() * 1000 // 折线图数据添加时间戳\n    }\n    orderMap.set(countAtMoment.format(DATE_FORMAT.DATABASE_BY_UNIT[countType]), record)\n    recordList.push(record)\n  }\n\n  // 对于按周期查看的情况, 需要保证在周期内有所有的数据\n  let bufRecordList = []\n  for (let bufRecord of orderMap.values()) {\n    bufRecordList.push(bufRecord)\n  }\n  recordList = bufRecordList\n\n  try {\n    res.send(API_RES.showResult(recordList))\n  } catch (err) {\n    res.send(API_RES.showError(err.message))\n  }\n}\n\nlet onlineRouterConfig = RouterConfigBuilder.routerConfigBuilder(\n  '/api/behavior/online',\n  RouterConfigBuilder.METHOD_TYPE_GET,\n  online\n)\n\nexport default {\n  ...onlineRouterConfig\n}\n"],"file":"index.js"}