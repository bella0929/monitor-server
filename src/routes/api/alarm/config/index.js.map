{"version":3,"sources":["index.js"],"names":["_","RouterConfigBuilder","API_RES","MAlarmConfig","moment","MMonitor","MUser","MErrorSummary","PAGE_SIZE","insertAlarmConfig","routerConfigBuilder","METHOD_TYPE_POST","req","res","body","get","projectId","ownerUcid","errorName","errorType","timeRange","parseInt","maxErrorCount","alarmInterval","isEnable","note","createUcid","updateUcid","send","showError","isInteger","insertData","project_id","owner_ucid","error_type","error_name","time_range_s","max_error_count","alarm_interval_s","is_enable","create_ucid","update_ucid","isSuccess","add","showResult","getOneAlarmConfig","METHOD_TYPE_GET","query","id","rawRecord","record","formatRecord","getAllAlarmConfig","currentPage","offset","limit","result","pageSize","rawRecordlist","getList","recordList","createUser","updateUser","ERROR_TYPE_MAP","push","list","totalCount","getCount","deleteOneAlarmConfig","updateTime","unix","updateData","is_delete","update_time","update","updateOneAlarmConfig","column","has","underlineName","snakeCase","integerValue","getErrorNameList","ERROR_TYPE_HTTP_ERROR","errorNameList","error","label","value","getErrorTypeList","Object","keys"],"mappings":"AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,OAAOC,mBAAP,MAAgC,mDAAhC;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,YAAP,MAAyB,wCAAzB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,aAAP,MAA0B,mCAA1B;AAEA,MAAMC,SAAS,GAAG,EAAlB;AAEA,MAAMC,iBAAiB,GAAGR,mBAAmB,CAACS,mBAApB,CAAwC,uBAAxC,EAAiET,mBAAmB,CAACU,gBAArF,EAAuG,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACnJ,QAAMC,IAAI,GAAGd,CAAC,CAACe,GAAF,CAAMH,GAAN,EAAW,CAAC,MAAD,CAAX,EAAqB,EAArB,CAAb;;AACA,QAAMI,SAAS,GAAGhB,CAAC,CAACe,GAAF,CAAMH,GAAN,EAAW,CAAC,KAAD,EAAQ,SAAR,EAAmB,WAAnB,CAAX,EAA4C,CAA5C,CAAlB;;AACA,QAAMK,SAAS,GAAGjB,CAAC,CAACe,GAAF,CAAMD,IAAN,EAAY,CAAC,WAAD,CAAZ,EAA2B,GAA3B,CAAlB;;AACA,MAAII,SAAS,GAAGlB,CAAC,CAACe,GAAF,CAAMD,IAAN,EAAY,CAAC,WAAD,CAAZ,EAA2B,EAA3B,CAAhB;;AACA,QAAMK,SAAS,GAAGnB,CAAC,CAACe,GAAF,CAAMD,IAAN,EAAY,CAAC,WAAD,CAAZ,EAA2B,EAA3B,CAAlB;;AACA,MAAIM,SAAS,GAAGC,QAAQ,CAACrB,CAAC,CAACe,GAAF,CAAMD,IAAN,EAAY,CAAC,WAAD,CAAZ,EAA2B,CAA3B,CAAD,CAAxB;AACA,QAAMQ,aAAa,GAAGD,QAAQ,CAACrB,CAAC,CAACe,GAAF,CAAMD,IAAN,EAAY,CAAC,eAAD,CAAZ,EAA+B,KAA/B,CAAD,CAA9B;AACA,QAAMS,aAAa,GAAGF,QAAQ,CAACrB,CAAC,CAACe,GAAF,CAAMD,IAAN,EAAY,CAAC,eAAD,CAAZ,EAA+B,CAA/B,CAAD,CAA9B;AACA,QAAMU,QAAQ,GAAGH,QAAQ,CAACrB,CAAC,CAACe,GAAF,CAAMD,IAAN,EAAY,CAAC,UAAD,CAAZ,EAA0B,CAA1B,CAAD,CAAzB;;AACA,QAAMW,IAAI,GAAGzB,CAAC,CAACe,GAAF,CAAMD,IAAN,EAAY,CAAC,MAAD,CAAZ,EAAsB,EAAtB,CAAb;;AACA,QAAMY,UAAU,GAAG1B,CAAC,CAACe,GAAF,CAAMH,GAAN,EAAW,CAAC,KAAD,EAAQ,MAAR,EAAgB,MAAhB,CAAX,EAAoC,CAApC,CAAnB;;AACA,QAAMe,UAAU,GAAGD,UAAnB;;AACA,MAAIP,SAAS,KAAK,EAAlB,EAAsB;AACpBN,IAAAA,GAAG,CAACe,IAAJ,CAAS1B,OAAO,CAAC2B,SAAR,CAAkB,UAAlB,CAAT;AACA;AACD;;AACD,MAAIX,SAAS,KAAK,EAAlB,EAAsB;AACpBA,IAAAA,SAAS,GAAG,GAAZ;AACD;;AACD,MACElB,CAAC,CAAC8B,SAAF,CAAYV,SAAZ,MAA2B,KAA3B,IACApB,CAAC,CAAC8B,SAAF,CAAYR,aAAZ,MAA+B,KAD/B,IAEAtB,CAAC,CAAC8B,SAAF,CAAYP,aAAZ,MAA+B,KAF/B,IAGAvB,CAAC,CAAC8B,SAAF,CAAYN,QAAZ,MAA0B,KAJ5B,EAKE;AACAX,IAAAA,GAAG,CAACe,IAAJ,CAAS1B,OAAO,CAAC2B,SAAR,CAAkB,YAAlB,CAAT;AACA;AACD;;AACD,MAAIE,UAAU,GAAG;AACfC,IAAAA,UAAU,EAAEhB,SADG;AAEfiB,IAAAA,UAAU,EAAEhB,SAFG;AAGfiB,IAAAA,UAAU,EAAEf,SAHG;AAIfgB,IAAAA,UAAU,EAAEjB,SAJG;AAKfkB,IAAAA,YAAY,EAAEhB,SALC;AAMfiB,IAAAA,eAAe,EAAEf,aANF;AAOfgB,IAAAA,gBAAgB,EAAEf,aAPH;AAQfgB,IAAAA,SAAS,EAAEf,QARI;AASfC,IAAAA,IATe;AAUfe,IAAAA,WAAW,EAAEd,UAVE;AAWfe,IAAAA,WAAW,EAAEd;AAXE,GAAjB;AAaA,MAAIe,SAAS,GAAG,MAAMvC,YAAY,CAACwC,GAAb,CAAiBZ,UAAjB,CAAtB;;AACA,MAAIW,SAAJ,EAAe;AACb7B,IAAAA,GAAG,CAACe,IAAJ,CAAS1B,OAAO,CAAC0C,UAAR,CAAmB,EAAnB,EAAuB,MAAvB,CAAT;AACD,GAFD,MAEO;AACL/B,IAAAA,GAAG,CAACe,IAAJ,CAAS1B,OAAO,CAAC2B,SAAR,CAAkB,MAAlB,CAAT;AACD;AACF,CAhDyB,CAA1B;AAkDA,IAAIgB,iBAAiB,GAAG5C,mBAAmB,CAACS,mBAApB,CAAwC,yBAAxC,EAAmET,mBAAmB,CAAC6C,eAAvF,EAAwG,OAAOlC,GAAP,EAAYC,GAAZ,KAAoB;AAClJ,MAAIkC,KAAK,GAAG/C,CAAC,CAACe,GAAF,CAAMH,GAAN,EAAW,CAAC,OAAD,CAAX,EAAsB,EAAtB,CAAZ;;AACA,MAAIoC,EAAE,GAAG3B,QAAQ,CAACrB,CAAC,CAACe,GAAF,CAAMgC,KAAN,EAAa,CAAC,IAAD,CAAb,EAAqB,CAArB,CAAD,CAAjB;;AAEA,MAAI/C,CAAC,CAAC8B,SAAF,CAAYkB,EAAZ,MAAoB,KAAxB,EAA+B;AAC7BnC,IAAAA,GAAG,CAACe,IAAJ,CAAS1B,OAAO,CAAC2B,SAAR,CAAkB,YAAlB,CAAT;AACA;AACD;;AACD,QAAMoB,SAAS,GAAG,MAAM9C,YAAY,CAAC4C,KAAb,CAAmBC,EAAnB,CAAxB;AACA,QAAME,MAAM,GAAG/C,YAAY,CAACgD,YAAb,CAA0BF,SAA1B,CAAf;AAEApC,EAAAA,GAAG,CAACe,IAAJ,CAAS1B,OAAO,CAAC0C,UAAR,CAAmBM,MAAnB,CAAT;AACD,CAZuB,CAAxB;AAcA,MAAME,iBAAiB,GAAGnD,mBAAmB,CAACS,mBAApB,CAAwC,wBAAxC,EAAkET,mBAAmB,CAAC6C,eAAtF,EAAuG,OAAOlC,GAAP,EAAYC,GAAZ,KAAoB;AACnJ,QAAMG,SAAS,GAAGhB,CAAC,CAACe,GAAF,CAAMH,GAAN,EAAW,CAAC,KAAD,EAAQ,SAAR,EAAmB,WAAnB,CAAX,EAA4C,CAA5C,CAAlB;;AACA,QAAMyC,WAAW,GAAGhC,QAAQ,CAACrB,CAAC,CAACe,GAAF,CAAMH,GAAN,EAAW,CAAC,OAAD,EAAU,aAAV,CAAX,EAAqC,CAArC,CAAD,CAA5B;AACA,QAAM0C,MAAM,GAAG,CAACD,WAAW,GAAG,CAAf,IAAoB7C,SAAnC;AACA,QAAM+C,KAAK,GAAG/C,SAAd;;AACA,MAAIR,CAAC,CAAC8B,SAAF,CAAYuB,WAAZ,MAA6B,KAAjC,EAAwC;AACtCxC,IAAAA,GAAG,CAACe,IAAJ,CAAS1B,OAAO,CAAC2B,SAAR,CAAkB,YAAlB,CAAT;AACA;AACD;;AAED,QAAM2B,MAAM,GAAG;AACbH,IAAAA,WADa;AAEbI,IAAAA,QAAQ,EAAEjD;AAFG,GAAf;AAIA,QAAMkD,aAAa,GAAG,MAAMvD,YAAY,CAACwD,OAAb,CAAqB3C,SAArB,EAAgCsC,MAAhC,EAAwCC,KAAxC,CAA5B,CAdmJ,CAgBnJ;;AACA,QAAMK,UAAU,GAAG,EAAnB;;AACA,OAAK,IAAIX,SAAT,IAAsBS,aAAtB,EAAqC;AACnC,UAAMR,MAAM,GAAG/C,YAAY,CAACgD,YAAb,CAA0BF,SAA1B,CAAf;AACA,UAAM9B,SAAS,GAAG+B,MAAM,CAAC,YAAD,CAAxB;AACA,UAAMxB,UAAU,GAAGwB,MAAM,CAAC,aAAD,CAAzB;AACA,UAAMvB,UAAU,GAAGuB,MAAM,CAAC,aAAD,CAAzB;AACA,UAAMW,UAAU,GAAG,MAAMvD,KAAK,CAACS,GAAN,CAAUW,UAAV,CAAzB;AACA,UAAMoC,UAAU,GAAG,MAAMxD,KAAK,CAACS,GAAN,CAAUY,UAAV,CAAzB;AACAuB,IAAAA,MAAM,CAAC,iBAAD,CAAN,GAA4B7C,QAAQ,CAAC0D,cAAT,CAAwB5C,SAAxB,CAA5B;AACA+B,IAAAA,MAAM,CAAC,aAAD,CAAN,GAAwBlD,CAAC,CAACe,GAAF,CAAM8C,UAAN,EAAkB,CAAC,UAAD,CAAlB,EAAgCnC,UAAhC,CAAxB;AACAwB,IAAAA,MAAM,CAAC,aAAD,CAAN,GAAwBlD,CAAC,CAACe,GAAF,CAAM+C,UAAN,EAAkB,CAAC,UAAD,CAAlB,EAAgCnC,UAAhC,CAAxB;AACAiC,IAAAA,UAAU,CAACI,IAAX,CAAgBd,MAAhB;AACD;;AAEDM,EAAAA,MAAM,CAACS,IAAP,GAAcL,UAAd;AACAJ,EAAAA,MAAM,CAACU,UAAP,GAAoB,MAAM/D,YAAY,CAACgE,QAAb,CAAsBnD,SAAtB,CAA1B;AACAH,EAAAA,GAAG,CAACe,IAAJ,CAAS1B,OAAO,CAAC0C,UAAR,CAAmBY,MAAnB,CAAT;AACD,CAlCyB,CAA1B;AAoCA,IAAIY,oBAAoB,GAAGnE,mBAAmB,CAACS,mBAApB,CAAwC,0BAAxC,EAAoET,mBAAmB,CAAC6C,eAAxF,EAAyG,OAAOlC,GAAP,EAAYC,GAAZ,KAAoB;AACtJ,MAAImC,EAAE,GAAG3B,QAAQ,CAACrB,CAAC,CAACe,GAAF,CAAMH,GAAN,EAAW,CAAC,OAAD,EAAU,IAAV,CAAX,EAA4B,CAA5B,CAAD,CAAjB;;AACA,MAAIe,UAAU,GAAG3B,CAAC,CAACe,GAAF,CAAMH,GAAN,EAAW,CAAC,KAAD,EAAQ,MAAR,EAAgB,MAAhB,CAAX,CAAjB;;AACA,MAAIyD,UAAU,GAAGjE,MAAM,GAAGkE,IAAT,EAAjB;;AAEA,MAAItE,CAAC,CAAC8B,SAAF,CAAYkB,EAAZ,MAAoB,KAAxB,EAA+B;AAC7BnC,IAAAA,GAAG,CAACe,IAAJ,CAAS1B,OAAO,CAAC2B,SAAR,CAAkB,YAAlB,CAAT;AACA;AACD;;AAED,MAAI0C,UAAU,GAAG;AACfC,IAAAA,SAAS,EAAE,CADI;AAEf/B,IAAAA,WAAW,EAAEd,UAFE;AAGf8C,IAAAA,WAAW,EAAEJ;AAHE,GAAjB;AAKA,MAAIb,MAAM,GAAG,MAAMrD,YAAY,CAACuE,MAAb,CAAoB1B,EAApB,EAAwBuB,UAAxB,CAAnB;;AACA,MAAIf,MAAM,KAAK,CAAf,EAAkB;AAChB3C,IAAAA,GAAG,CAACe,IAAJ,CAAS1B,OAAO,CAAC2B,SAAR,CAAkB,MAAlB,CAAT;AACD,GAFD,MAEO;AACLhB,IAAAA,GAAG,CAACe,IAAJ,CAAS1B,OAAO,CAAC0C,UAAR,CAAmB,EAAnB,EAAuB,MAAvB,CAAT;AACD;AACF,CArB0B,CAA3B;AAuBA,IAAI+B,oBAAoB,GAAG1E,mBAAmB,CAACS,mBAApB,CAAwC,0BAAxC,EAAoET,mBAAmB,CAACU,gBAAxF,EAA0G,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACvJ,MAAIC,IAAI,GAAGd,CAAC,CAACe,GAAF,CAAMH,GAAN,EAAW,CAAC,MAAD,CAAX,EAAqB,EAArB,CAAX;;AACA,MAAIoC,EAAE,GAAG3B,QAAQ,CAACrB,CAAC,CAACe,GAAF,CAAMD,IAAN,EAAY,CAAC,IAAD,CAAZ,EAAoB,CAApB,CAAD,CAAjB;;AACA,MAAIa,UAAU,GAAG3B,CAAC,CAACe,GAAF,CAAMH,GAAN,EAAW,CAAC,KAAD,EAAQ,MAAR,EAAgB,MAAhB,CAAX,CAAjB;;AACA,MAAI2D,UAAU,GAAG;AACf9B,IAAAA,WAAW,EAAEd;AADE,GAAjB;;AAIA,MAAI3B,CAAC,CAAC8B,SAAF,CAAYkB,EAAZ,MAAoB,KAAxB,EAA+B;AAC7BnC,IAAAA,GAAG,CAACe,IAAJ,CAAS1B,OAAO,CAAC2B,SAAR,CAAkB,SAAlB,CAAT;AACD,GAVsJ,CAYvJ;;;AACA,OAAK,IAAI+C,MAAT,IAAmB,CAAC,WAAD,EAAc,WAAd,EAA2B,WAA3B,EAAwC,MAAxC,CAAnB,EAAoE;AAClE,QAAI5E,CAAC,CAAC6E,GAAF,CAAM/D,IAAN,EAAY,CAAC8D,MAAD,CAAZ,CAAJ,EAA2B;AACzB,YAAME,aAAa,GAAG9E,CAAC,CAAC+E,SAAF,CAAYH,MAAZ,CAAtB;;AACAL,MAAAA,UAAU,CAACO,aAAD,CAAV,GAA4B9E,CAAC,CAACe,GAAF,CAAMD,IAAN,EAAY,CAAC8D,MAAD,CAAZ,CAA5B;AACD;AACF,GAlBsJ,CAmBvJ;;;AACA,OAAK,IAAIA,MAAT,IAAmB,CAAC,eAAD,EAAkB,UAAlB,CAAnB,EAAkD;AAChD,QAAI5E,CAAC,CAAC6E,GAAF,CAAM/D,IAAN,EAAY,CAAC8D,MAAD,CAAZ,CAAJ,EAA2B;AACzB,YAAMI,YAAY,GAAG3D,QAAQ,CAACrB,CAAC,CAACe,GAAF,CAAMD,IAAN,EAAY,CAAC8D,MAAD,CAAZ,CAAD,CAA7B;;AACA,UAAI5E,CAAC,CAAC8B,SAAF,CAAYkD,YAAZ,MAA8B,KAAlC,EAAyC;AACvCnE,QAAAA,GAAG,CAACe,IAAJ,CAAS1B,OAAO,CAAC2B,SAAR,CAAmB,GAAE+C,MAAO,SAA5B,CAAT;AACA;AACD;;AAED,YAAME,aAAa,GAAG9E,CAAC,CAAC+E,SAAF,CAAYH,MAAZ,CAAtB;;AACAL,MAAAA,UAAU,CAACO,aAAD,CAAV,GAA4BE,YAA5B;AACD;AACF,GA/BsJ,CAgCvJ;;;AACA,OAAK,IAAIJ,MAAT,IAAmB,CAAC,WAAD,EAAc,eAAd,CAAnB,EAAmD;AACjD,QAAI5E,CAAC,CAAC6E,GAAF,CAAM/D,IAAN,EAAY,CAAC8D,MAAD,CAAZ,CAAJ,EAA2B;AACzB,UAAII,YAAY,GAAG3D,QAAQ,CAACrB,CAAC,CAACe,GAAF,CAAMD,IAAN,EAAY,CAAC8D,MAAD,CAAZ,CAAD,CAA3B;;AACA,UAAI5E,CAAC,CAAC8B,SAAF,CAAYkD,YAAZ,MAA8B,KAAlC,EAAyC;AACvCnE,QAAAA,GAAG,CAACe,IAAJ,CAAS1B,OAAO,CAAC2B,SAAR,CAAmB,GAAE+C,MAAO,SAA5B,CAAT;AACA;AACD;;AACD,UAAIA,MAAM,KAAK,eAAX,IAA8BI,YAAY,GAAG,EAAjD,EAAqD;AACnDA,QAAAA,YAAY,GAAG,EAAf;AACD;;AACD,YAAMF,aAAa,GAAG9E,CAAC,CAAC+E,SAAF,CAAYH,MAAZ,IAAsB,IAA5C;AACAL,MAAAA,UAAU,CAACO,aAAD,CAAV,GAA4BE,YAA5B;AACD;AACF;;AACD,MAAIxB,MAAM,GAAG,MAAMrD,YAAY,CAACuE,MAAb,CAAoB1B,EAApB,EAAwBuB,UAAxB,CAAnB;;AACA,MAAIf,MAAM,KAAK,CAAf,EAAkB;AAChB3C,IAAAA,GAAG,CAACe,IAAJ,CAAS1B,OAAO,CAAC2B,SAAR,CAAkB,MAAlB,CAAT;AACD,GAFD,MAEO;AACLhB,IAAAA,GAAG,CAACe,IAAJ,CAAS1B,OAAO,CAAC0C,UAAR,CAAmB,EAAnB,EAAuB,MAAvB,CAAT;AACD;AACF,CArD0B,CAA3B;AAsDA,MAAMqC,gBAAgB,GAAGhF,mBAAmB,CAACS,mBAApB,CAAwC,mCAAxC,EAA6ET,mBAAmB,CAAC6C,eAAjG,EAAkH,OAAOlC,GAAP,EAAYC,GAAZ,KAAoB;AAC7J,QAAMG,SAAS,GAAGhB,CAAC,CAACe,GAAF,CAAMH,GAAN,EAAW,CAAC,KAAD,EAAQ,SAAR,EAAmB,WAAnB,CAAX,EAA4C,CAA5C,CAAlB;;AACA,QAAMO,SAAS,GAAGnB,CAAC,CAACe,GAAF,CAAMH,GAAN,EAAW,CAAC,OAAD,EAAU,WAAV,CAAX,EAAmCP,QAAQ,CAAC6E,qBAA5C,CAAlB;;AACA,QAAMC,aAAa,GAAG,MAAM5E,aAAa,CAAC0E,gBAAd,CAA+BjE,SAA/B,EAA0CG,SAA1C,CAA5B,CAH6J,CAI7J;;AACA,MAAIqC,MAAM,GAAG,EAAb;;AACA,OAAK,IAAItC,SAAT,IAAsBiE,aAAtB,EAAqC;AACnC,UAAMC,KAAK,GAAG;AACZC,MAAAA,KAAK,EAAEnE,SADK;AAEZoE,MAAAA,KAAK,EAAEpE;AAFK,KAAd;AAIAsC,IAAAA,MAAM,CAACQ,IAAP,CAAYoB,KAAZ;AACD;;AACD5B,EAAAA,MAAM,CAACQ,IAAP,CAAY;AACVqB,IAAAA,KAAK,EAAE,SADG;AAEVC,IAAAA,KAAK,EAAE;AAFG,GAAZ;AAIAzE,EAAAA,GAAG,CAACe,IAAJ,CAAS1B,OAAO,CAAC0C,UAAR,CAAmBY,MAAnB,CAAT;AACD,CAlBwB,CAAzB;AAoBA,MAAM+B,gBAAgB,GAAGtF,mBAAmB,CAACS,mBAApB,CAAwC,mCAAxC,EAA6ET,mBAAmB,CAAC6C,eAAjG,EAAkH,OAAOlC,GAAP,EAAYC,GAAZ,KAAoB;AAC7J;AACA,MAAI2C,MAAM,GAAG,EAAb;;AACA,OAAK,IAAIrC,SAAT,IAAsBqE,MAAM,CAACC,IAAP,CAAYpF,QAAQ,CAAC0D,cAArB,CAAtB,EAA4D;AAC1D,UAAMqB,KAAK,GAAG;AACZC,MAAAA,KAAK,EAAEhF,QAAQ,CAAC0D,cAAT,CAAwB5C,SAAxB,CADK;AAEZmE,MAAAA,KAAK,EAAEnE;AAFK,KAAd;AAIAqC,IAAAA,MAAM,CAACQ,IAAP,CAAYoB,KAAZ;AACD;;AACDvE,EAAAA,GAAG,CAACe,IAAJ,CAAS1B,OAAO,CAAC0C,UAAR,CAAmBY,MAAnB,CAAT;AACD,CAXwB,CAAzB;AAaA,eAAe,EACb,GAAG/C,iBADU;AAEb,KAAGoC,iBAFU;AAGb,KAAGO,iBAHU;AAIb,KAAGgB,oBAJU;AAKb,KAAGO,oBALU;AAMb,KAAGM,gBANU;AAOb,KAAGM;AAPU,CAAf","sourcesContent":["import _ from 'lodash'\nimport RouterConfigBuilder from '~/src/library/utils/modules/router_config_builder'\nimport API_RES from '~/src/constants/api_res'\nimport MAlarmConfig from '~/src/model/project/alarm/alarm_config'\nimport moment from 'moment'\nimport MMonitor from '~/src/model/parse/monitor'\nimport MUser from '~/src/model/project/user'\nimport MErrorSummary from '~/src/model/summary/error_summary'\n\nconst PAGE_SIZE = 10\n\nconst insertAlarmConfig = RouterConfigBuilder.routerConfigBuilder('/api/alarm/config/add', RouterConfigBuilder.METHOD_TYPE_POST, async (req, res) => {\n  const body = _.get(req, ['body'], {})\n  const projectId = _.get(req, ['fee', 'project', 'projectId'], 1)\n  const ownerUcid = _.get(body, ['ownerUcid'], '0')\n  let errorName = _.get(body, ['errorName'], '')\n  const errorType = _.get(body, ['errorType'], '')\n  let timeRange = parseInt(_.get(body, ['timeRange'], 0))\n  const maxErrorCount = parseInt(_.get(body, ['maxErrorCount'], 10000))\n  const alarmInterval = parseInt(_.get(body, ['alarmInterval'], 0))\n  const isEnable = parseInt(_.get(body, ['isEnable'], 1))\n  const note = _.get(body, ['note'], '')\n  const createUcid = _.get(req, ['fee', 'user', 'ucid'], 0)\n  const updateUcid = createUcid\n  if (errorType === '') {\n    res.send(API_RES.showError('错误类型不能是空'))\n    return\n  }\n  if (errorName === '') {\n    errorName = '*'\n  }\n  if (\n    _.isInteger(timeRange) === false ||\n    _.isInteger(maxErrorCount) === false ||\n    _.isInteger(alarmInterval) === false ||\n    _.isInteger(isEnable) === false\n  ) {\n    res.send(API_RES.showError('请输入正确的数据格式'))\n    return\n  }\n  let insertData = {\n    project_id: projectId,\n    owner_ucid: ownerUcid,\n    error_type: errorType,\n    error_name: errorName,\n    time_range_s: timeRange,\n    max_error_count: maxErrorCount,\n    alarm_interval_s: alarmInterval,\n    is_enable: isEnable,\n    note,\n    create_ucid: createUcid,\n    update_ucid: updateUcid\n  }\n  let isSuccess = await MAlarmConfig.add(insertData)\n  if (isSuccess) {\n    res.send(API_RES.showResult([], '添加成功'))\n  } else {\n    res.send(API_RES.showError('添加失败'))\n  }\n})\n\nlet getOneAlarmConfig = RouterConfigBuilder.routerConfigBuilder('/api/alarm/config/query', RouterConfigBuilder.METHOD_TYPE_GET, async (req, res) => {\n  let query = _.get(req, ['query'], {})\n  let id = parseInt(_.get(query, ['id'], 0))\n\n  if (_.isInteger(id) === false) {\n    res.send(API_RES.showError('请输入正确格式的数据'))\n    return\n  }\n  const rawRecord = await MAlarmConfig.query(id)\n  const record = MAlarmConfig.formatRecord(rawRecord)\n\n  res.send(API_RES.showResult(record))\n})\n\nconst getAllAlarmConfig = RouterConfigBuilder.routerConfigBuilder('/api/alarm/config/list', RouterConfigBuilder.METHOD_TYPE_GET, async (req, res) => {\n  const projectId = _.get(req, ['fee', 'project', 'projectId'], 1)\n  const currentPage = parseInt(_.get(req, ['query', 'currentPage'], 1))\n  const offset = (currentPage - 1) * PAGE_SIZE\n  const limit = PAGE_SIZE\n  if (_.isInteger(currentPage) === false) {\n    res.send(API_RES.showError('请输入正确格式的数据'))\n    return\n  }\n\n  const result = {\n    currentPage,\n    pageSize: PAGE_SIZE\n  }\n  const rawRecordlist = await MAlarmConfig.getList(projectId, offset, limit)\n\n  // 规整数据，删除不必要的字段\n  const recordList = []\n  for (let rawRecord of rawRecordlist) {\n    const record = MAlarmConfig.formatRecord(rawRecord)\n    const errorType = record['error_type']\n    const createUcid = record['create_ucid']\n    const updateUcid = record['update_ucid']\n    const createUser = await MUser.get(createUcid)\n    const updateUser = await MUser.get(updateUcid)\n    record['error_type_name'] = MMonitor.ERROR_TYPE_MAP[errorType]\n    record['create_ucid'] = _.get(createUser, ['nickname'], createUcid)\n    record['update_ucid'] = _.get(updateUser, ['nickname'], updateUcid)\n    recordList.push(record)\n  }\n\n  result.list = recordList\n  result.totalCount = await MAlarmConfig.getCount(projectId)\n  res.send(API_RES.showResult(result))\n})\n\nlet deleteOneAlarmConfig = RouterConfigBuilder.routerConfigBuilder('/api/alarm/config/delete', RouterConfigBuilder.METHOD_TYPE_GET, async (req, res) => {\n  let id = parseInt(_.get(req, ['query', 'id'], 0))\n  let updateUcid = _.get(req, ['fee', 'user', 'ucid'])\n  let updateTime = moment().unix()\n\n  if (_.isInteger(id) === false) {\n    res.send(API_RES.showError('请输入正确的数据格式'))\n    return\n  }\n\n  let updateData = {\n    is_delete: 1,\n    update_ucid: updateUcid,\n    update_time: updateTime\n  }\n  let result = await MAlarmConfig.update(id, updateData)\n  if (result === 0) {\n    res.send(API_RES.showError('删除失败'))\n  } else {\n    res.send(API_RES.showResult([], '删除成功'))\n  }\n})\n\nlet updateOneAlarmConfig = RouterConfigBuilder.routerConfigBuilder('/api/alarm/config/update', RouterConfigBuilder.METHOD_TYPE_POST, async (req, res) => {\n  let body = _.get(req, ['body'], {})\n  let id = parseInt(_.get(body, ['id'], 0))\n  let updateUcid = _.get(req, ['fee', 'user', 'ucid'])\n  let updateData = {\n    update_ucid: updateUcid\n  }\n\n  if (_.isInteger(id) === false) {\n    res.send(API_RES.showError('数据格式不正确'))\n  }\n\n  // 不需转换字段\n  for (let column of ['ownerUcid', 'errorName', 'errorType', 'note']) {\n    if (_.has(body, [column])) {\n      const underlineName = _.snakeCase(column)\n      updateData[underlineName] = _.get(body, [column])\n    }\n  }\n  // 需转为number的字段\n  for (let column of ['maxErrorCount', 'isEnable']) {\n    if (_.has(body, [column])) {\n      const integerValue = parseInt(_.get(body, [column]))\n      if (_.isInteger(integerValue) === false) {\n        res.send(API_RES.showError(`${column}数据格式不正确`))\n        return\n      }\n\n      const underlineName = _.snakeCase(column)\n      updateData[underlineName] = integerValue\n    }\n  }\n  // 需转为number的字段,且单位为s的字段\n  for (let column of ['timeRange', 'alarmInterval']) {\n    if (_.has(body, [column])) {\n      let integerValue = parseInt(_.get(body, [column]))\n      if (_.isInteger(integerValue) === false) {\n        res.send(API_RES.showError(`${column}数据格式不正确`))\n        return\n      }\n      if (column === 'alarmInterval' && integerValue < 60) {\n        integerValue = 60\n      }\n      const underlineName = _.snakeCase(column) + '_s'\n      updateData[underlineName] = integerValue\n    }\n  }\n  let result = await MAlarmConfig.update(id, updateData)\n  if (result === 0) {\n    res.send(API_RES.showError('更新失败'))\n  } else {\n    res.send(API_RES.showResult([], '更新成功'))\n  }\n})\nconst getErrorNameList = RouterConfigBuilder.routerConfigBuilder('/api/alarm/config/error_name_list', RouterConfigBuilder.METHOD_TYPE_GET, async (req, res) => {\n  const projectId = _.get(req, ['fee', 'project', 'projectId'], 0)\n  const errorType = _.get(req, ['query', 'errorType'], MMonitor.ERROR_TYPE_HTTP_ERROR)\n  const errorNameList = await MErrorSummary.getErrorNameList(projectId, errorType)\n  // 变为前端需要的格式的数据\n  let result = []\n  for (let errorName of errorNameList) {\n    const error = {\n      label: errorName,\n      value: errorName\n    }\n    result.push(error)\n  }\n  result.push({\n    label: '*(监控所有)',\n    value: '*'\n  })\n  res.send(API_RES.showResult(result))\n})\n\nconst getErrorTypeList = RouterConfigBuilder.routerConfigBuilder('/api/alarm/config/error_type_list', RouterConfigBuilder.METHOD_TYPE_GET, async (req, res) => {\n  // 变为前端需要的格式的数据\n  let result = []\n  for (let errorType of Object.keys(MMonitor.ERROR_TYPE_MAP)) {\n    const error = {\n      label: MMonitor.ERROR_TYPE_MAP[errorType],\n      value: errorType\n    }\n    result.push(error)\n  }\n  res.send(API_RES.showResult(result))\n})\n\nexport default {\n  ...insertAlarmConfig,\n  ...getOneAlarmConfig,\n  ...getAllAlarmConfig,\n  ...deleteOneAlarmConfig,\n  ...updateOneAlarmConfig,\n  ...getErrorNameList,\n  ...getErrorTypeList\n}\n"],"file":"index.js"}