{"version":3,"sources":["index.js"],"names":["_","moment","RouterConfigBuilder","CModel","API_RES","DATE_FORMAT","os","routerConfigBuilder","METHOD_TYPE_GET","req","res","tableName","currentMonth","format","DATABASE_BY_MONTH","month","get","projectId","osRecordParams","where","count_at_month","project_id","osList","getSelect","resultList","osItem","push","type","key","value","send","showResult","err","showError","message"],"mappings":"AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,mBAAP,MAAgC,mDAAhC;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,WAAP,MAAwB,6BAAxB;AAEA,IAAIC,EAAE,GAAGJ,mBAAmB,CAACK,mBAApB,CAAwC,SAAxC,EAAmDL,mBAAmB,CAACM,eAAvE,EAAwF,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACnH,MAAI;AACF,UAAMC,SAAS,GAAG,eAAlB;AACA,UAAMC,YAAY,GAAGX,MAAM,GAAGY,MAAT,CAAgBR,WAAW,CAACS,iBAA5B,CAArB;;AACA,UAAMC,KAAK,GAAGf,CAAC,CAACgB,GAAF,CAAMP,GAAN,EAAW,CAAC,OAAD,EAAU,OAAV,CAAX,EAA+BG,YAA/B,CAAd;;AACA,UAAMK,SAAS,GAAGjB,CAAC,CAACgB,GAAF,CAAMP,GAAN,EAAW,CAAC,KAAD,EAAQ,SAAR,EAAmB,WAAnB,CAAX,EAA4C,CAA5C,CAAlB;;AACA,UAAMS,cAAc,GAAG;AACrBP,MAAAA,SAAS,EAAEA,SADU;AAErBQ,MAAAA,KAAK,EAAE;AACLC,QAAAA,cAAc,EAAEL,KADX;AAELM,QAAAA,UAAU,EAAEJ;AAFP,OAFc;AAMrBA,MAAAA,SAAS,EAAEA;AANU,KAAvB;AAQA,UAAMK,MAAM,GAAG,MAAMnB,MAAM,CAACoB,SAAP,CAAiBL,cAAjB,CAArB;AACA,QAAIM,UAAU,GAAG,EAAjB;;AACA,SAAK,IAAIC,MAAT,IAAmBH,MAAnB,EAA2B;AACzBE,MAAAA,UAAU,CAACE,IAAX,CAAgB;AACdC,QAAAA,IAAI,EAAEF,MAAM,CAAC,IAAD,CADE;AAEdG,QAAAA,GAAG,EAAEH,MAAM,CAAC,YAAD,CAFG;AAGdI,QAAAA,KAAK,EAAEJ,MAAM,CAAC,aAAD;AAHC,OAAhB;AAKD;;AACDf,IAAAA,GAAG,CAACoB,IAAJ,CAAS1B,OAAO,CAAC2B,UAAR,CAAmBP,UAAnB,CAAT;AACD,GAvBD,CAuBE,OAAOQ,GAAP,EAAY;AACZtB,IAAAA,GAAG,CAACoB,IAAJ,CAAS1B,OAAO,CAAC6B,SAAR,CAAkBD,GAAG,CAACE,OAAtB,CAAT;AACD;AACF,CA3BQ,CAAT;AA6BA,eAAe,EACb,GAAG5B;AADU,CAAf","sourcesContent":["import _ from 'lodash'\nimport moment from 'moment'\nimport RouterConfigBuilder from '~/src/library/utils/modules/router_config_builder'\nimport CModel from '~/src/model'\nimport API_RES from '~/src/constants/api_res'\nimport DATE_FORMAT from '~/src/constants/date_format'\n\nlet os = RouterConfigBuilder.routerConfigBuilder('/api/os', RouterConfigBuilder.METHOD_TYPE_GET, async (req, res) => {\n  try {\n    const tableName = 't_r_system_os'\n    const currentMonth = moment().format(DATE_FORMAT.DATABASE_BY_MONTH)\n    const month = _.get(req, ['query', 'month'], currentMonth)\n    const projectId = _.get(req, ['fee', 'project', 'projectId'], 0)\n    const osRecordParams = {\n      tableName: tableName,\n      where: {\n        count_at_month: month,\n        project_id: projectId\n      },\n      projectId: projectId\n    }\n    const osList = await CModel.getSelect(osRecordParams)\n    let resultList = []\n    for (let osItem of osList) {\n      resultList.push({\n        type: osItem['os'],\n        key: osItem['os_version'],\n        value: osItem['total_count']\n      })\n    }\n    res.send(API_RES.showResult(resultList))\n  } catch (err) {\n    res.send(API_RES.showError(err.message))\n  }\n}\n)\nexport default {\n  ...os\n}\n"],"file":"index.js"}