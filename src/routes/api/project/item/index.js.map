{"version":3,"sources":["index.js"],"names":["_","RouterConfigBuilder","API_RES","MUser","MProject","MProjetMember","detail","routerConfigBuilder","METHOD_TYPE_GET","req","res","id","parseInt","get","isInteger","send","showError","project","formatRecord","isEmpty","showResult","add","METHOD_TYPE_POST","body","displayName","projectName","cDesc","createUcid","updateUcid","isAdmin","noPrivilege","insertData","project_name","display_name","c_desc","create_ucid","update_ucid","isSuccess","list","ucid","offset","max","rawProjectList","getList","projectList","rawProject","role","ROLE_OWNER","need_alarm","push","rawProjectMemberList","getProjectMemberListByUcid","projectIdList","projectMap","rawProjectMember","getProjectListById","projectId","ROLE_DEV","deleteProject","updateData","is_delete","update","updateRecord","itemKey","has"],"mappings":"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","sourcesContent":["/**\n * 项目处理\n */\nimport _ from 'lodash'\nimport RouterConfigBuilder from '~/src/library/utils/modules/router_config_builder'\nimport API_RES from '~/src/constants/api_res'\nimport MUser from '~/src/model/project/user'\nimport MProject from '~/src/model/project/project'\nimport MProjetMember from '~/src/model/project/project_member'\n\nlet detail = RouterConfigBuilder.routerConfigBuilder('/api/project/item/detail', RouterConfigBuilder.METHOD_TYPE_GET, async (req, res) => {\n  let id = parseInt(_.get(req, ['query', 'id'], 0))\n\n  if (_.isInteger(id) === false) {\n    res.send(API_RES.showError('参数错误'))\n    return\n  }\n\n  let project = await MProject.get(id)\n  project = MProject.formatRecord(project)\n\n  if (_.isEmpty(project)) {\n    res.send(API_RES.showError(`项目id:${id}不存在`))\n  } else {\n    res.send(API_RES.showResult(project))\n  }\n}, false)\n\nlet add = RouterConfigBuilder.routerConfigBuilder('/api/project/item/add', RouterConfigBuilder.METHOD_TYPE_POST, async (req, res) => {\n  let body = _.get(req, ['body'], {})\n  let displayName = _.get(body, ['displayName'], '')\n  let projectName = _.get(body, ['projectName'], '')\n  let cDesc = _.get(body, ['cDesc'], '')\n  let createUcid = _.get(req, ['fee', 'user', 'ucid'], '0')\n  let updateUcid = createUcid\n\n  // 检查权限\n  let isAdmin = await MUser.isAdmin(createUcid)\n  if (isAdmin === false) {\n    return res.send(API_RES.noPrivilege('只有管理员才可以添加项目'))\n  }\n\n  let insertData = {\n    project_name: projectName,\n    display_name: displayName,\n    c_desc: cDesc,\n    create_ucid: createUcid,\n    update_ucid: updateUcid\n  }\n  let isSuccess = await MProject.add(insertData)\n\n  if (isSuccess) {\n    res.send(API_RES.showResult([], '添加成功'))\n  } else {\n    res.send(API_RES.showError('添加失败'))\n  }\n}, false)\n\nlet list = RouterConfigBuilder.routerConfigBuilder('/api/project/item/list', RouterConfigBuilder.METHOD_TYPE_GET, async (req, res) => {\n  let ucid = _.get(req, ['fee', 'user', 'ucid'], '0')\n  let offset = 0\n  let max = 50\n\n  // 判断是否是管理员，如果是，返回全部项目列表\n  const isAdmin = await MUser.isAdmin(ucid)\n  if (isAdmin) {\n    let rawProjectList = await MProject.getList()\n    let projectList = []\n    for (let rawProject of rawProjectList) {\n      let project = MProject.formatRecord(rawProject)\n      project = {\n        ...project,\n        role: MProjetMember.ROLE_OWNER,\n        need_alarm: 0\n      }\n      projectList.push(project)\n    }\n    res.send(API_RES.showResult(projectList))\n    return\n  }\n\n  // 去project_member里拿到ucid对应的项目成员\n  let rawProjectMemberList = await MProjetMember.getProjectMemberListByUcid(ucid, offset, max)\n  let projectIdList = []\n  let projectMap = {} // 以projectId为key\n  for (let rawProjectMember of rawProjectMemberList) {\n    let id = rawProjectMember['project_id']\n    projectMap[id] = rawProjectMember\n    projectIdList.push(id)\n  }\n  // 去project拿到项目的名字\n  let rawProjectList = await MProject.getProjectListById(projectIdList)\n\n  let projectList = []\n  for (let rawProject of rawProjectList) {\n    let project = MProject.formatRecord(rawProject)\n    const projectId = project['id']\n    project = {\n      ...project,\n      role: _.get(projectMap, [projectId, 'role'], MProjetMember.ROLE_DEV),\n      need_alarm: _.get(projectMap, [projectId, 'need_alarm'], 0)\n    }\n    projectList.push(project)\n  }\n\n  res.send(API_RES.showResult(projectList))\n}, false)\n\nlet deleteProject = RouterConfigBuilder.routerConfigBuilder('/api/project/item/delete', RouterConfigBuilder.METHOD_TYPE_GET, async (req, res) => {\n  let id = parseInt(_.get(req, ['query', 'id'], 0))\n  let updateUcid = parseInt(_.get(req, ['fee', 'user', 'ucid'], '0'))\n  if (_.isInteger(id) === false) {\n    res.send(API_RES.showError('参数错误'))\n    return\n  }\n\n  // 检查权限\n  let isAdmin = await MUser.isAdmin(updateUcid)\n  if (isAdmin === false) {\n    return res.send(API_RES.noPrivilege('只有管理员才可以删除项目'))\n  }\n\n  let updateData = {\n    is_delete: 1,\n    update_ucid: updateUcid\n  }\n  let isSuccess = await MProject.update(id, updateData)\n  if (isSuccess) {\n    res.send(API_RES.showResult([], '删除成功'))\n  } else {\n    res.send(API_RES.showError('删除失败'))\n  }\n}, false)\n\nlet update = RouterConfigBuilder.routerConfigBuilder('/api/project/item/update', RouterConfigBuilder.METHOD_TYPE_POST, async (req, res) => {\n  let body = _.get(req, ['body'], {})\n  let id = _.get(body, ['id'], 0)\n\n  let updateUcid = _.get(req, ['fee', 'user', 'ucid'], '0')\n\n  let updateRecord = {}\n  for (let itemKey of [\n    'displayName',\n    'projectName',\n    'cDesc'\n  ]) {\n    if (_.has(body, itemKey)) {\n      updateRecord[itemKey] = _.get(body, [itemKey], '')\n    }\n  }\n\n  // 检查权限\n  if (_.has(updateRecord, ['projectName'])) {\n    let isAdmin = await MUser.isAdmin(updateUcid)\n    if (isAdmin === false) {\n      return res.send(API_RES.noPrivilege('只有管理员才可以修改projectName字段'))\n    }\n  }\n\n  if (_.isEmpty(updateRecord)) {\n    res.send(API_RES.showResult([], '更新成功'))\n    return\n  }\n\n  updateRecord['update_ucid'] = updateUcid\n  let isSuccess = await MProject.update(id, updateRecord)\n  if (isSuccess) {\n    res.send(API_RES.showResult([], '更新成功'))\n  } else {\n    res.send(API_RES.showError('更新失败'))\n  }\n}, false)\n\nexport default {\n  ...detail,\n  ...add,\n  ...list,\n  ...deleteProject,\n  ...update\n}\n"],"file":"index.js"}