{"version":3,"sources":["index.js"],"names":["_","moment","RouterConfigBuilder","API_RES","LKafka","fs","getTestLogs","routerConfigBuilder","METHOD_TYPE_GET","req","res","currentAt","unix","startAt","get","endAt","Math","floor","ceil","distinctUrlListForLog","Set","start","add","getAbsoluteLogUriByType","LOG_TYPE_TEST","result","uri","existsSync","readFileSync","send","showResult","error","showError","message"],"mappings":"AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,mBAAP,MAAgC,mDAAhC;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,OAAOC,EAAP,MAAe,IAAf;AAEA,MAAMC,WAAW,GAAGJ,mBAAmB,CAACK,mBAApB,CAAwC,uBAAxC,EAAiEL,mBAAmB,CAACM,eAArF,EAAsG,CAACC,GAAD,EAAMC,GAAN,KAAc;AACtI,QAAMC,SAAS,GAAGV,MAAM,GAAGW,IAAT,KAAkB,IAApC;;AACA,MAAIC,OAAO,GAAGb,CAAC,CAACc,GAAF,CAAML,GAAN,EAAW,CAAC,OAAD,EAAU,IAAV,CAAX,EAA4BE,SAA5B,CAAd;;AACA,MAAII,KAAK,GAAGf,CAAC,CAACc,GAAF,CAAML,GAAN,EAAW,CAAC,OAAD,EAAU,IAAV,CAAX,EAA4BE,SAA5B,CAAZ;;AAEAE,EAAAA,OAAO,GAAGG,IAAI,CAACC,KAAL,CAAWJ,OAAO,GAAG,IAArB,CAAV;AACAE,EAAAA,KAAK,GAAGC,IAAI,CAACE,IAAL,CAAUH,KAAK,GAAG,IAAlB,CAAR;AACA,QAAMI,qBAAqB,GAAG,IAAIC,GAAJ,EAA9B;;AACA,OAAK,IAAIC,KAAK,GAAGR,OAAjB,EAA0BQ,KAAK,IAAIN,KAAnC,EAA0CM,KAAK,EAA/C,EAAmD;AACjDF,IAAAA,qBAAqB,CAACG,GAAtB,CAA0BlB,MAAM,CAACmB,uBAAP,CAA+BF,KAA/B,EAAsCjB,MAAM,CAACoB,aAA7C,CAA1B;AACD;;AAED,MAAIC,MAAM,GAAG,EAAb;;AACA,MAAI;AACF,SAAK,IAAIC,GAAT,IAAgBP,qBAAhB,EAAuC;AACrC,UAAId,EAAE,CAACsB,UAAH,CAAcD,GAAd,CAAJ,EAAwB;AACtBD,QAAAA,MAAM,IAAIpB,EAAE,CAACuB,YAAH,CAAgBF,GAAhB,EAAqB,MAArB,CAAV;AACD;AACF;;AACDhB,IAAAA,GAAG,CAACmB,IAAJ,CAAS1B,OAAO,CAAC2B,UAAR,CAAmBL,MAAnB,CAAT;AACD,GAPD,CAOE,OAAOM,KAAP,EAAc;AACdrB,IAAAA,GAAG,CAACmB,IAAJ,CAAS1B,OAAO,CAAC6B,SAAR,CAAkBD,KAAK,CAACE,OAAxB,CAAT;AACD;AACF,CAvBmB,EAuBjB,KAvBiB,EAuBV,KAvBU,CAApB;AAyBA,eAAe,EACb,GAAG3B;AADU,CAAf","sourcesContent":["import _ from 'lodash'\nimport moment from 'moment'\nimport RouterConfigBuilder from '~/src/library/utils/modules/router_config_builder'\nimport API_RES from '~/src/constants/api_res'\nimport LKafka from '~/src/library/nginx/index'\nimport fs from 'fs'\n\nconst getTestLogs = RouterConfigBuilder.routerConfigBuilder('/api/log/content/test', RouterConfigBuilder.METHOD_TYPE_GET, (req, res) => {\n  const currentAt = moment().unix() * 1000\n  let startAt = _.get(req, ['query', 'st'], currentAt)\n  let endAt = _.get(req, ['query', 'et'], currentAt)\n\n  startAt = Math.floor(startAt / 1000)\n  endAt = Math.ceil(endAt / 1000)\n  const distinctUrlListForLog = new Set()\n  for (let start = startAt; start <= endAt; start++) {\n    distinctUrlListForLog.add(LKafka.getAbsoluteLogUriByType(start, LKafka.LOG_TYPE_TEST))\n  }\n\n  let result = ''\n  try {\n    for (let uri of distinctUrlListForLog) {\n      if (fs.existsSync(uri)) {\n        result += fs.readFileSync(uri, 'utf8')\n      }\n    }\n    res.send(API_RES.showResult(result))\n  } catch (error) {\n    res.send(API_RES.showError(error.message))\n  }\n}, false, false)\n\nexport default {\n  ...getTestLogs\n}\n"],"file":"index.js"}