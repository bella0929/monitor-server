{"version":3,"sources":["parseNginxLog.js"],"names":["fs","readLine","moment","_","commonConfig","SaveLogBase","Nginx","jsonWriteStreamPool","Map","rawLogWriteStreamPool","NginxParseLog","signature","description","execute","args","options","that","projectMap","getProjectMap","logCounter","legalLogCounter","nginxLogFilePath","timeAt","unix","timeMoment","formatStr","format","logAbsolutePath","log","existsSync","onDataIn","data","next","content","toString","logCreateAt","parseLogCreateAt","isFinite","parseResult","parseLog","isEmpty","projectName","get","projectRate","checkFlag","floor","skipIt","rawLogWriteStreamByLogCreateAt","getWriteStreamClientByType","LOG_TYPE_RAW","write","jsonWriteStreamByLogCreateAt","LOG_TYPE_JSON","JSON","stringify","size","autoCloseOldStream","createReadStream","newline","autoNext","encoding","go"],"mappings":"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","sourcesContent":["import fs from 'fs'\nimport { readLine } from 'lei-stream'\nimport moment from 'moment'\nimport _ from 'lodash'\nimport commonConfig from '~/src/configs/common'\nimport SaveLogBase from '~/src/commands/save_log/base'\nimport Nginx from '~/src/library/nginx'\n\nlet jsonWriteStreamPool = new Map()\nlet rawLogWriteStreamPool = new Map()\n\nclass NginxParseLog extends SaveLogBase {\n  static get signature() {\n    return `\n     SaveLog:Nginx \n     `\n  }\n\n  static get description() {\n    return '每一分钟读取Nginx日志文件，并解析'\n  }\n\n  async execute(args, options) {\n    let that = this\n    // 获取项目列表\n    let projectMap = await this.getProjectMap()\n\n    let logCounter = 0\n    let legalLogCounter = 0\n    let nginxLogFilePath = commonConfig.nginxLogFilePath\n    let timeAt = moment().unix() - 60;\n    let timeMoment = moment.unix(timeAt)\n    let formatStr = timeMoment.format('/YYYYMM-DD-HH-mm')\n    let logAbsolutePath = `${nginxLogFilePath}${formatStr}.log`;\n    this.log('nginx原始日志路径 ', logAbsolutePath);\n    if (fs.existsSync(logAbsolutePath) === false) {\n      that.log(`log文件不存在, 自动跳过 => ${logAbsolutePath}`)\n      return\n    }\n    let onDataIn = async (data, next) => {\n      logCounter++\n      let content = data.toString()\n\n      // 获取日志时间, 没有原始日志时间则直接跳过\n      let logCreateAt = this.parseLogCreateAt(content);\n      this.log('===日志时间===', logCreateAt);\n      if (_.isFinite(logCreateAt) === false || logCreateAt <= 0) {\n        this.log('日志时间不合法, 自动跳过')\n        return\n      }\n      // 首先判断是不是测试数据, 如果是测试数据, 直接保存, 跳过后续所有逻辑\n      /* if (this.isTestLog(content)) {\n        this.log('收到测试日志, 直接保存, 并跳过后续所有流程')\n        let writeLogClient = this.getWriteStreamClientByType(logCreateAt, Nginx.LOG_TYPE_TEST)\n        writeLogClient.write(content)\n        this.log('测试日志写入完毕')\n        return\n      } */\n      // 检查日志格式, 只录入解析后, 符合规则的log\n      let parseResult = await that.parseLog(content, projectMap)\n      this.log('parseNginxLog parseResult ', parseResult);\n      if (_.isEmpty(parseResult)) {\n        that.log('日志格式不规范, 自动跳过, 原日志内容为 =>', content)\n        return\n      }\n\n      let projectName = _.get(parseResult, ['project_name'], 0)\n      let projectRate = _.get(projectMap, [projectName, 'rate'], 100)\n      let checkFlag = _.floor(logCounter % 10000)\n      let skipIt = checkFlag > projectRate\n      if (skipIt) {\n        // 根据项目抽样比率，过滤打点数据，如果没有命中，直接返回\n        this.log(` projectName => ${projectName}, logCounter => ${logCounter}, checkFlag => ${checkFlag}, projectRate => ${projectRate}, 未命中抽样比, 自动跳过`)\n        return\n      }\n      legalLogCounter = legalLogCounter + 1\n\n      // 存原始数据\n      let rawLogWriteStreamByLogCreateAt = this.getWriteStreamClientByType(logCreateAt, Nginx.LOG_TYPE_RAW)\n      rawLogWriteStreamByLogCreateAt.write(content)\n\n      this.log(`收到数据, 当前共记录${legalLogCounter}/${logCounter}条数据`)\n      let jsonWriteStreamByLogCreateAt = this.getWriteStreamClientByType(logCreateAt, Nginx.LOG_TYPE_JSON)\n      jsonWriteStreamByLogCreateAt.write(JSON.stringify(parseResult))\n      // 定期清一下\n      if (jsonWriteStreamPool.size > 100 || rawLogWriteStreamPool.size > 100) {\n        // 每当句柄池满100后, 关闭除距离当前时间10分钟之内的所有文件流\n        this.autoCloseOldStream()\n      }\n      next()\n    }\n    readLine(fs.createReadStream(logAbsolutePath), {\n      // 换行符，默认\\n\n      newline: '\\n',\n      // 是否自动读取下一行，默认false\n      autoNext: false,\n      // 编码器，可以为函数或字符串（内置编码器：json，base64），默认null\n      encoding: null\n    }).go(onDataIn, function () { })\n  }\n}\n\nexport default NginxParseLog\n"],"file":"parseNginxLog.js"}