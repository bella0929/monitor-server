{"version":3,"sources":["base.js"],"names":["Base","fs","writeLine","md5","moment","shell","parser","queryString","Util","_","MProject","Nginx","path","jsonWriteStreamPool","Map","rawLogWriteStreamPool","TEST_LOG_FLAG","SaveLogBase","isTestLog","content","includes","getWriteStreamClientByType","nowAt","logType","LOG_TYPE_RAW","LOG_TYPE_JSON","LOG_TYPE_TEST","nowAtLogUri","getAbsoluteLogUriByType","log","logPath","dirname","mkdir","nowAtWriteStream","has","get","createWriteStream","flags","newline","encoding","cacheLines","set","autoCloseOldStream","isCloseAll","unix","startAt","finishAt","survivalSet","Set","survivalAt","survivalAtLogUri","survivalAtRawLogUri","add","needCloseLogUriSet","testLogFileUri","keys","closeLogUri","needCloseStream","delete","end","clear","getProjectMap","projectList","getList","projectMap","project","project_name","id","rate","parseLogCreateAt","data","isString","info","split","url","parts","length","urlQS","parseUrl","record","JSON","parse","err","common","pub","logAtMoment","ISO_8601","logAt","isMoment","isValid","parseLog","isEmpty","pid","project_id","currentAt","logCreateAt","Math","abs","time","safeInfo16","replace","ua","decodeURIComponent","browserVersion","ip","location","ip2Locate","country","province","city"],"mappings":"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","sourcesContent":["import Base from '~/src/commands/base'\nimport fs from 'fs'\nimport { writeLine } from 'lei-stream'\nimport md5 from 'md5'\nimport moment from 'moment'\nimport shell from 'shelljs'\nimport parser from 'ua-parser-js'\nimport queryString from 'query-string'\nimport Util from '~/src/library/utils/modules/util'\nimport _ from 'lodash'\nimport MProject from '~/src/model/project/project'\nimport Nginx from '~/src/library/nginx'\nimport path from 'path'\n\nlet jsonWriteStreamPool = new Map()\nlet rawLogWriteStreamPool = new Map()\nconst TEST_LOG_FLAG = 'b47ca710747e96f1c523ebab8022c19e9abaa56b'\n\nclass SaveLogBase extends Base {\n  isTestLog(content) {\n    return content.includes(TEST_LOG_FLAG)\n  }\n\n  /**\n * 获取写入Stream\n * @param {number} nowAt\n * @returns {WriteStream}\n */\n  getWriteStreamClientByType(nowAt, logType = Nginx.LOG_TYPE_RAW) {\n    // 确保logType一定是指定类型\n    switch (logType) {\n      case Nginx.LOG_TYPE_RAW:\n        break\n      case Nginx.LOG_TYPE_JSON:\n        break\n      case Nginx.LOG_TYPE_TEST:\n        break\n      default:\n        logType = Nginx.LOG_TYPE_RAW\n    }\n    let nowAtLogUri = Nginx.getAbsoluteLogUriByType(nowAt, logType)\n    this.log(`清洗后的日志路径 `,nowAtLogUri);\n    // 创建对应路径\n    let logPath = path.dirname(nowAtLogUri)\n    this.log(`清洗后的日志路径所在目录 `,logPath);\n    shell.mkdir('-p', logPath)\n    let nowAtWriteStream = null\n    if (jsonWriteStreamPool.has(nowAtLogUri)) {\n      nowAtWriteStream = jsonWriteStreamPool.get(nowAtLogUri);\n    } else {\n      nowAtWriteStream = writeLine(fs.createWriteStream(nowAtLogUri, { flags: 'a' }), {\n        // 换行符，默认\\n\n        newline: '\\n',\n        encoding: null,\n        cacheLines: 0 // 直接落磁盘\n      })\n      jsonWriteStreamPool.set(nowAtLogUri, nowAtWriteStream)\n    }\n    return nowAtWriteStream\n  }\n\n  /**\n               * 自动关闭旧Stream\n               */\n  autoCloseOldStream(isCloseAll = false) {\n    let nowAt = moment().unix()\n    let startAt = nowAt - 60 * 100\n    let finishAt = nowAt - 60 * 100\n    let survivalSet = new Set()\n    for (let survivalAt = startAt; survivalAt < finishAt; survivalAt = survivalAt + 1) {\n      let survivalAtLogUri = Nginx.getAbsoluteLogUriByType(nowAt, Nginx.LOG_TYPE_JSON)\n      let survivalAtRawLogUri = Nginx.getAbsoluteLogUriByType(nowAt, Nginx.LOG_TYPE_RAW)\n      if (isCloseAll === false) {\n        survivalSet.add(survivalAtLogUri)\n        survivalSet.add(survivalAtRawLogUri)\n      }\n    }\n\n    let needCloseLogUriSet = new Set()\n    // 获得所有过期uri key\n    for (let testLogFileUri of jsonWriteStreamPool.keys()) {\n      if (survivalSet.has(testLogFileUri) === false) {\n        needCloseLogUriSet.add(testLogFileUri)\n      }\n    }\n    // 依次关闭\n    for (let closeLogUri of needCloseLogUriSet) {\n      let needCloseStream = jsonWriteStreamPool.get(closeLogUri)\n      jsonWriteStreamPool.delete(closeLogUri)\n      needCloseStream.end()\n    }\n\n    // 重复一次\n    needCloseLogUriSet.clear()\n    for (let testLogFileUri of rawLogWriteStreamPool.keys()) {\n      if (survivalSet.has(testLogFileUri) === false) {\n        needCloseLogUriSet.add(testLogFileUri)\n      }\n    }\n    for (let closeLogUri of needCloseLogUriSet) {\n      let needCloseStream = rawLogWriteStreamPool.get(closeLogUri)\n      rawLogWriteStreamPool.delete(closeLogUri)\n      needCloseStream.end()\n    }\n\n    return true\n  }\n\n  /**\n               * 获取项目列表\n               * @returns {object}\n               */\n  async getProjectMap() {\n    let projectList = await MProject.getList()\n    let projectMap = {}\n    for (let project of projectList) {\n      projectMap[project.project_name] = {\n        id: project.id,\n        rate: project.rate\n      }\n    }\n    this.log('项目列表获取成功 =>', projectMap)\n    return projectMap\n  }\n\n  /**\n               * 解析日志记录所在的时间戳, 取日志时间作为时间戳, 若日志时间不规范, 则返回0\n               * 客户端时间不可信, 故直接忽略, 以日志时间为准\n               * @param {String} data\n               * @return {Number}\n               */\n  parseLogCreateAt(data) {\n    //this.log('parseLogCreateAt data ', data);\n    let nowAt = moment().unix()\n    if (_.isString(data) === false) {\n      return nowAt\n    }\n    const info = data.split('\\t')\n    let url = _.get(info, [15], '')\n    //this.log('parseLogCreateAt url ', url);\n    let parts = url.split(' ');\n    if(parts.length>1){\n      url = parts[1];\n    }\n    //this.log('parseLogCreateAt url ', url);\n    const urlQS = queryString.parseUrl(url)\n    let record = _.get(urlQS, ['query', 'd'], '{}')\n    //this.log('parseLogCreateAt record ', record);\n    try {\n      record = JSON.parse(record)\n    } catch (err) {\n      return nowAt\n    }\n    if (_.has(record, ['pub'])) {\n      // common是新sdk的字段值, pub是旧值, 这里做下兼容\n      record.common = record.pub\n    }\n    //this.log('parseLogCreateAt info[[0]', info[0]);\n    let logAtMoment = moment(info[0], moment.ISO_8601);\n    //this.log('logAtMoment', logAtMoment);\n    let logAt = 0\n    if (moment.isMoment(logAtMoment) && logAtMoment.isValid()) {\n      logAt = logAtMoment.unix();\n    } else {\n      this.log(`无法解析日志记录时间 => ${info[0]}, 自动跳过`)\n    }\n    return logAt\n  }\n\n  /**\n       * 将日志解析为标准格式, 解析失败返回null\n       * @param {string} data\n       * @param {object} projectMap code => project_id格式的项目字典\n       * @returns {object|null}\n       */\n  async parseLog(data, projectMap) {\n    const info = data.split('\\t')\n    this.log('parseNginxLog info ', info)\n    let url = _.get(info, [15], '')\n    this.log('parseNginxLog url ', url)\n    const urlQS = queryString.parseUrl(url)\n    this.log('parseNginxLog urlQS ', urlQS)\n    let record = _.get(urlQS, ['query', 'd'], '[]')\n    this.log('parseNginxLog record', record);\n    try {\n      record = JSON.parse(record);\n    } catch (err) {\n      this.log('==== 打点数据异常 ====', err)\n      return null\n    }\n    this.log('parseNginxLog record ', record)\n    // 记录日志md5\n    record.md5 = md5(data)\n    if (_.has(record, ['pub'])) {\n      // common是新sdk的字段值, pub是旧值, 这里做下兼容\n      record.common = record.pub\n    }\n    //  过滤不合法的打点数据\n    //  记录为空, 没有pid, pid没有注册过, 都是非法数据\n    if (_.isEmpty(record)) {\n      this.log('record 不规范 =>', record)\n      return null\n    }\n    if (_.has(record, ['common', 'pid']) === false) {\n      this.log('pid 不存在 =>', record)\n      return null\n    }\n    if (record.common.pid === '') {\n      this.log('记录中没有record.common.pid  =>', record.common.pid)\n      return null\n    }\n    if (_.has(projectMap, [record.common.pid]) === false) {\n      this.log('项目尚未注册projectMap[record.common.pid] =>', projectMap, record.common.pid)\n      return null\n    }\n    record.project_id = projectMap[record.common.pid]['id']\n    record.project_name = record.common.pid\n    let currentAt = moment().unix()\n    let logCreateAt = this.parseLogCreateAt(data)\n    // 如果入库时间距离现在大于10天, 则认为是不合法数据(kafka中只会存7天以内的数据, 入库时间超出上下10天, 都不正常)\n    if (Math.abs(logCreateAt - currentAt) > 864000) {\n      this.log('入库时间超出阈值, 自动跳过 finialTimeAt=>', logCreateAt)\n      return null\n    }\n    record.time = logCreateAt\n\n    // 新版中info[17] 里有%号, 是非法字符, 需要提前处理\n    let safeInfo16 = _.replace(info[16], '%', '')\n    //this.log('info[16]',info[16]);\n    this.log('ua',safeInfo16);\n    \n    record.ua = parser(decodeURIComponent(safeInfo16))\n    this.log('record.ua',record.ua);\n    // 兼容处理saas系统打点UA问题, nwjs低版本下获取不到chrome的版本, 解析拿到的为chromium_ver\n    let browserVersion = _.get(record.ua, ['browser', 'version'], '')\n    if (browserVersion === 'chromium_ver') {\n      _.set(record.ua, ['browser', 'version'], '50.0.2661.102')\n      _.set(record.ua, ['browser', 'major'], '50')\n    }\n\n    // 解析IP地址，映射成城市\n    record.ip = info[3] || info[4];\n    if(record.ip==='127.0.0.1')\n      record.ip='59.109.146.215';\n    //this.log('info[3]',info[3]);\n    //this.log('info[4]',info[4]);\n    //this.log('record.ip',record.ip);\n    const location = await Util.ip2Locate(record.ip)\n    record.country = location.country\n    record.province = location.province\n    record.city = location.city\n    return record\n  }\n}\n\nexport default SaveLogBase\n"],"file":"base.js"}