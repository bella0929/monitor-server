{"version":3,"sources":["monitor.js"],"names":["ParseBase","moment","_","MCommon","MMonitor","Util","DATE_FORMAT","COUNT_BY_MINUTE_DATE_FORMAT","DATABASE_BY_MINUTE","BaseTableName","ParseMonitor","signature","COMMAND_ARGUMENT_BY_MINUTE","description","isLegalRecord","record","type","get","md5","isEmpty","errorType","errorTypeStr","errorName","ERROR_TYPE_页面加载异常","ERROR_TYPE_启动异常","ERROR_TYPE_登录异常","ERROR_TYPE_NODE报错","ERROR_TYPE_JS异常","ERROR_TYPE_自定义异常","processRecordAndCacheInProjectMap","projectId","visitAt","httpCode","duringMsE","duringMs","requestSizeB","responseSizeB","url","country","province","city","extraData","length","slice","parseInt","isFinite","visitAtTime","unix","format","monitorRecord","visitAtMap","Map","monitorRecordList","projectMap","has","push","set","log","save2DB","totalRecordCount","getRecordCountInProjectMap","processRecordCount","successSaveCount","monitorMap","tenMinutesAgoAt","oneMinuteLaterAt","processTableName","getTableName","rawMonitorList","getRecordListInRange","uniqueSet","Set","rawRecord","log_at","logAt","uniqueKey","add","sqlParams","error_type","error_name","http_code","during_ms","request_size_b","response_size_b","sqlRecord","handleEmptyData","monitorParams","tableName","splitBy","SPLIT_BY","MONTH","select","where","monitorExtParams","datas","ext_json","JSON","stringify","key","monitorRes","insertInto","monitor_ext_id","isSuccess","replaceInto","reportProcess","totalCount"],"mappings":"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","sourcesContent":["import ParseBase from '~/src/commands/parse/base'\nimport moment from 'moment'\nimport _ from 'lodash'\nimport MCommon from '~/src/model/parse/common'\nimport MMonitor from '~/src/model/parse/monitor'\nimport Util from '~/src/library/utils/modules/util'\n\nimport DATE_FORMAT from '~/src/constants/date_format'\n\nconst COUNT_BY_MINUTE_DATE_FORMAT = DATE_FORMAT.DATABASE_BY_MINUTE\n\nconst BaseTableName = 't_o_monitor'\nclass ParseMonitor extends ParseBase {\n  static get signature() {\n    return `\n      Parse:Monitor\n      {startAtYmdHi:日志扫描范围上限${DATE_FORMAT.COMMAND_ARGUMENT_BY_MINUTE}格式}\n      {endAtYmdHi:日志扫描范围下限${DATE_FORMAT.COMMAND_ARGUMENT_BY_MINUTE}格式}\n    `\n  }\n\n  static get description() {\n    return '[按分钟] 解析nginx日志, 分析Monitor'\n  }\n\n  /**\n   * 判断该条记录是不是monitor记录\n   * @param {Object} record\n   * @return {Boolean}\n   */\n  isLegalRecord(record) {\n    let type = _.get(record, ['type'], '')\n    let md5 = _.get(record, ['md5'], '')\n\n    if (type !== 'error') {\n      return false\n    }\n    if (_.isEmpty(md5)) {\n      return false\n    }\n    // 对于旧的打点数据, 忽略处理\n    let errorType = _.get(record, ['code'], '')\n    let errorTypeStr = `${errorType}`\n    let errorName = _.get(record, ['detail', 'error_no'], '')\n    if (\n      (\n        errorTypeStr === MMonitor.ERROR_TYPE_页面加载异常 ||\n        errorTypeStr === MMonitor.ERROR_TYPE_启动异常 ||\n        errorTypeStr === MMonitor.ERROR_TYPE_登录异常 ||\n        errorTypeStr === MMonitor.ERROR_TYPE_NODE报错 ||\n        errorTypeStr === MMonitor.ERROR_TYPE_JS异常 ||\n        errorTypeStr === MMonitor.ERROR_TYPE_自定义异常\n      ) && !errorName\n    ) {\n      return false\n    }\n    return true\n  }\n\n  /**\n   * 更新记录\n   */\n  async processRecordAndCacheInProjectMap(record) {\n    let projectId = _.get(record, ['project_id'], 0)\n    let visitAt = _.get(record, ['time'], 0)\n    let errorType = _.get(record, ['code'], '')\n    let errorName = _.get(record, ['detail', 'error_no'], '')\n    let httpCode = _.get(record, ['detail', 'http_code'], 0)\n    let duringMsE = _.get(record, ['detail', 'durning_ms'], 0)\n    let duringMs = _.get(record, ['detail', 'during_ms'], duringMsE)\n    let requestSizeB = _.get(record, ['detail', 'request_size_b'], 0)\n    let responseSizeB = _.get(record, ['detail', 'response_size_b'], 0)\n    let url = _.get(record, ['detail', 'url'], '')\n    let country = _.get(record, ['country'], '')\n    let province = _.get(record, ['province'], '')\n    let city = _.get(record, ['city'], '')\n    let md5 = _.get(record, ['md5'], '')\n    let extraData = _.get(record, ['extra'], {})\n\n    url = url + '' // 强制转换为字符串\n    if (url.length > 200) {\n      // url最长是200个字符\n      url = url.slice(0, 200)\n    }\n\n    // 对error_name长度做限制\n    errorName = errorName + ''\n    if (errorName.length > 254) {\n      errorName = errorName.slice(0, 254)\n    }\n\n    // 处理参数\n    httpCode = parseInt(httpCode)\n    if (_.isFinite(httpCode) === false) {\n      httpCode = 0\n    }\n\n    duringMs = parseInt(duringMs)\n    if (_.isFinite(duringMs) === false) {\n      duringMs = 0\n    }\n\n    requestSizeB = parseInt(requestSizeB)\n    if (_.isFinite(requestSizeB) === false) {\n      requestSizeB = 0\n    }\n\n    responseSizeB = parseInt(responseSizeB)\n    if (_.isFinite(responseSizeB) === false) {\n      responseSizeB = 0\n    }\n\n    let visitAtTime = moment.unix(visitAt).format(COUNT_BY_MINUTE_DATE_FORMAT)\n\n    let monitorRecord = {\n      visitAt,\n      errorType,\n      errorName,\n      httpCode,\n      duringMs,\n      requestSizeB,\n      responseSizeB,\n      url,\n      country,\n      province,\n      city,\n      md5,\n      extraData\n    }\n\n    let visitAtMap = new Map()\n    let monitorRecordList = []\n    if (this.projectMap.has(projectId)) {\n      visitAtMap = this.projectMap.get(projectId)\n      if (visitAtMap.has(visitAtTime)) {\n        monitorRecordList = visitAtMap.get(visitAtTime)\n      }\n    }\n    monitorRecordList.push(monitorRecord);\n    visitAtMap.set(visitAtTime, monitorRecordList);\n    this.log('===visitAtMap===',visitAtMap);\n    this.projectMap.set(projectId, visitAtMap);\n    return true\n  }\n\n  async save2DB() {\n    let totalRecordCount = this.getRecordCountInProjectMap()\n    let processRecordCount = 0\n    let successSaveCount = 0\n    for (let [projectId, visitAtMap] of this.projectMap) {\n      for (let [visitAtTime, monitorMap] of visitAtMap) {\n        let visitAt = moment(visitAtTime, DATE_FORMAT.DATABASE_BY_MINUTE).unix()\n        let tenMinutesAgoAt = visitAt - 10 * 60\n        let oneMinuteLaterAt = visitAt + 60\n        let processTableName = MMonitor.getTableName(projectId, visitAt)\n        let rawMonitorList = await MMonitor.getRecordListInRange(projectId, tenMinutesAgoAt, oneMinuteLaterAt)\n        let uniqueSet = new Set()\n        for (let rawRecord of rawMonitorList) {\n          const { log_at: logAt, md5 } = rawRecord\n          const uniqueKey = logAt + '' + md5\n          uniqueSet.add(uniqueKey)\n        }\n        for (let monitorRecord of monitorMap) {\n          let {\n            visitAt,\n            extraData,\n            md5\n          } = monitorRecord\n          const sqlParams = {\n            error_type: monitorRecord.errorType,\n            error_name: monitorRecord.errorName,\n            http_code: monitorRecord.httpCode,\n            during_ms: monitorRecord.duringMs,\n            request_size_b: monitorRecord.requestSizeB,\n            response_size_b: monitorRecord.responseSizeB,\n            url: monitorRecord.url,\n            country: monitorRecord.country,\n            province: monitorRecord.province,\n            city: monitorRecord.city,\n            md5: monitorRecord.md5,\n            log_at: visitAt\n          }\n          // 对接收到的参数做进一步校验，因为数据库里面的类型与传过来的类型不一致\n          // 比如http_code在一些情况下传来的是空字符串，数据库中存放的是int型\n          const sqlRecord = Util.handleEmptyData(sqlParams)\n\n          // monitor查询参数\n          let monitorParams = {\n            projectId: projectId,\n            tableName: BaseTableName,\n            splitBy: MCommon.SPLIT_BY.MONTH,\n            select: 'monitor_ext_id',\n            where: {\n              log_at: visitAt,\n              md5: monitorRecord.md5\n            }\n          }\n          this.log('===monitorParams===',monitorParams);\n          // monitor_ext查询更新参数\n          let monitorExtParams = {\n            projectId: projectId,\n            tableName: 't_o_monitor_ext',\n            datas: {\n              ext_json: JSON.stringify(extraData)\n            },\n            splitBy: MCommon.SPLIT_BY.MONTH\n          }\n          this.log('===monitorExtParams===',monitorExtParams);\n          const key = visitAt + '' + md5\n          if (uniqueSet.has(key) === false) {\n            let monitorRes = await MCommon.insertInto(monitorExtParams)\n            sqlRecord.monitor_ext_id = monitorRes[0]\n            monitorParams.datas = sqlRecord\n            let isSuccess = await MCommon.replaceInto(monitorParams)\n            if (isSuccess) {\n              successSaveCount = successSaveCount + 1\n            }\n          }\n          processRecordCount = processRecordCount + 1\n          this.reportProcess(processRecordCount, successSaveCount, totalRecordCount, processTableName)\n        }\n      }\n    }\n    return { totalRecordCount, processRecordCount, successSaveCount }\n  }\n  /**\n   * 统计 projectmonitorMap 中的记录总数\n   */\n  getRecordCountInProjectMap() {\n    let totalCount = 0\n    for (let [projectId, visitAtMap] of this.projectMap) {\n      for (let [visitAtTime, monitorMap] of visitAtMap) {\n        for (let monitorRecord of monitorMap) {\n          totalCount = totalCount + 1\n        }\n      }\n    }\n    return totalCount\n  }\n}\n\nexport default ParseMonitor\n"],"file":"monitor.js"}