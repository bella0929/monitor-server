{"version":3,"sources":["user_first_login_at.js"],"names":["ParseBase","_","MUserFirstLoginAt","DATE_FORMAT","UserFirstLoginAt","signature","COMMAND_ARGUMENT_BY_MINUTE","description","isLegalRecord","record","ucid","get","isLegal","length","processRecordAndCacheInProjectMap","projectId","country","province","city","firstVisitAt","dbRecordMap","Map","dbRecord","project_id","first_visit_at","projectMap","has","existRecord","set","save2DB","totalRecordCount","getRecordCountInProjectMap","processRecordCount","successSaveCount","ucidList","keys","push","existUcidSet","filterExistUcidSetInDb","isSuccess","replaceInto","reportProcess","totalCount"],"mappings":"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","sourcesContent":["\nimport ParseBase from '~/src/commands/parse/base'\nimport _ from 'lodash'\nimport MUserFirstLoginAt from '~/src/model/parse/user_first_login_at'\nimport DATE_FORMAT from '~/src/constants/date_format'\n\n/**\n * 解析用户点击情况\n */\nclass UserFirstLoginAt extends ParseBase {\n  static get signature () {\n    return `\n     Parse:UserFirstLoginAt \n     {startAtYmdHi:日志扫描范围上限${DATE_FORMAT.COMMAND_ARGUMENT_BY_MINUTE}格式}\n     {endAtYmdHi:日志扫描范围下限${DATE_FORMAT.COMMAND_ARGUMENT_BY_MINUTE}格式}\n     `\n  }\n\n  static get description () {\n    return '[按天] 解析nginx日志, 记录用户首次登陆时间'\n  }\n\n  /**\n     * 判断该条记录是不是需要解析的记录\n     * @param {Object} record\n     * @return {Boolean}\n     */\n  isLegalRecord (record) {\n    let ucid = _.get(record, ['common', 'ucid'], '')\n    ucid = `${ucid}`\n    let isLegal = ucid.length > 0 && ucid.length <= 20\n    return isLegal\n  }\n\n  /**\n   * 更新记录\n   */\n  async processRecordAndCacheInProjectMap (record) {\n    let ucid = _.get(record, ['common', 'ucid'], '')\n    let projectId = _.get(record, ['project_id'], '')\n\n    let country = _.get(record, ['country'], '')\n    let province = _.get(record, ['province'], '')\n    let city = _.get(record, ['city'], '')\n\n    let firstVisitAt = _.get(record, ['time'], 0)\n\n    let dbRecordMap = new Map()\n    let dbRecord = {\n      ucid,\n      project_id: projectId,\n      country,\n      province,\n      city,\n      first_visit_at: firstVisitAt\n    }\n    if (this.projectMap.has(projectId)) {\n      dbRecordMap = this.projectMap.get(projectId)\n      if (dbRecordMap.has(ucid)) {\n        let existRecord = dbRecordMap.get(ucid)\n        if (existRecord['first_visit_at'] > dbRecord['first_visit_at']) {\n          dbRecordMap.set(ucid, dbRecord)\n        }\n      } else {\n        dbRecordMap.set(ucid, dbRecord)\n      }\n    }\n    this.projectMap.set(projectId, dbRecordMap)\n    return true\n  }\n\n  /**\n   * 将数据同步到数据库中\n   */\n  async save2DB () {\n    let totalRecordCount = this.getRecordCountInProjectMap()\n    let processRecordCount = 0\n    let successSaveCount = 0\n    for (let [projectId, dbRecordMap] of this.projectMap) {\n      let ucidList = []\n      for (let ucid of dbRecordMap.keys()) {\n        ucidList.push(ucid)\n      }\n      let existUcidSet = await MUserFirstLoginAt.filterExistUcidSetInDb(projectId, ucidList)\n\n      for (let [ucid, dbRecord] of dbRecordMap) {\n        let {\n          project_id: projectId,\n          country,\n          province,\n          city,\n          first_visit_at: firstVisitAt\n        } = dbRecord\n\n        let isSuccess = false\n        ucid = `${ucid}` // 专门转成string\n        if (existUcidSet.has(ucid) === false) {\n          // 只有ucid不存在的时候, 才需要插入\n          isSuccess = await MUserFirstLoginAt.replaceInto(projectId, ucid, firstVisitAt, country, province, city)\n        }\n        processRecordCount = processRecordCount + 1\n        if (isSuccess) {\n          successSaveCount = successSaveCount + 1\n        }\n        this.reportProcess(processRecordCount, successSaveCount, totalRecordCount)\n      }\n    }\n    return { totalRecordCount, processRecordCount, successSaveCount }\n  }\n\n  /**\n   * 统计 projectUvMap 中的记录总数\n   */\n  getRecordCountInProjectMap () {\n    let totalCount = 0\n    for (let [projectId, dbRecordMap] of this.projectMap) {\n      for (let [ucid, dbRecord] of dbRecordMap) {\n        totalCount = totalCount + 1\n      }\n    }\n    return totalCount\n  }\n}\n\nexport default UserFirstLoginAt\n"],"file":"user_first_login_at.js"}