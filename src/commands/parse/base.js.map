{"version":3,"sources":["base.js"],"names":["fs","Base","readLine","moment","Nginx","DATE_FORMAT","Alert","AlarmConfig","ParseBase","constructor","projectMap","Map","startAtMoment","endAtMoment","DATE_FORMAT_ARGUMENTS","COMMAND_ARGUMENT_BY_MINUTE","DATE_FORMAT_DISPLAY","execute","args","options","startAtYmdHi","endAtYmdHi","isArgumentsLegal","warn","sendMessage","WATCH_UCID_LIST_DEFAULT","name","log","format","startAt","unix","endAt","parseLog","totalRecordCount","processRecordCount","successSaveCount","save2DB","isMoment","isValid","message","that","currentAt","currentAtMoment","absoluteLogUri","getAbsoluteLogUriByType","LOG_TYPE_JSON","logUri","existsSync","Promise","resolve","reject","onDataReceive","data","next","record","JSON","parse","isLegalRecord","processRecordAndCacheInProjectMap","onReadFinish","createReadStream","newline","autoNext","encoding","go","mustBeOverride","getRecordCountInProjectMap","reportProcess","tableName","insertTable","totalCount","process","exit"],"mappings":"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","sourcesContent":["import fs from 'fs'\nimport Base from '~/src/commands/base'\nimport { readLine } from 'lei-stream'\nimport moment from 'moment'\nimport Nginx from '~/src/library/nginx'\nimport DATE_FORMAT from '~/src/constants/date_format'\n\nimport Alert from '~/src/library/utils/modules/alert'\nimport AlarmConfig from '~/src/configs/alarm'\n\n/**\n * 提供框架方法, 方便编写处理函数\n */\nclass ParseBase extends Base {\n  constructor() {\n    super()\n\n    // 初始化属性(目前只能在constructor里注册属性)\n\n    // 统一按项目进行统计\n    this.projectMap = new Map()\n    this.startAtMoment = null\n    this.endAtMoment = null\n\n    this.DATE_FORMAT_ARGUMENTS = DATE_FORMAT.COMMAND_ARGUMENT_BY_MINUTE\n    this.DATE_FORMAT_DISPLAY = DATE_FORMAT.COMMAND_ARGUMENT_BY_MINUTE\n  }\n\n  async execute (args, options) {\n    let { startAtYmdHi, endAtYmdHi } = args\n    if (this.isArgumentsLegal(args, options) === false) {\n      this.warn('参数不正确, 自动退出')\n      Alert.sendMessage(AlarmConfig.WATCH_UCID_LIST_DEFAULT, `${this.constructor.name}参数不正确, 自动退出`)\n      return false\n    }\n    this.startAtMoment = moment(startAtYmdHi, this.DATE_FORMAT_ARGUMENTS)\n    this.endAtMoment = moment(endAtYmdHi, this.DATE_FORMAT_ARGUMENTS)\n    this.log(`开始分析${this.startAtMoment.format(this.DATE_FORMAT_DISPLAY) + ':00'}~${this.endAtMoment.format(this.DATE_FORMAT_DISPLAY) + ':59'}范围内的记录`)\n    let startAt = this.startAtMoment.unix()\n    let endAt = this.endAtMoment.unix()\n    await this.parseLog(startAt, endAt)\n    this.log('全部数据处理完毕, 存入数据库中')\n    let { totalRecordCount, processRecordCount, successSaveCount } = await this.save2DB()\n    this.log(`${this.startAtMoment.format(this.DATE_FORMAT_DISPLAY) + ':00'}~${this.endAtMoment.format(this.DATE_FORMAT_DISPLAY) + ':59'}范围内日志录入完毕, 共记录数据${processRecordCount}/${totalRecordCount}条, 入库成功${successSaveCount}条`)\n  }\n\n  /**\n   * [可覆盖]检查请求参数, 默认检查传入的时间范围是否正确, 如果有自定义需求可以在子类中进行覆盖\n   * @param {*} args\n   * @param {*} options\n   * @return {Boolean}\n   */\n  isArgumentsLegal (args, options) {\n    let { startAtYmdHi, endAtYmdHi } = args\n\n    let startAtMoment = moment(startAtYmdHi, DATE_FORMAT.COMMAND_ARGUMENT_BY_MINUTE)\n    let endAtMoment = moment(endAtYmdHi, DATE_FORMAT.COMMAND_ARGUMENT_BY_MINUTE)\n    if (moment.isMoment(startAtMoment) === false || startAtMoment.isValid() === false) {\n      let message = `startAtYmdHi参数不正确 => ${startAtYmdHi}`\n      this.warn(message)\n      Alert.sendMessage(AlarmConfig.WATCH_UCID_LIST_DEFAULT, message)\n      return false\n    }\n    if (moment.isMoment(endAtMoment) === false || endAtMoment.isValid() === false) {\n      let message = `endAtYmdHi参数不正确 =>${endAtYmdHi}`\n      this.warn(message)\n      Alert.sendMessage(AlarmConfig.WATCH_UCID_LIST_DEFAULT, message)\n      return false\n    }\n    if (startAtMoment.unix() > endAtMoment.unix()) {\n      let message = `结束时间小于开始时间 :  ${startAtYmdHi} => ${startAtMoment.unix()} endAtYmdHi =>  ${endAtMoment.unix()}`\n      this.warn(message)\n      Alert.sendMessage(AlarmConfig.WATCH_UCID_LIST_DEFAULT, message)\n      return false\n    }\n    return true\n  }\n\n  /**\n   * 解析指定时间范围内的日志记录, 并录入到数据库中\n   * @param {*} startAt\n   * @param {*} endAt\n   * @return null\n   */\n  async parseLog (startAt, endAt) {\n    let that = this\n    for (let currentAt = startAt; currentAt <= endAt; currentAt = currentAt + 60) {\n      let currentAtMoment = moment.unix(currentAt)\n      let absoluteLogUri = Nginx.getAbsoluteLogUriByType(currentAt, Nginx.LOG_TYPE_JSON)\n      that.log(`开始处理${currentAtMoment.format(that.DATE_FORMAT_DISPLAY)}的记录, log文件地址 => ${absoluteLogUri}`)\n      let logUri = Nginx.getAbsoluteLogUriByType(currentAt, Nginx.LOG_TYPE_JSON)\n      if (fs.existsSync(logUri) === false) {\n        that.log(`log文件不存在, 自动跳过 => ${absoluteLogUri}`)\n        continue\n      }\n      // 确保按文件顺序逐行读写日志\n      await new Promise(function (resolve, reject) {\n        let onDataReceive = async (data, next) => {\n          let record = JSON.parse(data)\n          that.log('parse record ',record);\n          if (that.isLegalRecord(record)) {\n            that.processRecordAndCacheInProjectMap(record)\n          }\n          next()\n        }\n        let onReadFinish = () => {\n          resolve()\n        }\n        readLine(fs.createReadStream(logUri), {\n          // 换行符，默认\\n\n          newline: '\\n',\n          // 是否自动读取下一行，默认false\n          autoNext: false,\n          // 编码器，可以为函数或字符串（内置编码器：json，base64），默认null\n          encoding: null\n        }).go(onDataReceive, onReadFinish)\n      })\n      that.log('处理完毕')\n    }\n  }\n\n  /**\n   * [必须覆盖]判断该条记录是不是需要解析的记录\n   * 标准结构 => {\"type\":\"product\",\"code\":10001,\"detail\":{\"duration_ms\":35544},\"extra\":{},\"common\":{\"pid\":\"platfe_saas\",\"uuid\":\"59b979cb-4e2a-4a34-aabf-5240a6794194\",\"ssid\":\"c6a39184-0689-498b-b973-a5c0c9496494\",\"ucid\":1000000026017035,\"timestamp\":1537426981231},\"msg\":\"\",\"project_id\":1,\"time\":1537426981,\"ua\":{\"ua\":\"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/537.36 (@33cd7097eede00b9c4ce59f5cf7d0e7f1eee86d8) Safari/537.36 nw(0.30.5) dtsaas(2.0.11)\",\"browser\":{\"name\":\"Chrome\",\"version\":\"537.36\",\"major\":\"537\"},\"engine\":{\"name\":\"WebKit\",\"version\":\"537.36\"},\"os\":{\"name\":\"Windows\",\"version\":\"7\"},\"device\":{},\"cpu\":{}},\"ip\":\"60.169.167.181\",\"country\":\"中国\",\"province\":\"北京\",\"city\":\"北京\"}\n   * @param {Object} record\n   * @return {Boolean}\n   */\n  isLegalRecord (record) {\n    this.mustBeOverride()\n    // let recordType = get(record, ['type'], '')\n    // let code = get(record, ['code'], '')\n    // let projectId = get(record, ['project_id'], '')\n    // let durationMs = get(record, ['detail', 'duration_ms'], '')\n    // code = parseInt(code)\n    // durationMs = parseInt(durationMs)\n    // projectId = parseInt(projectId)\n    // if (recordType !== LegalRecordType) {\n    //   return false\n    // }\n    // if (isNumber(code) === false) {\n    //   return false\n    // }\n    // if (code !== LegalRecordCode) {\n    //   return false\n    // }\n    // if (isNumber(projectId) === false) {\n    //   return false\n    // }\n    // if (projectId < 0) {\n    //   return false\n    // }\n    // if (isNumber(durationMs) === false) {\n    //   return false\n    // }\n    // if (durationMs > MaxAllowRecordDuringMs) {\n    //   return false\n    // }\n    // if (durationMs < MinAllowRecordDuringMs) {\n    //   return false\n    // }\n    return true\n  }\n\n  /**\n   * [必须覆盖]处理记录, 并将结果缓存在this.ProjectMap中\n   * {\"type\":\"product\",\"code\":10001,\"detail\":{\"duration_ms\":30807},\"extra\":{},\"common\":{\"pid\":\"platfe_saas\",\"uuid\":\"d0511ce2-2482-4f7b-8f11-09ed75004963\",\"ssid\":\"0c11d4b5-b970-419c-b1ac-f1b7922398fc\",\"ucid\":null,\"timestamp\":1537365073569},\"msg\":\"\"}\n   * @param {Object} record\n   */\n  async processRecordAndCacheInProjectMap (record) {\n    this.mustBeOverride()\n    // let projectId = get(record, ['project_id'], 0)\n    // let durationMs = get(record, ['detail', 'duration_ms'], 0)\n    // let country = get(record, ['country'], '')\n    // let province = get(record, ['province'], '')\n    // let city = get(record, ['city'], '')\n    // let recordAt = get(record, ['time'], 0)\n\n    // let countAtTime = moment.unix(recordAt).format(COUNT_BY_HOUR_DATE_FORMAT)\n    // let distributionPath = [country, province, city]\n\n    // let countAtMap = new Map()\n    // let distribution = {}\n    // if (this.projectMap.has(projectId)) {\n    //   countAtMap = this.projectMap.get(projectId)\n    //   if (countAtMap.has(countAtTime)) {\n    //     distribution = countAtMap.get(countAtTime)\n    //     if (has(distribution, distributionPath)) {\n    //       let oldDurationMs = get(distribution, distribution, 0)\n    //       durationMs = durationMs + oldDurationMs\n    //     }\n    //   }\n    // }\n    // set(distribution, distributionPath, durationMs)\n    // countAtMap.set(countAtTime, distribution)\n    // this.projectMap.set(projectId, countAtMap)\n    return true\n  }\n\n  /**\n   * [必须覆盖]将数据同步到数据库中\n   */\n  async save2DB () {\n    this.mustBeOverride()\n    let processRecordCount = 0\n    let successSaveCount = 0\n    let totalRecordCount = this.getRecordCountInProjectMap()\n\n    // 处理的时候调一下这个方法, 专业打印处理进度\n    this.reportProcess(processRecordCount, successSaveCount, totalRecordCount)\n\n    // for (let [projectId, countAtMap] of projectMap) {\n    //   for (let [countAtTime, distribution] of countAtMap) {\n    //     let recordList = MCityDistribution.getFlattenCityRecordListInDistribution(distribution)\n    //     let totalStayMs = 0\n    //     for (let record of recordList) {\n    //       totalStayMs = totalStayMs + record\n    //     }\n\n    //     let totalUv = await MUniqueView.getTotalUv(projectId, countAtTime, COUNT_TYPE_HOUR)\n\n    //     let isSuccess = await replaceAndAutoIncreaseTotalStayMsInUvRecord(projectId, totalStayMs, totalUv, countAtTime, COUNT_TYPE_HOUR, distribution)\n    //     processRecordCount = processRecordCount + 1\n    //     if (isSuccess) {\n    //       successSaveCount = successSaveCount + 1\n    //     }\n    //     if (processRecordCount % 100 === 0) {\n    //       this.log(`当前已处理${processRecordCount}/${totalRecordCount}条记录, 其中, 入库成功${successSaveCount}条`)\n    //     }\n    //   }\n    // }\n    return { totalRecordCount, processRecordCount, successSaveCount }\n  }\n\n  /**\n   * 汇报进度\n   * @param {*} processRecordCount\n   * @param {*} successSaveCount\n   * @param {*} totalRecordCount\n   */\n  reportProcess (processRecordCount, successSaveCount, totalRecordCount, tableName = '') {\n    let insertTable = ''\n    if (tableName) {\n      insertTable = `, 入库${tableName}`\n    }\n    if (processRecordCount % 100 === 0) {\n      this.log(`当前已处理${processRecordCount}/${totalRecordCount}条记录${insertTable}, 已成功${successSaveCount}条`)\n    }\n  }\n\n  /**\n   * [必须覆盖]统计 projectUvMap 中的记录总数\n   */\n  getRecordCountInProjectMap () {\n    this.mustBeOverride()\n    let totalCount = 0\n    // for (let [projectId, countAtMap] of projectMap) {\n    //   for (let [countAtTime, distribution] of countAtMap) {\n    //     totalCount = totalCount + 1\n    //   }\n    // }\n    return totalCount\n  }\n\n  mustBeOverride () {\n    this.warn('注意, 这里有个方法没有覆盖')\n    this.warn('当场退出←_←')\n    process.exit(0)\n  }\n}\n\nexport default ParseBase\n"],"file":"base.js"}