{"version":3,"sources":["saveLog.js"],"names":["Base","moment","DATE_FORMAT","shell","_","env","path","schedule","projectBaseUri","resolve","__dirname","TaskManager","signature","description","handle","args","options","that","scheduleJob","log","execCommand","commandName","argvString","map","arg","join","command","commandStartAtFormated","format","DISPLAY_BY_MILLSECOND","commandStartAtms","valueOf","exec","async","silent","commandFinishAtFormated","commandFinishAtms","during"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,qBAAjB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,WAAP,MAAwB,6BAAxB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,QAAP,MAAqB,eAArB;AAEA,IAAIC,cAAc,GAAGF,IAAI,CAACG,OAAL,CAAaC,SAAb,EAAwB,WAAxB,CAArB,C,CAA0D;;AAC1D,MAAMC,WAAN,SAA0BX,IAA1B,CAA+B;AACT,aAATY,SAAS,GAAI;AACtB,WAAQ;AACZ;AACA,MAFI;AAGD;;AAEqB,aAAXC,WAAW,GAAI;AACxB,WAAO,iBAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACc,QAANC,MAAM,CAAEC,IAAF,EAAQC,OAAR,EAAiB;AAC3B,QAAIC,IAAI,GAAG,IAAX,CAD2B,CAE3B;;AACAV,IAAAA,QAAQ,CAACW,WAAT,CAAqB,iBAArB,EAAwC,YAAY;AAClDD,MAAAA,IAAI,CAACE,GAAL,CAAS,mCAAT;AACAF,MAAAA,IAAI,CAACG,WAAL,CAAiB,eAAjB,EAAkC,EAAlC;AACD,KAHD;AAID;;AAGgB,QAAXA,WAAW,CAAEC,WAAF,EAAeN,IAAI,GAAG,EAAtB,EAA0B;AACzC,QAAIO,UAAU,GAAGP,IAAI,CAACQ,GAAL,CAAUC,GAAD,IAAS;AAAE,aAAQ,IAAGA,GAAI,GAAf;AAAmB,KAAvC,EAAyCC,IAAzC,CAA8C,KAA9C,CAAjB;AACA,QAAIC,OAAO,GAAI,YAAWrB,GAAI,SAAQG,cAAe,gBAAea,WAAY,KAAIC,UAAW,EAA/F;AACA,SAAKH,GAAL,CAAU,WAAUO,OAAQ,EAA5B;AACA,QAAIC,sBAAsB,GAAG1B,MAAM,GAAG2B,MAAT,CAAgB1B,WAAW,CAAC2B,qBAA5B,CAA7B;AACA,QAAIC,gBAAgB,GAAG7B,MAAM,GAAG8B,OAAT,EAAvB;AACA5B,IAAAA,KAAK,CAAC6B,IAAN,CAAWN,OAAX,EAAoB;AAClBO,MAAAA,KAAK,EAAE,IADW;AAElBC,MAAAA,MAAM,EAAE;AAFU,KAApB,EAGG,MAAM;AACP,UAAIC,uBAAuB,GAAGlC,MAAM,GAAG2B,MAAT,CAAgB1B,WAAW,CAAC2B,qBAA5B,CAA9B;AACA,UAAIO,iBAAiB,GAAGnC,MAAM,GAAG8B,OAAT,EAAxB;AACA,UAAIM,MAAM,GAAG,CAACD,iBAAiB,GAAGN,gBAArB,IAAyC,IAAtD;AACA,WAAKX,GAAL,CAAU,GAAEO,OAAQ,cAAaW,MAAO,eAAcV,sBAAuB,cAAaQ,uBAAwB,EAAlH;AACD,KARD;AASD;;AA1C4B;;AA6C/B,eAAexB,WAAf","sourcesContent":["import Base from '~/src/commands/base'\nimport moment from 'moment'\nimport DATE_FORMAT from '~/src/constants/date_format'\nimport shell from 'shelljs'\nimport _ from 'lodash'\nimport env from '~/src/configs/env'\nimport path from 'path'\nimport schedule from 'node-schedule'\n\nlet projectBaseUri = path.resolve(__dirname, '../../../') // 项目所在文件夹\nclass TaskManager extends Base {\n  static get signature () {\n    return `\n     Task:saveLog\n     `\n  }\n\n  static get description () {\n    return '任务调度主进程, 只能启动一次'\n  }\n\n  /**\n   * 在最外层进行一次封装, 方便获得报错信息\n   * @param args\n   * @param options\n   * @returns {Promise<void>}\n   */\n  async handle (args, options) {\n    let that = this\n    // 每分钟的第0秒启动\n    schedule.scheduleJob('0 */1 * * * * *', function () {\n      that.log('registerTaskRepeatPer1Minute 开始执行')\n      that.execCommand('SaveLog:Nginx', []);\n    })\n  }\n\n\n  async execCommand (commandName, args = []) {\n    let argvString = args.map((arg) => { return `'${arg}'` }).join('   ')\n    let command = `NODE_ENV=${env} node ${projectBaseUri}/dist/fee.js ${commandName}  ${argvString}`\n    this.log(`待执行命令=> ${command}`)\n    let commandStartAtFormated = moment().format(DATE_FORMAT.DISPLAY_BY_MILLSECOND)\n    let commandStartAtms = moment().valueOf()\n    shell.exec(command, {\n      async: true,\n      silent: true\n    }, () => {\n      let commandFinishAtFormated = moment().format(DATE_FORMAT.DISPLAY_BY_MILLSECOND)\n      let commandFinishAtms = moment().valueOf()\n      let during = (commandFinishAtms - commandStartAtms) / 1000\n      this.log(`${command}命令执行完毕, 共用时${during}秒, 开始执行时间=> ${commandStartAtFormated}, 执行完毕时间=> ${commandFinishAtFormated}`)\n    })\n  }\n}\n\nexport default TaskManager\n"],"file":"saveLog.js"}