{"version":3,"sources":["manage.js"],"names":["Base","moment","DATE_FORMAT","shell","_","env","Alert","WatchIdList","Util","path","schedule","projectBaseUri","resolve","__dirname","TaskManager","signature","description","handle","args","options","log","closeOtherTaskManager","i","sleep","registerTaskRepeatPer1Minute","registerTaskRepeatPer10Minute","registerTaskRepeatPer1Hour","registerTaskRepeatPer6Hour","getOtherTaskMangerPidList","command","rawCommandOutput","exec","async","silent","rawCommandOutputList","split","taskManagerPidList","commandOutput","trim","replace","pid","parseInt","isNumber","process","push","kill","e","message","length","alertMessage","JSON","stringify","warn","sendMessage","WATCH_UCID_LIST_DEFAULT","exit","that","scheduleJob","nowByMinute","format","COMMAND_ARGUMENT_BY_MINUTE","twoMinuteAgoByMinute","subtract","UNIT","MINUTE","threeMinuteAgoByMinute","fourMinuteAgoByMinute","fiveMinuteAgoByMinute","tenMinuteAgoByMinute","execCommand","dispatchParseCommand","nowByHour","COMMAND_ARGUMENT_BY_HOUR","oneHourAgoByHour","HOUR","fifteenMinuteAgoByminute","intervalCommandList","intervalCommand","parseCommandList","parseCommand","summaryCommandList","summaryCommand","nowByDay","COMMAND_ARGUMENT_BY_DAY","lastDayStartAtByMinute","DAY","startOf","nowByMonth","COMMAND_ARGUMENT_BY_MONTH","oneMonthAgo","MONTH","oneMonthAgoByMonth","oneDayAgo","oneDayAgoByDay","summaryByMonthCommandList","commandName","startAtStr","endAtStr","dispatchSummaryCommand","countAtStr","summaryType","argvString","map","arg","join","commandStartAtFormated","DISPLAY_BY_MILLSECOND","commandStartAtms","valueOf","commandFinishAtFormated","commandFinishAtms","during"],"mappings":"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","sourcesContent":["import Base from '~/src/commands/base'\nimport moment from 'moment'\nimport DATE_FORMAT from '~/src/constants/date_format'\nimport shell from 'shelljs'\nimport _ from 'lodash'\nimport env from '~/src/configs/env'\nimport Alert from '~/src/library/utils/modules/alert'\nimport WatchIdList from '~/src/configs/alarm'\nimport Util from '~/src/library/utils/modules/util'\nimport path from 'path'\nimport schedule from 'node-schedule'\n\nlet projectBaseUri = path.resolve(__dirname, '../../../') // 项目所在文件夹\nclass TaskManager extends Base {\n  static get signature () {\n    return `\n     Task:Manager\n     `\n  }\n\n  static get description () {\n    return '任务调度主进程, 只能启动一次'\n  }\n\n  /**\n   * 在最外层进行一次封装, 方便获得报错信息\n   * @param args\n   * @param options\n   * @returns {Promise<void>}\n   */\n  async handle (args, options) {\n    this.log('任务主进程启动')\n\n    this.log('关闭其他TaskManager进程')\n    await this.closeOtherTaskManager()\n    this.log('其他TaskManager进程已关闭')\n    this.log('避免当前还有正在运行的save2Log命令, 等待30s')\n    this.log('开始休眠')\n    for (let i = 0; i < 30; i++) {\n      await Util.sleep(1 * 1000)\n      this.log(`休眠中, 第${i + 1}秒`)\n    }\n    this.log('休眠完毕')\n    this.log('开始注册cron任务')\n\n    // 注册定时任务\n    this.log('注册每分钟执行一次的任务')\n    this.registerTaskRepeatPer1Minute()\n    this.log('注册每10分钟执行一次的任务')\n    this.registerTaskRepeatPer10Minute()\n    this.log('注册每1小时执行一次的任务')\n    this.registerTaskRepeatPer1Hour()\n    this.log('注册每6小时执行一次的任务')\n    this.registerTaskRepeatPer6Hour()\n    this.log('全部定时任务注册完毕, 等待执行')\n  }\n\n  async getOtherTaskMangerPidList () {\n    // 命令本身也会被检测出来, sh -c npm run warning && NODE_ENV=development node dist/fee.js \"Task:Manager\"\n    let command = 'ps aS|grep Task:Manager|grep node|grep fee|grep -v grep | grep -v  \\'\"Task:Manager\"\\''\n    this.log(`检测命令 => ${command}`)\n    let rawCommandOutput = shell.exec(command, {\n      async: false,\n      silent: true\n    })\n    let rawCommandOutputList = rawCommandOutput.split('\\n')\n    let taskManagerPidList = []\n    for (let rawCommandOutput of rawCommandOutputList) {\n      let commandOutput = _.trim(rawCommandOutput)\n      commandOutput = _.replace(commandOutput, '\\t', ' ')\n      let pid = commandOutput.split(' ')[0]\n      pid = parseInt(pid)\n      if (_.isNumber(pid) && pid > 0) {\n        if (pid !== process.pid) {\n          taskManagerPidList.push(pid)\n        }\n      }\n    }\n    return taskManagerPidList\n  }\n\n  async closeOtherTaskManager () {\n    let taskManagerPidList = await this.getOtherTaskMangerPidList()\n    this.log('当前process.pid =>', process.pid)\n    this.log(`其余TaskManger进程Pid列表 => `, taskManagerPidList)\n    this.log('执行kill操作, 关闭其余进程')\n    for (let pid of taskManagerPidList) {\n      this.log(`kill pid => ${pid}`)\n      try {\n        process.kill(pid)\n      } catch (e) {\n        let message = `TaskManger进程pid => ${pid} kill失败, 该pid不存在或者没有权限kill`\n        this.log(message)\n      }\n    }\n    this.log('kill操作执行完毕, 休眠3s, 再次检测剩余TaskManager进程数')\n    await Util.sleep(3 * 1000)\n    this.log('开始检测剩余TaskManager进程数')\n    taskManagerPidList = await this.getOtherTaskMangerPidList()\n    if (taskManagerPidList.length === 0) {\n      this.log('剩余TaskManager为空, 可以继续执行任务调度进程')\n      return true\n    }\n    // PM2 3.2.2 有bug, 无法保证TaskManager只有一个实例, 因此需要主动进行检测\n    // 否则, 直接终止该进程\n    let alertMessage = '仍然有残留TaskManager进程, 程序不能保证正常执行, 自动退出. 剩余 TaskManager pid List => ' + JSON.stringify(taskManagerPidList)\n    this.warn(alertMessage)\n    Alert.sendMessage(WatchIdList.WATCH_UCID_LIST_DEFAULT, alertMessage)\n    // 花式自尽\n    process.kill(process.pid)\n    process.exit(1)\n  }\n\n  /**\n   * 每分钟启动一次\n   */\n  async registerTaskRepeatPer1Minute () {\n    let that = this\n    // 每分钟的第0秒启动\n    schedule.scheduleJob('0 */1 * * * * *', function () {\n      that.log('registerTaskRepeatPer1Minute 开始执行')\n\n      let nowByMinute = moment().format(DATE_FORMAT.COMMAND_ARGUMENT_BY_MINUTE)\n      let twoMinuteAgoByMinute = moment().subtract(2, DATE_FORMAT.UNIT.MINUTE).format(DATE_FORMAT.COMMAND_ARGUMENT_BY_MINUTE)\n      let threeMinuteAgoByMinute = moment().subtract(3, DATE_FORMAT.UNIT.MINUTE).format(DATE_FORMAT.COMMAND_ARGUMENT_BY_MINUTE)\n      let fourMinuteAgoByMinute = moment().subtract(4, DATE_FORMAT.UNIT.MINUTE).format(DATE_FORMAT.COMMAND_ARGUMENT_BY_MINUTE)\n      let fiveMinuteAgoByMinute = moment().subtract(5, DATE_FORMAT.UNIT.MINUTE).format(DATE_FORMAT.COMMAND_ARGUMENT_BY_MINUTE)\n      let tenMinuteAgoByMinute = moment().subtract(10, DATE_FORMAT.UNIT.MINUTE).format(DATE_FORMAT.COMMAND_ARGUMENT_BY_MINUTE)\n\n      that.log(`[按分钟] 每分钟启动一次SaveLog `)\n      that.execCommand('SaveLog:Nginx', []);\n      that.log(`[按分钟] 每分钟启动一次WatchDog:Alarm, 监控平台运行情况 `)\n      that.execCommand('WatchDog:Alarm', [])\n\n      that.log(`[按分钟] 解析kafka日志, 分析错误详情`)\n      that.dispatchParseCommand('Parse:Monitor', twoMinuteAgoByMinute, nowByMinute)\n\n      that.log(`[按分钟] 每分钟运行Summary:Error, 分别统计前2,3,4,5,10分钟内的数据`)\n      that.dispatchParseCommand('Summary:Error', twoMinuteAgoByMinute, DATE_FORMAT.UNIT.MINUTE)\n      that.dispatchParseCommand('Summary:Error', threeMinuteAgoByMinute, DATE_FORMAT.UNIT.MINUTE)\n      that.dispatchParseCommand('Summary:Error', fourMinuteAgoByMinute, DATE_FORMAT.UNIT.MINUTE)\n      that.dispatchParseCommand('Summary:Error', fiveMinuteAgoByMinute, DATE_FORMAT.UNIT.MINUTE)\n      that.dispatchParseCommand('Summary:Error', tenMinuteAgoByMinute, DATE_FORMAT.UNIT.MINUTE)\n\n      that.log('registerTaskRepeatPer1Minute 命令分配完毕')\n    })\n  }\n\n  /**\n   * 每10分钟启动一次\n   */\n  async registerTaskRepeatPer10Minute () {\n    let that = this\n    // 每10分钟的第30秒启动\n    schedule.scheduleJob('15 */10 * * * * *', function () {\n      that.log('registerTaskRepeatPer10Minute 开始执行')\n\n      let nowByHour = moment().format(DATE_FORMAT.COMMAND_ARGUMENT_BY_HOUR)\n      let nowByMinute = moment().format(DATE_FORMAT.COMMAND_ARGUMENT_BY_MINUTE)\n\n      let oneHourAgoByHour = moment().subtract(1, DATE_FORMAT.UNIT.HOUR).format(DATE_FORMAT.COMMAND_ARGUMENT_BY_HOUR)\n\n      let fifteenMinuteAgoByminute = moment().subtract(15, DATE_FORMAT.UNIT.MINUTE).format(DATE_FORMAT.COMMAND_ARGUMENT_BY_MINUTE)\n\n      // 周期性执行命令\n      let intervalCommandList = [\n        'CreateCache:UpdatePerOneMinute'\n      ]\n      for (let intervalCommand of intervalCommandList) {\n        // 周期性执行命令\n        that.execCommand(intervalCommand)\n      }\n\n      let parseCommandList = [\n        'Parse:UV',\n        'Parse:TimeOnSiteByHour',\n        'Parse:Performance',\n        'Parse:Monitor'\n      ]\n      for (let parseCommand of parseCommandList) {\n        // 解析最近15分钟内的数据\n        that.dispatchParseCommand(parseCommand, fifteenMinuteAgoByminute, nowByMinute)\n      }\n\n      // 汇总命令\n      let summaryCommandList = [\n        'Summary:UV',\n        'Summary:NewUser',\n        'Summary:Performance',\n        'Summary:Error'\n      ]\n      for (let summaryCommand of summaryCommandList) {\n        // 当前小时\n        that.dispatchParseCommand(summaryCommand, nowByHour, DATE_FORMAT.UNIT.HOUR)\n        // 一小时前\n        that.dispatchParseCommand(summaryCommand, oneHourAgoByHour, DATE_FORMAT.UNIT.HOUR)\n      }\n\n      that.log('registerTaskRepeatPer10Minute 命令分配完毕')\n    })\n  }\n\n  /**\n   * 每小时启动一次\n   */\n  async registerTaskRepeatPer1Hour () {\n    let that = this\n    // 每小时15分30秒启动\n    schedule.scheduleJob('30 15 * * * * *', function () {\n      that.log('registerTaskRepeatPer1Hour 开始执行')\n\n      let nowByDay = moment().format(DATE_FORMAT.COMMAND_ARGUMENT_BY_DAY)\n      let nowByMinute = moment().format(DATE_FORMAT.COMMAND_ARGUMENT_BY_MINUTE)\n\n      let lastDayStartAtByMinute = moment().subtract(1, DATE_FORMAT.UNIT.DAY).startOf(DATE_FORMAT.UNIT.DAY).format(DATE_FORMAT.COMMAND_ARGUMENT_BY_MINUTE)\n      \n      // 解析命令\n      let parseCommandList = [\n        'Parse:Device',\n        'Parse:MenuClick',\n        'Parse:UserFirstLoginAt'\n      ]\n      for (let parseCommand of parseCommandList) {\n        // 解析昨天到今天的数据\n        that.dispatchParseCommand(parseCommand, lastDayStartAtByMinute, nowByMinute)\n      }\n\n      // 汇总命令\n      let summaryCommandList = [\n        'Summary:UV',\n        'Summary:NewUser',\n        'Summary:Performance',\n        'Summary:Error',\n        'Summary:TimeOnSite'\n      ]\n      for (let summaryCommand of summaryCommandList) {\n        // 当日数据\n        that.dispatchParseCommand(summaryCommand, nowByDay, DATE_FORMAT.UNIT.DAY)\n      }\n\n      that.log('registerTaskRepeatPer1Hour 命令分配完毕')\n    })\n  }\n\n  /**\n   * 每6小时启动一次\n   */\n  async registerTaskRepeatPer6Hour () {\n    let that = this\n    // 每过6小时, 在35分45秒启动\n    schedule.scheduleJob('45 35 */6 * * * *', function () {\n      that.log('registerTaskRepeatPer6Hour 开始执行')\n      let nowByMonth = moment().format(DATE_FORMAT.COMMAND_ARGUMENT_BY_MONTH)\n\n      let oneMonthAgo = moment().subtract(1, DATE_FORMAT.UNIT.MONTH)\n      let oneMonthAgoByMonth = oneMonthAgo.format(DATE_FORMAT.COMMAND_ARGUMENT_BY_MONTH)\n\n      let oneDayAgo = moment().subtract(1, DATE_FORMAT.UNIT.DAY)\n      let oneDayAgoByDay = oneDayAgo.format(DATE_FORMAT.COMMAND_ARGUMENT_BY_DAY)\n\n      // 汇总命令-昨日数据\n      let summaryCommandList = [\n        'Summary:UV',\n        'Summary:NewUser',\n        'Summary:Performance',\n        'Summary:Error',\n        'Summary:TimeOnSite'\n      ]\n      for (let summaryCommand of summaryCommandList) {\n        // 当日数据\n        that.dispatchParseCommand(summaryCommand, oneDayAgoByDay, DATE_FORMAT.UNIT.DAY)\n      }\n\n      // 汇总命令-按月统计\n      let summaryByMonthCommandList = [\n        'Summary:UV',\n        'Summary:NewUser',\n        'Summary:Performance',\n        'Summary:TimeOnSite',\n\n        'Summary:SystemBrowser',\n        'Summary:SystemDevice',\n        'Summary:SystemOS'\n        // 'Summary:SystemRuntimeVersion'\n      ]\n      for (let summaryCommand of summaryByMonthCommandList) {\n        // 当月数据\n        that.dispatchParseCommand(summaryCommand, nowByMonth, DATE_FORMAT.UNIT.MONTH)\n        // 上月数据\n        that.dispatchParseCommand(summaryCommand, oneMonthAgoByMonth, DATE_FORMAT.UNIT.MONTH)\n      }\n\n      // 清理历史log\n      that.execCommand('Utils:CleanOldLog')\n\n      that.log('registerTaskRepeatPer6Hour 命令分配完毕')\n    })\n  }\n\n  /**\n   * 分发日志Parse命令\n   * @param {*} commandName\n   * @param {*} startAt\n   * @param {*} endAt\n   */\n  async dispatchParseCommand (commandName, startAtStr, endAtStr) {\n    this.log(`${commandName}任务开始, 处理时间 => ${startAtStr}, ${endAtStr}`)\n    this.execCommand(commandName,\n      [\n        startAtStr, // startAtYmdHi:\n        endAtStr // endAtYmdHi\n      ]\n    )\n  }\n\n  /**\n   * 分发日志Summary命令\n   * @param {*} commandName\n   * @param {*} summaryAt\n   * @param {*} summaryType\n   */\n  async dispatchSummaryCommand (commandName, countAtStr, summaryType) {\n    this.log(`${commandName}任务开始, 处理时间 => ${countAtStr}, 时间类型 => ${summaryType}`)\n    this.execCommand(commandName,\n      [\n        countAtStr, // summaryAtTime:\n        summaryType // summaryType\n      ]\n    )\n  }\n\n  async execCommand (commandName, args = []) {\n    let argvString = args.map((arg) => { return `'${arg}'` }).join('   ')\n    let command = `NODE_ENV=${env} node ${projectBaseUri}/dist/fee.js ${commandName}  ${argvString}`\n    this.log(`待执行命令=> ${command}`)\n    let commandStartAtFormated = moment().format(DATE_FORMAT.DISPLAY_BY_MILLSECOND)\n    let commandStartAtms = moment().valueOf()\n    shell.exec(command, {\n      async: true,\n      silent: true\n    }, () => {\n      let commandFinishAtFormated = moment().format(DATE_FORMAT.DISPLAY_BY_MILLSECOND)\n      let commandFinishAtms = moment().valueOf()\n      let during = (commandFinishAtms - commandStartAtms) / 1000\n      this.log(`${command}命令执行完毕, 共用时${during}秒, 开始执行时间=> ${commandStartAtFormated}, 执行完毕时间=> ${commandFinishAtFormated}`)\n    })\n  }\n}\n\nexport default TaskManager\n"],"file":"manage.js"}