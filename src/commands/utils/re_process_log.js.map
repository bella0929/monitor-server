{"version":3,"sources":["re_process_log.js"],"names":["moment","DATE_FORMAT","shell","env","path","Base","projectBaseUri","resolve","__dirname","CommandReProcessLog","signature","COMMAND_ARGUMENT_BY_MINUTE","description","execute","args","options","log","startAtYmdHi","endAtYmdHi","runParse","runSummary","execCommand","runSummaryByHour","runSummaryByDay","runSummaryByMonth","startAt","unix","endAt","processAt","formatHour","format","COMMAND_ARGUMENT_BY_HOUR","UNIT","HOUR","formatDay","COMMAND_ARGUMENT_BY_DAY","DAY","startMonth","startOf","endMonth","endOf","endMonthAt","processMoment","clone","add","formatMonth","COMMAND_ARGUMENT_BY_MONTH","MONTH","commandName","argvString","map","arg","join","command","commandStartAtFormated","DISPLAY_BY_MILLSECOND","exec","async","silent","commandFinishAtFormated"],"mappings":"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","sourcesContent":["import moment from 'moment'\nimport DATE_FORMAT from '~/src/constants/date_format'\nimport shell from 'shelljs'\nimport env from '~/src/configs/env'\nimport path from 'path'\nimport Base from '~/src/commands/base'\n\nconst projectBaseUri = path.resolve(__dirname, '../../../') // 项目所在文件夹\n\nclass CommandReProcessLog extends Base {\n  static get signature () {\n    return `\n     Utils:ReProcessLog\n     {startAtYmdHi:日志扫描范围上限${DATE_FORMAT.COMMAND_ARGUMENT_BY_MINUTE}格式}\n     {endAtYmdHi:日志扫描范围下限${DATE_FORMAT.COMMAND_ARGUMENT_BY_MINUTE}格式}\n     `\n  }\n\n  static get description () {\n    return '从跑指定时间数据'\n  }\n\n  async execute (args, options) {\n    this.log('《重跑开始》')\n    const { startAtYmdHi, endAtYmdHi } = args\n    await this.runParse(startAtYmdHi, endAtYmdHi)\n    await this.runSummary(startAtYmdHi, endAtYmdHi)\n    this.log('《重跑结束》')\n  }\n\n  async runParse (startAtYmdHi, endAtYmdHi) {\n    // t_o_monitor_1_201809 t_o_system_collection_1 [按分钟] 解析kafka日志, 分析Monitor\n    this.log(`[按分钟] Parse:Monitor任务开始, 处理时间 => ${startAtYmdHi}~${endAtYmdHi}`)\n    await this.execCommand('Parse:Monitor',\n      [\n        startAtYmdHi, // startAtYmdHi:\n        endAtYmdHi // endAtYmdHi:\n      ]\n    )\n\n    // t_o_uv_record_1_201809 [按小时] 解析kafka日志, 分析记录指定时间范围内的uv\n    this.log(`[按小时] Parse:UV任务开始, 处理时间 => ${startAtYmdHi}~${endAtYmdHi}`)\n    await this.execCommand('Parse:UV',\n      [\n        startAtYmdHi, // startAtYmdHi:\n        endAtYmdHi // endAtYmdHi:\n      ]\n    )\n    // t_r_duration_distribution [按小时] 解析kafka日志, 分析记录指定时间范围内用户停留时长\n    this.log(`[按小时] Parse:TimeOnSiteByHour任务开始, 处理时间 => ${startAtYmdHi}~${endAtYmdHi}`)\n    await this.execCommand('Parse:TimeOnSiteByHour',\n      [\n        startAtYmdHi, // startAtYmdHi:\n        endAtYmdHi // endAtYmdHi:\n      ]\n    )\n\n    // t_o_system_collection [按天] 解析kafka日志, 分析指定时间范围Device\n    this.log(`[按天] Parse:Device任务开始, 处理时间 => ${startAtYmdHi}~${endAtYmdHi}`)\n    await this.execCommand('Parse:Device',\n      [\n        startAtYmdHi, // startAtYmdHi:\n        endAtYmdHi // endAtYmdHi:\n      ]\n    )\n\n    // t_r_behavior_distribution [按天] 解析kafka日志, 用户点击情况\n    this.log(`[按天] Parse:MenuClick任务开始, 处理时间 => ${startAtYmdHi}~${endAtYmdHi}`)\n    await this.execCommand('Parse:MenuClick',\n      [\n        startAtYmdHi, // startAtYmdHi:\n        endAtYmdHi // endAtYmdHi:\n      ]\n    )\n  }\n\n  async runSummary (startAtYmdHi, endAtYmdHi) {\n    await this.runSummaryByHour(startAtYmdHi, endAtYmdHi)\n    await this.runSummaryByDay(startAtYmdHi, endAtYmdHi)\n    await this.runSummaryByMonth(startAtYmdHi, endAtYmdHi)\n  }\n\n  async runSummaryByHour (startAtYmdHi, endAtYmdHi) {\n    const startAt = moment(startAtYmdHi).unix() // 用时间戳来计算\n    const endAt = moment(endAtYmdHi).unix() + 3600\n    for (let processAt = startAt; processAt <= endAt; processAt += 3600) {\n      const formatHour = moment.unix(processAt).format(DATE_FORMAT.COMMAND_ARGUMENT_BY_HOUR) // 获得时间戳对应的时间\n\n      // [按小时/按天/按月] 根据历史数据, 汇总分析记录指定时间范围内的uv\n      this.log(`[按小时] Summary:UV任务开始, 处理时间 => ${formatHour}`)\n      await this.execCommand('Summary:UV',\n        [\n          formatHour, // countAtTime:\n          DATE_FORMAT.UNIT.HOUR // countType:\n        ]\n      )\n    }\n  }\n\n  async runSummaryByDay (startAtYmdHi, endAtYmdHi) {\n    const startAt = moment(startAtYmdHi).unix() // 用时间戳来计算\n    const endAt = moment(endAtYmdHi).unix() + 3600 * 24\n\n    for (let processAt = startAt; processAt <= endAt; processAt += 3600 * 24) {\n      const formatDay = moment.unix(processAt).format(DATE_FORMAT.COMMAND_ARGUMENT_BY_DAY) // 获取规格化日期\n\n      // [按小时/按天/按月] 根据历史数据, 汇总分析记录指定时间范围内的uv\n      this.log(`[按天] Summary:UV任务开始, 处理时间 => ${formatDay}`)\n      await this.execCommand('Summary:UV',\n        [\n          formatDay, // countAtTime:\n          DATE_FORMAT.UNIT.DAY // countType:\n        ]\n      )\n\n      // t_r_http_error_distribution [按天/按月] 基于数据表做统计, 按月统计http error占比\n      this.log(`[按天] Summary:HttpError任务开始, 处理时间 => ${formatDay}`)\n      await this.execCommand('Summary:HttpError',\n        [\n          formatDay, // sumaryAtTime:\n          DATE_FORMAT.UNIT.DAY // countType:\n        ]\n      )\n\n      // [按天/按月] 根据历史数据, 汇总分析记录指定时间范围内用户停留时长\n      this.log(`[按天] Summary:TimeOnSite任务开始, 处理时间 => ${formatDay}`)\n      await this.execCommand('Summary:TimeOnSite',\n        [\n          formatDay, // countAtTime:\n          DATE_FORMAT.UNIT.DAY // countType:\n        ]\n      )\n    }\n  }\n\n  async runSummaryByMonth (startAtYmdHi, endAtYmdHi) {\n    const startMonth = moment(startAtYmdHi).startOf('month')\n    const endMonth = moment(endAtYmdHi).endOf('month')\n    const endMonthAt = endMonth.unix()\n\n    for (let processMoment = startMonth.clone(); processMoment.unix() <= endMonthAt; processMoment = processMoment.clone().add(1, 'month')) {\n      const formatMonth = processMoment.format(DATE_FORMAT.COMMAND_ARGUMENT_BY_MONTH) // 获取规格化日期\n\n      // t_r_system_browser 浏览器版本统计 summary 按月统计 每天跑\n      this.log(`[按天] Summary:SystemBrowser任务开始, 处理时间 => ${formatMonth}`)\n      await this.execCommand('Summary:SystemBrowser',\n        [\n          formatMonth, // sumaryYm:\n          DATE_FORMAT.UNIT.MONTH\n        ]\n      )\n\n      // t_r_system_device 设备信息统计 summary 按月统计 每天跑\n      this.log(`[按天] Summary:SystemDevice任务开始, 处理时间 => ${formatMonth}`)\n      await this.execCommand('Summary:SystemDevice',\n        [\n          formatMonth, // sumaryYm:\n          DATE_FORMAT.UNIT.MONTH\n        ]\n      )\n\n      // t_r_system_os 操作系统统计 按月统计 每天跑\n      this.log(`[按天] Summary:SystemOS任务开始, 处理时间 => ${formatMonth}`)\n      await this.execCommand('Summary:SystemOS',\n        [\n          formatMonth, // sumaryYm:\n          DATE_FORMAT.UNIT.MONTH\n        ]\n      )\n\n      // t_r_project_version 按项目版本进行统计 按月统计 每天跑\n      this.log(`[按天] Summary:SystemRuntimeVersion任务开始, 处理时间 => ${formatMonth}`)\n      await this.execCommand('Summary:SystemRuntimeVersion',\n        [\n          formatMonth, // sumaryYm:\n          DATE_FORMAT.UNIT.MONTH\n        ]\n      )\n\n      // [按月] 根据历史数据, 汇总分析记录指定时间范围内的uv\n      this.log(`[按月] Summary:UV任务开始, 处理时间 => ${formatMonth}`)\n      await this.execCommand('Summary:UV',\n        [\n          formatMonth, // countAtTime\n          DATE_FORMAT.UNIT.MONTH // countType\n        ]\n      )\n\n      // [按月] 基于数据表做统计, 按月统计browser占比\n      this.log(`[按月] Summary:HttpError任务开始, 处理时间 => ${formatMonth}`)\n      await this.execCommand('Summary:HttpError',\n        [\n          formatMonth, // sumaryAtTime:\n          DATE_FORMAT.UNIT.MONTH // countType:\n        ]\n      )\n\n      // [按月] 根据历史数据, 汇总分析记录指定时间范围内用户停留时长\n      this.log(`[按月] Summary:TimeOnSite任务开始, 处理时间 => ${formatMonth}`)\n      await this.execCommand('Summary:TimeOnSite',\n        [\n          formatMonth, // countAtTime\n          DATE_FORMAT.UNIT.MONTH // countType\n        ]\n      )\n    }\n  }\n\n  async execCommand (commandName, args = []) {\n    let argvString = args.map((arg) => { return `'${arg}'` }).join('   ')\n    let command = `NODE_ENV=${env} node ${projectBaseUri}/dist/fee.js ${commandName}  ${argvString}`\n    this.log(`待执行命令=> ${command}`)\n    let commandStartAtFormated = moment().format(DATE_FORMAT.DISPLAY_BY_MILLSECOND)\n    await shell.exec(command, {\n      async: false,\n      silent: false\n    })\n    let commandFinishAtFormated = moment().format(DATE_FORMAT.DISPLAY_BY_MILLSECOND)\n    this.log(`命令执行完毕 => ${command}, 开始执行时间=> ${commandStartAtFormated}, 执行完毕时间=> ${commandFinishAtFormated}`)\n  }\n}\n\nexport default CommandReProcessLog\n"],"file":"re_process_log.js"}