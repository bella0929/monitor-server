{"version":3,"sources":["clean_old_log.js"],"names":["_","path","fs","moment","shell","Base","appConfig","Nginx","DATE_FORMAT","CleanOldLog","signature","description","execute","args","options","log","clearOldKafkaLog","clearOldCommandLog","currentAtMoment","currentAt","clone","unix","oneMonthAgoAt","subtract","UNIT","MONTH","needRemainLastMonthLog","isNeedToCleanLog","reaminLogAtList","push","testBasePath","LKafka","getAbsoluteBasePathByType","LOG_TYPE_TEST","rawBasePath","LOG_TYPE_RAW","jsonBasePath","LOG_TYPE_JSON","remainLogPathMap","logAt","baseLogPath","logName","getMonthDirName","logPath","resolve","needRemoveDirList","fileList","ls","dirname","dirPath","has","Object","keys","needRemoveDirPath","existsSync","isString","length","execCommand","dirFormat","logFormat","absoluteCommandLogUri","getAbsoluteCommandLogPath","dirLastMonthFormat","format","logLastMonthFormat","lastMonthLogDirUri","oldCommandLogFormat","absoluteLogPath","commandLogPath","command","exec","date"],"mappings":"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","sourcesContent":["import _ from 'lodash'\nimport path from 'path'\nimport fs from 'fs'\nimport moment from 'moment'\nimport shell from 'shelljs'\nimport Base from '~/src/commands/base'\nimport appConfig from '~/src/configs/app'\nimport Nginx from '~/src/library/nginx'\nimport DATE_FORMAT from '~/src/constants/date_format'\n\nclass CleanOldLog extends Base {\n  static get signature() {\n    return `\n       Utils:CleanOldLog\n       `\n  }\n\n  static get description() {\n    return '只保留当前月内数据, 每月20号之后自动删除上个月数据'\n  }\n\n  async execute(args, options) {\n    // 只保留当前月内数据, 每月20号之后自动删除上个月数据\n    this.log(\"清理kafka日志\")\n    await this.clearOldKafkaLog()\n    this.log(\"清理command日志\")\n    await this.clearOldCommandLog()\n    this.log(`执行完毕`)\n  }\n\n  async clearOldKafkaLog() {\n    let currentAtMoment = moment()\n    let currentAt = currentAtMoment.clone().unix()\n    let oneMonthAgoAt = currentAtMoment.clone().subtract(1, DATE_FORMAT.UNIT.MONTH).unix()\n\n    // 每月20号后删除上一个月的数据\n    let needRemainLastMonthLog = this.isNeedToCleanLog()\n\n    let reaminLogAtList = [currentAt]\n    if (needRemainLastMonthLog) {\n      reaminLogAtList.push(oneMonthAgoAt)\n    }\n\n    let testBasePath = LKafka.getAbsoluteBasePathByType(LKafka.LOG_TYPE_TEST)\n    let rawBasePath = LKafka.getAbsoluteBasePathByType(LKafka.LOG_TYPE_RAW)\n    let jsonBasePath = LKafka.getAbsoluteBasePathByType(LKafka.LOG_TYPE_JSON)\n    let remainLogPathMap = {}\n    for (let logAt of reaminLogAtList) {\n      for (let baseLogPath of [testBasePath, rawBasePath, jsonBasePath]) {\n        let logName = LKafka.getMonthDirName(logAt)\n        let logPath = path.resolve(baseLogPath, logName)\n        remainLogPathMap[logPath] = true\n      }\n    }\n\n    let needRemoveDirList = []\n    for (let baseLogPath of [testBasePath, rawBasePath, jsonBasePath]) {\n      let fileList = shell.ls(baseLogPath)\n      this.log(`${baseLogPath}下文件列表为`, fileList)\n      for (let dirname of fileList) {\n        let dirPath = path.resolve(baseLogPath, dirname)\n        if (_.has(remainLogPathMap, dirPath) === false) {\n          this.log(`需要删除 => ${dirPath}`)\n          needRemoveDirList.push(dirPath)\n        }\n      }\n    }\n\n    this.log('需要保留的文件夹列表:', Object.keys(remainLogPathMap))\n    this.log('需要删除的文件夹列表:', needRemoveDirList)\n\n    for (let needRemoveDirPath of needRemoveDirList) {\n      this.log(`准备删除${needRemoveDirPath}`)\n      if (fs.existsSync(needRemoveDirPath) === false) {\n        this.log('路径', needRemoveDirPath, '不存在, 自动跳过')\n        continue\n      }\n      if (_.isString(needRemoveDirPath) === true && needRemoveDirPath.length > 'log/nginx'.length) {\n        this.execCommand(`rm -rf ${needRemoveDirPath}`)\n        this.log('删除完毕')\n      } else {\n        this.log(`${needRemoveDirPath}不是字符串或长度过短, 自动跳过`)\n      }\n    }\n  }\n\n  /**\n   * 自动清除一个月之前的命令日志\n   */\n  async clearOldCommandLog() {\n    let dirFormat = 'YYYY_MM'\n    let logFormat = 'YYYY-MM'\n    let absoluteCommandLogUri = await this.getAbsoluteCommandLogPath()\n\n    let dirLastMonthFormat = moment().subtract(1, DATE_FORMAT.UNIT.MONTH).format(dirFormat)\n    let logLastMonthFormat = moment().subtract(1, DATE_FORMAT.UNIT.MONTH).format(logFormat)\n    let lastMonthLogDirUri = path.resolve(absoluteCommandLogUri, dirLastMonthFormat)\n    let oldCommandLogFormat = path.resolve(absoluteCommandLogUri, `*-${logLastMonthFormat}-*`)\n    this.execCommand(`mkdir -p ${lastMonthLogDirUri}`)\n    this.execCommand(`mv ${oldCommandLogFormat} ${lastMonthLogDirUri}`)\n\n    let currentAtMoment = moment()\n    // 每月20号后删除上一个月的数据\n    let needRemainLastMonthLog = this.isNeedToCleanLog()\n    if (needRemainLastMonthLog && lastMonthLogDirUri.length > '/log/command'.length) {\n      this.log(\"每月20号后自动删除上一个月的command日志\")\n      this.execCommand(`rm -rf ${lastMonthLogDirUri}`)\n    }\n  }\n\n  async getAbsoluteCommandLogPath() {\n    let logPath = appConfig.absoluteLogPath\n    let commandLogPath = path.resolve(logPath, 'command')\n    return commandLogPath\n  }\n\n  execCommand(command) {\n    this.log('执行命令=> ', command)\n    shell.exec(command)\n  }\n\n  isNeedToCleanLog() {\n    return moment().date() > 20\n  }\n\n}\n\nexport default CleanOldLog\n"],"file":"clean_old_log.js"}