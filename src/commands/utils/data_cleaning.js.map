{"version":3,"sources":["data_cleaning.js"],"names":["DataCleaningConfig","DataCleaning","constructor","getData","data","config","DataConfig","key","Object","keys","test","iterator"],"mappings":"AAAA,OAAOA,kBAAP,MAA+B,4BAA/B;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,YAAN,CAAmB;AACjB;AACF;AACA;AACA;AACA;AACEC,EAAAA,WAAW,GAAI,CACd,CAPgB,CAQjB;AACA;;;AACAC,EAAAA,OAAO,CAAEC,IAAF,EAAQC,MAAR,EAAgB;AACrB,QAAIC,UAAU,GAAGN,kBAAkB,CAACK,MAAD,CAAnC;;AACA,SAAK,IAAIE,GAAT,IAAgBC,MAAM,CAACC,IAAP,CAAYH,UAAZ,CAAhB,EAAyC;AACvC,UAAI,CAACA,UAAU,CAACC,GAAD,CAAV,CAAgBG,IAAhB,CAAqBN,IAAI,CAACG,GAAD,CAAzB,CAAL,EAAsC;AACpC,eAAO,KAAP;AACD;AACF;;AACD,WAAO,IAAP;AACD;AACD;AACF;AACA;AACA;AACA;;;AACEI,EAAAA,QAAQ,GAAI,CAEX;;AA1BgB;;AA6BnB,eAAeV,YAAf","sourcesContent":["import DataCleaningConfig from '~/src/configs/datacleaning'\n/**\n * 数据清洗公共类\n * 读取对应配置 对parse第一清洗数据做，一致性、合法性校验\n * @class DataCleaning\n */\nclass DataCleaning {\n  /**\n     * 构造方法\n     *\n     * @memberof constructor\n     */\n  constructor () {\n  }\n  // 简单的清洗方法\n  // 返回值为true的时候代表可以入库，否则数据中存在非法数据\n  getData (data, config) {\n    let DataConfig = DataCleaningConfig[config]\n    for (let key of Object.keys(DataConfig)) {\n      if (!DataConfig[key].test(data[key])) {\n        return false\n      }\n    }\n    return true\n  }\n  /**\n     * 迭代器方法，用于处理\b差异化清洗逻辑，\n     *\n     * @memberof iterator\n     */\n  iterator () {\n\n  }\n}\n\nexport default DataCleaning\n"],"file":"data_cleaning.js"}