{"version":3,"sources":["base.js"],"names":["Command","_","moment","DATE_FORMAT","Logger","Alert","WatchIdList","Base","signature","description","handle","args","options","log","execute","catch","e","sendMessage","WATCH_UCID_LIST_DEFAULT","stack","message","rawMessage","arguments","isString","JSON","stringify","triggerAt","format","DISPLAY_BY_MILLSECOND","console","constructor","name","logger","getLogger4Command","info","warn"],"mappings":"AAAA,SAASA,OAAT,QAAwB,eAAxB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,WAAP,MAAwB,6BAAxB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,KAAP,MAAkB,mCAAlB;AACA,OAAOC,WAAP,MAAwB,qBAAxB;;AAEA,MAAMC,IAAN,SAAmBP,OAAnB,CAA2B;AACL,aAATQ,SAAS,GAAI;AACtB,WAAQ;AACZ;AACA;AACA;AACA;AACA;AACA,MANI;AAOD;;AAEqB,aAAXC,WAAW,GAAI;AACxB,WAAO,iBAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACc,QAANC,MAAM,CAAEC,IAAF,EAAQC,OAAR,EAAiB;AAC3B,SAAKC,GAAL,CAAS,eAAT;AACA,UAAM,KAAKC,OAAL,CAAaH,IAAb,EAAmBC,OAAnB,EAA4BG,KAA5B,CAAkCC,CAAC,IAAI;AAC3CX,MAAAA,KAAK,CAACY,WAAN,CAAkBX,WAAW,CAACY,uBAA9B,EAAuDF,CAAC,CAACG,KAAzD;AACA,WAAKN,GAAL,CAAS,aAAT;AACA,WAAKA,GAAL,CAASG,CAAC,CAACG,KAAX;AACD,KAJK,CAAN;AAKA,SAAKN,GAAL,CAAS,gBAAT;AACD;;AAEY,QAAPC,OAAO,CAAEH,IAAF,EAAQC,OAAR,EAAiB,CAE7B;AAED;AACF;AACA;AACA;;;AACW,QAAHC,GAAG,GAAI;AACX,QAAIO,OAAO,GAAG,EAAd;;AACA,SAAK,IAAIC,UAAT,IAAuBC,SAAvB,EAAkC;AAChC,UAAIrB,CAAC,CAACsB,QAAF,CAAWF,UAAX,MAA2B,KAA/B,EAAsC;AACpCD,QAAAA,OAAO,GAAGA,OAAO,GAAGI,IAAI,CAACC,SAAL,CAAeJ,UAAf,CAApB;AACD,OAFD,MAEO;AACLD,QAAAA,OAAO,GAAGA,OAAO,GAAGC,UAApB;AACD;AACF;;AACD,QAAIK,SAAS,GAAGxB,MAAM,GAAGyB,MAAT,CAAgBxB,WAAW,CAACyB,qBAA5B,CAAhB;AACAC,IAAAA,OAAO,CAAChB,GAAR,CAAa,IAAGa,SAAU,MAAK,KAAKI,WAAL,CAAiBC,IAAK,IAAzC,GAA+CX,OAA3D;AACA,QAAIY,MAAM,GAAG5B,MAAM,CAAC6B,iBAAP,CAAyB,KAAKH,WAAL,CAAiBC,IAA1C,CAAb;AACAC,IAAAA,MAAM,CAACE,IAAP,CAAYd,OAAZ;AACD;AAED;AACF;AACA;AACA;;;AACY,QAAJe,IAAI,GAAI;AACZ,QAAIf,OAAO,GAAG,EAAd;;AACA,SAAK,IAAIC,UAAT,IAAuBC,SAAvB,EAAkC;AAChC,UAAIrB,CAAC,CAACsB,QAAF,CAAWF,UAAX,MAA2B,KAA/B,EAAsC;AACpCD,QAAAA,OAAO,GAAGA,OAAO,GAAGI,IAAI,CAACC,SAAL,CAAeJ,UAAf,CAApB;AACD,OAFD,MAEO;AACLD,QAAAA,OAAO,GAAGA,OAAO,GAAGC,UAApB;AACD;AACF;;AACD,QAAIK,SAAS,GAAGxB,MAAM,GAAGyB,MAAT,CAAgBxB,WAAW,CAACyB,qBAA5B,CAAhB;AACAC,IAAAA,OAAO,CAACM,IAAR,CAAc,IAAGT,SAAU,MAAK,KAAKI,WAAL,CAAiBC,IAAK,IAAzC,GAA+CX,OAA5D;AACA,QAAIY,MAAM,GAAG5B,MAAM,CAAC6B,iBAAP,CAAyB,KAAKH,WAAL,CAAiBC,IAA1C,CAAb;AACAC,IAAAA,MAAM,CAACG,IAAP,CAAYf,OAAZ;AACD;;AAvEwB;;AA0E3B,eAAeb,IAAf","sourcesContent":["import { Command } from '@adonisjs/ace'\nimport _ from 'lodash'\nimport moment from 'moment'\nimport DATE_FORMAT from '~/src/constants/date_format'\nimport Logger from '~/src/library/logger'\nimport Alert from '~/src/library/utils/modules/alert'\nimport WatchIdList from '~/src/configs/alarm'\n\nclass Base extends Command {\n  static get signature () {\n    return `\n     Parse:Base\n     \n     {--onlyFlag:[必传]flag,只有true/false两个值} \n     {--logName=@value:[必传]日志文件名} \n     {--isTest?=@value:[可选]是否处于测试环境}\n     `\n  }\n\n  static get description () {\n    return '解析nginx日志, Base'\n  }\n\n  /**\n   * 在最外层进行一次封装, 方便获得报错信息\n   * @param args\n   * @param options\n   * @returns {Promise<void>}\n   */\n  async handle (args, options) {\n    this.log('command start')\n    await this.execute(args, options).catch(e => {\n      Alert.sendMessage(WatchIdList.WATCH_UCID_LIST_DEFAULT, e.stack)\n      this.log('catch error')\n      this.log(e.stack)\n    })\n    this.log('command finish')\n  }\n\n  async execute (args, options) {\n\n  }\n\n  /**\n   * 简易logger\n   * @returns  null\n   */\n  async log () {\n    let message = ''\n    for (let rawMessage of arguments) {\n      if (_.isString(rawMessage) === false) {\n        message = message + JSON.stringify(rawMessage)\n      } else {\n        message = message + rawMessage\n      }\n    }\n    let triggerAt = moment().format(DATE_FORMAT.DISPLAY_BY_MILLSECOND)\n    console.log(`[${triggerAt}]-[${this.constructor.name}] ` + message)\n    let logger = Logger.getLogger4Command(this.constructor.name)\n    logger.info(message)\n  }\n\n  /**\n   * 简易logger\n   * @returns  null\n   */\n  async warn () {\n    let message = ''\n    for (let rawMessage of arguments) {\n      if (_.isString(rawMessage) === false) {\n        message = message + JSON.stringify(rawMessage)\n      } else {\n        message = message + rawMessage\n      }\n    }\n    let triggerAt = moment().format(DATE_FORMAT.DISPLAY_BY_MILLSECOND)\n    console.warn(`[${triggerAt}]-[${this.constructor.name}] ` + message)\n    let logger = Logger.getLogger4Command(this.constructor.name)\n    logger.warn(message)\n  }\n}\n\nexport default Base\n"],"file":"base.js"}