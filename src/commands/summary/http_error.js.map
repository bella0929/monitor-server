{"version":3,"sources":["http_error.js"],"names":["Base","moment","MHttpError","DATE_FORMAT","DATE_FORMAT_ARGUMENTS","COMMAND_ARGUMENT_BY_UNIT","HttpErrorSummary","signature","COMMAND_ARGUMENT_BY_DAY","COMMAND_ARGUMENT_BY_MONTH","UNIT","DAY","MONTH","description","execute","args","options","sumaryAtTime","countType","log","isArgumentsLegal","warn","countAtMoment","startAt","unix","endAt","clone","add","summaryHttpError","sumaryAtTimeMoment","isMoment","isValid"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,qBAAjB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,UAAP,MAAuB,gCAAvB;AACA,OAAOC,WAAP,MAAwB,6BAAxB;AAEA,MAAMC,qBAAqB,GAAGD,WAAW,CAACE,wBAA1C;;AAEA,MAAMC,gBAAN,SAA+BN,IAA/B,CAAoC;AACd,aAATO,SAAS,GAAI;AACtB,WAAQ;AACZ;AACA,gCAAgCJ,WAAW,CAACK,uBAAwB,IAAGL,WAAW,CAACM,yBAA0B;AAC7G,0BAA0BN,WAAW,CAACO,IAAZ,CAAiBC,GAAI,IAAGR,WAAW,CAACO,IAAZ,CAAiBE,KAAM;AACzE,MAJI;AAKD;;AAEqB,aAAXC,WAAW,GAAI;AACxB,WAAO,oCAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACe,QAAPC,OAAO,CAAEC,IAAF,EAAQC,OAAR,EAAiB;AAC5B;AACA,QAAI;AAAEC,MAAAA,YAAF;AAAgBC,MAAAA;AAAhB,QAA8BH,IAAlC;AACA,SAAKI,GAAL,CAAS,0BAAT,EAAoCF,YAApC,EAAkDC,SAAlD;;AACA,QAAI,KAAKE,gBAAL,CAAsBL,IAAtB,EAA4BC,OAA5B,MAAyC,KAA7C,EAAoD;AAClD,WAAKK,IAAL,CAAU,aAAV;AACA,aAAO,KAAP;AACD;;AACD,QAAIC,aAAa,GAAGrB,MAAM,CAACgB,YAAD,EAAeb,qBAAqB,CAACc,SAAD,CAApC,CAA1B;AACA,QAAIK,OAAO,GAAGD,aAAa,CAACE,IAAd,EAAd;AACA,QAAIC,KAAK,GAAG,CAAZ;;AACA,YAAQP,SAAR;AACE,WAAKf,WAAW,CAACO,IAAZ,CAAiBC,GAAtB;AACEc,QAAAA,KAAK,GAAGH,aAAa,CAACI,KAAd,GAAsBC,GAAtB,CAA0B,CAA1B,EAA6B,MAA7B,EAAqCH,IAArC,KAA8C,CAAtD;AACA;;AACF,WAAKrB,WAAW,CAACO,IAAZ,CAAiBE,KAAtB;AACEa,QAAAA,KAAK,GAAGH,aAAa,CAACI,KAAd,GAAsBC,GAAtB,CAA0B,CAA1B,EAA6B,QAA7B,EAAuCH,IAAvC,KAAgD,CAAxD;AACA;;AACF;AACEC,QAAAA,KAAK,GAAGF,OAAO,GAAG,KAAV,GAAkB,CAA1B;AARJ;;AAUA,UAAMrB,UAAU,CAAC0B,gBAAX,CAA4BL,OAA5B,EAAqCL,SAArC,EAAgDK,OAAhD,EAAyDE,KAAzD,CAAN;AACA,SAAKN,GAAL,CAAU,MAAV;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,gBAAgB,CAAEL,IAAF,EAAQC,OAAR,EAAiB;AAC/B,QAAI;AAAEC,MAAAA,YAAF;AAAgBC,MAAAA;AAAhB,QAA8BH,IAAlC;AACA,QAAIc,kBAAkB,GAAG5B,MAAM,CAACgB,YAAD,EAAed,WAAW,CAACE,wBAAZ,CAAqCa,SAArC,CAAf,CAA/B;;AACA,QAAIjB,MAAM,CAAC6B,QAAP,CAAgBD,kBAAhB,MAAwC,KAAxC,IAAiDA,kBAAkB,CAACE,OAAnB,OAAiC,KAAtF,EAA6F;AAC3F,WAAKV,IAAL,CAAU,sBAAV,EAAkCJ,YAAlC;AACA,aAAO,KAAP;AACD;;AACD,QAAIC,SAAS,KAAKf,WAAW,CAACO,IAAZ,CAAiBE,KAA/B,IAAwCM,SAAS,KAAKf,WAAW,CAACO,IAAZ,CAAiBC,GAA3E,EAAgF;AAC9E,WAAKU,IAAL,CAAU,mBAAV,EAA+BH,SAA/B;AACA,aAAO,KAAP;AACD;;AACD,WAAO,IAAP;AACD;;AA7DiC;;AAgEpC,eAAeZ,gBAAf","sourcesContent":["import Base from '~/src/commands/base'\nimport moment from 'moment'\nimport MHttpError from '~/src/model/summary/http_error'\nimport DATE_FORMAT from '~/src/constants/date_format'\n\nconst DATE_FORMAT_ARGUMENTS = DATE_FORMAT.COMMAND_ARGUMENT_BY_UNIT\n\nclass HttpErrorSummary extends Base {\n  static get signature () {\n    return `\n     Summary:HttpError\n     {sumaryAtTime:按月/按天统计错误情况${DATE_FORMAT.COMMAND_ARGUMENT_BY_DAY}/${DATE_FORMAT.COMMAND_ARGUMENT_BY_MONTH}格式}\n     {countType:日志统计格式, ${DATE_FORMAT.UNIT.DAY}/${DATE_FORMAT.UNIT.MONTH}}\n     `\n  }\n\n  static get description () {\n    return '[按天/按月] 基于数据表做统计, 统计http error分布情况'\n  }\n\n  /**\n   * 每天跑一次, 获取项目列表, 遍历t_o_system_collection_1表\n   * @param {*} args\n   * @param {*} options\n   */\n  async execute (args, options) {\n    // 每个月跑一次\n    let { sumaryAtTime, countType } = args;\n    this.log('sumaryAtTime, countType ',sumaryAtTime, countType);\n    if (this.isArgumentsLegal(args, options) === false) {\n      this.warn('参数不正确, 自动退出')\n      return false\n    }\n    let countAtMoment = moment(sumaryAtTime, DATE_FORMAT_ARGUMENTS[countType])\n    let startAt = countAtMoment.unix()\n    let endAt = 0\n    switch (countType) {\n      case DATE_FORMAT.UNIT.DAY:\n        endAt = countAtMoment.clone().add(1, 'days').unix() - 1\n        break\n      case DATE_FORMAT.UNIT.MONTH:\n        endAt = countAtMoment.clone().add(1, 'months').unix() - 1\n        break\n      default:\n        endAt = startAt + 86400 - 1\n    }\n    await MHttpError.summaryHttpError(startAt, countType, startAt, endAt)\n    this.log(`处理完毕`)\n  }\n\n  /**\n   * [可覆盖]检查请求参数, 默认检查传入的时间范围是否正确, 如果有自定义需求可以在子类中进行覆盖\n   * @param {*} args\n   * @param {*} options\n   * @return {Boolean}\n   */\n  isArgumentsLegal (args, options) {\n    let { sumaryAtTime, countType } = args\n    let sumaryAtTimeMoment = moment(sumaryAtTime, DATE_FORMAT.COMMAND_ARGUMENT_BY_UNIT[countType])\n    if (moment.isMoment(sumaryAtTimeMoment) === false || sumaryAtTimeMoment.isValid() === false) {\n      this.warn('sumaryAtTime参数不正确 =>', sumaryAtTime)\n      return false\n    }\n    if (countType !== DATE_FORMAT.UNIT.MONTH && countType !== DATE_FORMAT.UNIT.DAY) {\n      this.warn('countType参数不正确 =>', countType)\n      return false\n    }\n    return true\n  }\n}\n\nexport default HttpErrorSummary\n"],"file":"http_error.js"}