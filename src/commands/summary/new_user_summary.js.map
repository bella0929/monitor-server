{"version":3,"sources":["new_user_summary.js"],"names":["Base","moment","_","MProject","MNewUserSummary","MUserFirstLoginAt","DATE_FORMAT","NewUserSummary","signature","UNIT","HOUR","COMMAND_ARGUMENT_BY_HOUR","DAY","COMMAND_ARGUMENT_BY_DAY","MONTH","COMMAND_ARGUMENT_BY_MONTH","description","execute","args","options","countAtTime","countType","isArgumentsLegal","warn","countAtMoment","COMMAND_ARGUMENT_BY_UNIT","startAt","unix","endAt","clone","add","startAtMoment","endAtMoment","rawProjectList","getList","log","rawProject","projectId","get","projectName","format","DIAPLAY_BY_MINUTE","cityDistribution","sumTotalCount","recordList","record","country","province","city","oldTotalCount","mergedTotalCount","set","replaceInto","DATABASE_BY_UNIT","isMoment","isValid"],"mappings":"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","sourcesContent":["import Base from '~/src/commands/base'\nimport moment from 'moment'\nimport _ from 'lodash'\nimport MProject from '~/src/model/project/project'\nimport MNewUserSummary from '~/src/model/summary/new_user_summary'\nimport MUserFirstLoginAt from '~/src/model/parse/user_first_login_at'\nimport DATE_FORMAT from '~/src/constants/date_format'\n\nclass NewUserSummary extends Base {\n  static get signature () {\n    return `\n     Summary:NewUser \n\n     {countAtTime:所统计时间, ${DATE_FORMAT.UNIT.HOUR} 为 ${DATE_FORMAT.COMMAND_ARGUMENT_BY_HOUR}, ${DATE_FORMAT.UNIT.DAY} 为 ${DATE_FORMAT.COMMAND_ARGUMENT_BY_DAY}, ${DATE_FORMAT.UNIT.MONTH} 为 ${DATE_FORMAT.COMMAND_ARGUMENT_BY_MONTH}}\n     {countType:统计类型${DATE_FORMAT.UNIT.HOUR}/${DATE_FORMAT.UNIT.DAY}/${DATE_FORMAT.UNIT.MONTH}}\n     `\n  }\n\n  static get description () {\n    return '[按小时/按天/按月] 根据历史数据, 汇总分析记录指定时间范围内的新增用户数'\n  }\n\n  async execute (args, options) {\n    let { countAtTime, countType } = args\n    if (this.isArgumentsLegal(args, options) === false) {\n      this.warn('参数不正确, 自动退出')\n      return false\n    }\n    let countAtMoment = moment(countAtTime, DATE_FORMAT.COMMAND_ARGUMENT_BY_UNIT[countType])\n    let startAt = countAtMoment.unix()\n    let endAt = 0\n    switch (countType) {\n      case DATE_FORMAT.UNIT.HOUR:\n        endAt = countAtMoment.clone().add(1, 'hours').unix() - 1\n        break\n      case DATE_FORMAT.UNIT.DAY:\n        endAt = countAtMoment.clone().add(1, 'days').unix() - 1\n        break\n      case DATE_FORMAT.UNIT.MONTH:\n        endAt = countAtMoment.clone().add(1, 'months').unix() - 1\n        break\n      default:\n        endAt = startAt + 86400 - 1\n    }\n    let startAtMoment = moment.unix(startAt)\n    let endAtMoment = moment.unix(endAt)\n\n    let rawProjectList = await MProject.getList()\n    this.log('项目列表获取完毕, =>', rawProjectList)\n    for (let rawProject of rawProjectList) {\n      let projectId = _.get(rawProject, 'id', '')\n      let projectName = _.get(rawProject, 'project_name', '')\n      if (projectId === 0 || projectId === '') {\n        continue\n      }\n      this.log(`开始处理项目${projectId}(${projectName})的数据`)\n      this.log(`[${projectId}(${projectName})] 时间范围:${startAtMoment.format(DATE_FORMAT.DIAPLAY_BY_MINUTE) + ':00'}~${endAtMoment.format(DATE_FORMAT.DIAPLAY_BY_MINUTE) + ':59'}`)\n\n      let cityDistribution = {}\n      let sumTotalCount = 0\n      let recordList = await MUserFirstLoginAt.getList(projectId, startAt, endAt)\n      for (let record of recordList) {\n        let { country, province, city } = record\n        sumTotalCount = sumTotalCount + 1\n        let oldTotalCount = _.get(cityDistribution, [country, province, city], 0)\n        let mergedTotalCount = oldTotalCount + 1\n        _.set(cityDistribution, [country, province, city], mergedTotalCount)\n      }\n\n      MNewUserSummary.replaceInto(\n        projectId,\n        sumTotalCount,\n        countAtMoment.format(DATE_FORMAT.DATABASE_BY_UNIT[countType]),\n        countType,\n        cityDistribution\n      )\n      this.log(`项目${projectId}(${projectName})处理完毕, sumTotalCount => ${sumTotalCount}`)\n    }\n  }\n\n  /**\n   * [可覆盖]检查请求参数, 默认检查传入的时间范围是否正确, 如果有自定义需求可以在子类中进行覆盖\n   * @param {*} args\n   * @param {*} options\n   * @return {Boolean}\n   */\n  isArgumentsLegal (args, options) {\n    let { countAtTime, countType } = args\n\n    if (countType !== DATE_FORMAT.UNIT.MONTH && countType !== DATE_FORMAT.UNIT.DAY && countType !== DATE_FORMAT.UNIT.HOUR) {\n      this.warn(`统计类别不为 ${DATE_FORMAT.UNIT.MONTH}/${DATE_FORMAT.UNIT.DAY}/${DATE_FORMAT.UNIT.HOUR} `, 'countType => ', countType)\n      return false\n    }\n    let countAtMoment = moment(countAtTime, DATE_FORMAT.COMMAND_ARGUMENT_BY_UNIT[countType])\n    if (moment.isMoment(countAtMoment) === false || countAtMoment.isValid() === false) {\n      this.warn(`countAtTime解析失败`, ' => ', countAtTime)\n      return false\n    }\n    return true\n  }\n}\n\nexport default NewUserSummary\n"],"file":"new_user_summary.js"}