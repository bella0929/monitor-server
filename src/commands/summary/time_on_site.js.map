{"version":3,"sources":["time_on_site.js"],"names":["ParseBase","moment","_","MDurationDistribution","MProject","MCityDistribution","MUniqueView","DATE_FORMAT","TimeOnSiteByHour","signature","COMMAND_ARGUMENT_BY_DAY","COMMAND_ARGUMENT_BY_MONTH","UNIT","DAY","MONTH","description","execute","args","options","countAtTime","countType","isArgumentsLegal","warn","countAtMoment","COMMAND_ARGUMENT_BY_UNIT","startAt","unix","endAt","clone","add","startAtMoment","endAtMoment","console","log","rawProjectList","getList","rawProject","projectId","get","projectName","format","DISPLAY_BY_MINUTE","rawRecordList","getRecordList","HOUR","totalStayMs","cityDistribute","rawRecord","cityDistributeId","createTime","oldCityDistribute","getCityDistributionRecord","mergeDistributionData","totalUv","getTotalUv","isSuccess","replaceUvRecord","DATABASE_BY_UNIT","isMoment","isValid"],"mappings":"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","sourcesContent":["import ParseBase from '~/src/commands/base'\nimport moment from 'moment'\nimport _ from 'lodash'\nimport MDurationDistribution from '~/src/model/parse/duration_distribution'\nimport MProject from '~/src/model/project/project'\nimport MCityDistribution from '~/src/model/parse/city_distribution'\nimport MUniqueView from '~/src/model/summary/unique_view'\nimport DATE_FORMAT from '~/src/constants/date_format'\n\nclass TimeOnSiteByHour extends ParseBase {\n  static get signature () {\n    return `\n     Summary:TimeOnSite \n     {countAtTime:所统计时间, day 为 ${DATE_FORMAT.COMMAND_ARGUMENT_BY_DAY}, month 为 ${DATE_FORMAT.COMMAND_ARGUMENT_BY_MONTH}}\n     {countType:统计类型${DATE_FORMAT.UNIT.DAY}/${DATE_FORMAT.UNIT.MONTH}}\n     `\n  }\n\n  static get description () {\n    return '[按天/按月] 根据历史数据, 汇总分析记录指定时间范围内用户停留时长'\n  }\n\n  async execute (args, options) {\n    let { countAtTime, countType } = args\n    if (this.isArgumentsLegal(args, options) === false) {\n      this.warn('参数不正确, 自动退出')\n      return false\n    }\n    let countAtMoment = moment(countAtTime, DATE_FORMAT.COMMAND_ARGUMENT_BY_UNIT[countType])\n    let startAt = countAtMoment.unix();\n    let endAt = 0\n    switch (countType) {\n      case DATE_FORMAT.UNIT.DAY:\n        endAt = countAtMoment.clone().add(1, DATE_FORMAT.UNIT.DAY).unix() - 1 //  为mutable数据, 调用add后原值会变\n        break\n      case DATE_FORMAT.UNIT.MONTH:\n        endAt = countAtMoment.clone().add(1, DATE_FORMAT.UNIT.MONTH).unix() - 1\n        break\n      default:\n        endAt = startAt + 86400 - 1\n    }\n    let startAtMoment = moment.unix(startAt)\n    let endAtMoment = moment.unix(endAt)\n    console.log('startAtMoment ',startAtMoment);\n    console.log('endAtMoment ',endAtMoment);\n    let rawProjectList = await MProject.getList()\n    for (let rawProject of rawProjectList) {\n      let projectId = _.get(rawProject, 'id', '')\n      let projectName = _.get(rawProject, 'project_name', '')\n      if (projectId === 0 || projectId === '') {\n        continue\n      }\n      this.log(`开始处理项目${projectId}(${projectName})的数据`)\n      this.log(`时间范围:${startAtMoment.format(DATE_FORMAT.DISPLAY_BY_MINUTE) + ':00'}~${endAtMoment.format(DATE_FORMAT.DISPLAY_BY_MINUTE) + ':59'}`)\n      let rawRecordList = await MDurationDistribution.getRecordList(projectId, startAt, endAt, DATE_FORMAT.UNIT.HOUR)\n      this.log('time_on-site.js rawRecordList',rawRecordList);\n      let totalStayMs = 0\n      let cityDistribute = {}\n      for (let rawRecord of rawRecordList) {\n        totalStayMs = totalStayMs + _.get(rawRecord, ['total_stay_ms'], 0)\n        let cityDistributeId = _.get(rawRecord, ['city_distribute_id'], 0)\n        let createTime = _.get(rawRecord, ['create_time'], 0)\n        let oldCityDistribute = await MCityDistribution.getCityDistributionRecord(cityDistributeId, projectId, createTime)\n        cityDistribute = await MCityDistribution.mergeDistributionData(oldCityDistribute, cityDistribute)\n      }\n      let totalUv = await MUniqueView.getTotalUv(projectId, countAtTime, countType);\n      this.log('totalUv ',totalUv);\n      // 录入数据\n      let isSuccess = await MDurationDistribution.replaceUvRecord(\n        projectId,\n        totalStayMs,\n        totalUv,\n        countAtMoment.format(DATE_FORMAT.DATABASE_BY_UNIT[countType]),\n        countType,\n        cityDistribute\n      )\n      this.log(`项目${projectId}(${projectName})数据处理完毕, 数据录入 => ${isSuccess ? '成功' : '失败'}`)\n    }\n  }\n\n  /**\n   * [可覆盖]检查请求参数, 默认检查传入的时间范围是否正确, 如果有自定义需求可以在子类中进行覆盖\n   * @param {*} args\n   * @param {*} options\n   * @return {Boolean}\n   */\n  isArgumentsLegal (args, options) {\n    let { countAtTime, countType } = args\n\n    if (countType !== DATE_FORMAT.UNIT.MONTH && countType !== DATE_FORMAT.UNIT.DAY) {\n      this.warn(`统计类别不为 ${DATE_FORMAT.UNIT.MONTH}或:${DATE_FORMAT.UNIT.DAY} `, 'countType => ', countType)\n      return false\n    }\n    let countAtMoment = moment(countAtTime, DATE_FORMAT.COMMAND_ARGUMENT_BY_UNIT[countType])\n    if (moment.isMoment(countAtMoment) === false || countAtMoment.isValid() === false) {\n      this.warn(`countAtTime解析失败`, ' => ', countAtTime)\n      return false\n    }\n    return true\n  }\n}\n\nexport default TimeOnSiteByHour\n"],"file":"time_on_site.js"}