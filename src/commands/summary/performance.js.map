{"version":3,"sources":["performance.js"],"names":["Base","moment","_","MProject","MPerformance","MCityDistribution","DATE_FORMAT","PerformanceSummary","signature","UNIT","HOUR","COMMAND_ARGUMENT_BY_HOUR","DAY","COMMAND_ARGUMENT_BY_DAY","MONTH","COMMAND_ARGUMENT_BY_MONTH","description","execute","args","options","log","countAtTime","countType","isArgumentsLegal","warn","countAtMoment","COMMAND_ARGUMENT_BY_UNIT","startAt","unix","endAt","clone","add","startAtMoment","endAtMoment","rawProjectList","getList","rawProject","projectId","get","projectName","format","DISPLAY_BY_MINUTE","handleInMemery","getType","MINUTE","rawResultList","resultMap","allCityIdList","rawResult","sum_indicator_value","sumValue","pv","indicator","url","city_distribute_id","cityDistributionId","oldPv","oldSumValue","set","push","has","cityIdLen","length","step","recordList","current","sliceIdList","slice","getByIdListInOneMonth","concat","cityMap","rawRecord","id","rawJson","JSON","parse","indicatorKeys","Object","keys","urlKeys","cityIdList","cityDistributionJson","cityId","rawCityDistributionJson","country","province","city","isSuccess","replaceInto","handleSummary","indicatorMapKeys","INDICATOR_TYPE_MAP","urlList","getDistinctUrlListInRange","cityDistribute","getCityDistributeInRange","summaryCountList","getFlattenCityRecordListInDistribution","result","summaryCount","isMoment","isValid"],"mappings":"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","sourcesContent":["import Base from '~/src/commands/base'\nimport moment from 'moment'\nimport _ from 'lodash'\nimport MProject from '~/src/model/project/project'\nimport MPerformance from '~/src/model/parse/performance'\nimport MCityDistribution from '~/src/model/parse/city_distribution'\nimport DATE_FORMAT from '~/src/constants/date_format'\n\nclass PerformanceSummary extends Base {\n  static get signature () {\n    return `\n     Summary:Performance\n\n     {countAtTime:所统计时间, ${DATE_FORMAT.UNIT.HOUR} 为 ${DATE_FORMAT.COMMAND_ARGUMENT_BY_HOUR}, ${DATE_FORMAT.UNIT.DAY} 为 ${DATE_FORMAT.COMMAND_ARGUMENT_BY_DAY}, ${DATE_FORMAT.UNIT.MONTH} 为 ${DATE_FORMAT.COMMAND_ARGUMENT_BY_MONTH}}\n     {countType:统计类型${DATE_FORMAT.UNIT.HOUR}/${DATE_FORMAT.UNIT.DAY}/${DATE_FORMAT.UNIT.MONTH}}\n     `\n  }\n\n  static get description () {\n    return '[按小时/按天/按月] 根据历史数据, 汇总分析记录指定时间范围内的性能指标数据'\n  }\n\n  async execute (args, options) {\n    this.log('performance args ', args);\n    let { countAtTime, countType } = args;\n    if (this.isArgumentsLegal(args, options) === false) {\n      this.warn('参数不正确, 自动退出')\n      return false\n    }\n    let countAtMoment = moment(countAtTime, DATE_FORMAT.COMMAND_ARGUMENT_BY_UNIT[countType])\n    let startAt = countAtMoment.unix()\n    this.log('performance countAtMoment ', countAtMoment);\n    this.log('performance startAt ', startAt);\n    let endAt = 0\n    switch (countType) {\n      case DATE_FORMAT.UNIT.HOUR:\n        endAt = countAtMoment.clone().add(1, 'hours').unix() - 1\n        break\n      case DATE_FORMAT.UNIT.DAY:\n        endAt = countAtMoment.clone().add(1, 'days').unix() - 1\n        break\n      case DATE_FORMAT.UNIT.MONTH:\n        endAt = countAtMoment.clone().add(1, 'months').unix() - 1\n        break\n      default:\n        endAt = startAt + 24 * 60 * 60 - 1\n    }\n    this.log('performance endAt ', endAt);\n    let startAtMoment = moment.unix(startAt)\n    let endAtMoment = moment.unix(endAt)\n    this.log('performance startAtMoment ', startAtMoment);\n    this.log('performance endAtMoment ', endAtMoment);\n\n    let rawProjectList = await MProject.getList()\n    this.log('项目列表获取完毕, =>', rawProjectList)\n    for (let rawProject of rawProjectList) {\n      let projectId = _.get(rawProject, 'id', '')\n      let projectName = _.get(rawProject, 'project_name', '')\n      if (projectId === 0 || projectId === '') {\n        continue\n      }\n      this.log(`开始处理项目${projectId}(${projectName})的数据`)\n      this.log(`[${projectId}(${projectName})] 时间范围:${startAtMoment.format(DATE_FORMAT.DISPLAY_BY_MINUTE) + ':00'}~${endAtMoment.format(DATE_FORMAT.DISPLAY_BY_MINUTE) + ':59'}`)\n      await this.handleInMemery(projectId, projectName, startAt, endAt, startAtMoment, endAtMoment, countAtMoment, countType)\n      this.log(`项目${projectId}(${projectName})数据处理完毕`)\n    }\n  }\n\n  // 数据全部读取出来，放在内存里统一处理\n  async handleInMemery (projectId, projectName, startAt, endAt, startAtMoment, endAtMoment, countAtMoment, countType) {\n    let getType\n    switch (countType) {\n      case DATE_FORMAT.UNIT.HOUR:\n        getType = DATE_FORMAT.UNIT.MINUTE\n        break\n      case DATE_FORMAT.UNIT.DAY:\n        getType = DATE_FORMAT.UNIT.HOUR\n        break\n      case DATE_FORMAT.UNIT.MONTH:\n        getType = DATE_FORMAT.UNIT.DAY\n        break\n      default:\n        this.log('指令Summary:Performance参数不对，自动退出！')\n        return\n    }\n    this.log(`performance getType `,getType);\n    let rawResultList = await MPerformance.getList(projectId, startAt, endAt, {}, getType);\n    this.log(`performance rawResultList`,rawResultList);\n    let resultMap = {}\n    let allCityIdList = []\n    for (let rawResult of rawResultList) {\n      const {\n        sum_indicator_value: sumValue,\n        pv,\n        indicator,\n        url,\n        city_distribute_id: cityDistributionId\n      } = rawResult\n      let oldPv = _.get(resultMap, [indicator, url, 'pv'], 0)\n      let oldSumValue = _.get(resultMap, [indicator, url, 'sumValue'], 0)\n      _.set(resultMap, [indicator, url, 'pv'], pv + oldPv)\n      _.set(resultMap, [indicator, url, 'sumValue'], sumValue + oldSumValue)\n      allCityIdList.push(cityDistributionId)\n      if (_.has(resultMap, [indicator, url, 'cityIdList'])) {\n        resultMap[indicator][url]['cityIdList'].push(cityDistributionId)\n      } else {\n        _.set(resultMap, [indicator, url, 'cityIdList'], [cityDistributionId])\n      }\n    }\n    // 处理城市分布数据,由于mysql限制，一次查10000条数据\n    let cityIdLen = allCityIdList.length\n    let step = 10000\n    let recordList = []\n    for (let current = 0; current < cityIdLen; current += step) {\n      let sliceIdList = allCityIdList.slice(current, current + step)\n      let rawResultList = await MCityDistribution.getByIdListInOneMonth(projectId, sliceIdList, startAt)\n      recordList = recordList.concat(rawResultList)\n    }\n\n    let cityMap = {}\n    for (let rawRecord of recordList) {\n      let id = _.get(rawRecord, ['id'], 0)\n      let rawJson = JSON.parse(_.get(rawRecord, ['city_distribute_json'], '{}'))\n      _.set(cityMap, [id], rawJson)\n    }\n\n    // 插入数据\n    let indicatorKeys = Object.keys(resultMap)\n    for (let indicator of indicatorKeys) {\n      let urlKeys = Object.keys(resultMap[indicator])\n      for (let url of urlKeys) {\n        const {\n          pv,\n          sumValue,\n          cityIdList\n        } = _.get(resultMap, [indicator, url], {})\n\n        // 先处理城市分布数据\n        let cityDistributionJson = {}\n        for (let cityId of cityIdList) {\n          let rawCityDistributionJson = _.get(cityMap, [cityId], {})\n          for (let country of Object.keys(rawCityDistributionJson)) {\n            for (let province of Object.keys(rawCityDistributionJson[country])) {\n              for (let city of Object.keys(rawCityDistributionJson[country][province])) {\n                let pv = _.get(rawCityDistributionJson, [country, province, city, 'pv'], 0)\n                let oldPv = _.get(cityDistributionJson, [country, province, city, 'pv'], 0)\n                let sumValue = _.get(rawCityDistributionJson, [country, province, city, 'sum_indicator_value'], 0)\n                let oldSumValue = _.get(cityDistributionJson, [country, province, city, 'sum_indicator_value'], 0)\n                _.set(cityDistributionJson, [country, province, city, 'pv'], pv + oldPv)\n                _.set(cityDistributionJson, [country, province, city, 'sum_indicator_value'], sumValue + oldSumValue)\n              }\n            }\n          }\n        }\n\n        // 拿到城市分布数据再更新数据\n        let isSuccess = await MPerformance.replaceInto(\n          projectId,\n          url,\n          indicator,\n          countAtMoment.unix(),\n          countType,\n          sumValue,\n          pv,\n          cityDistributionJson\n        )\n        this.log(`时间范围:${startAtMoment.format(DATE_FORMAT.DISPLAY_BY_MINUTE) + ':00'}~${endAtMoment.format(DATE_FORMAT.DISPLAY_BY_MINUTE) + ':59'}`, ` ${projectId}(${projectName})下, ${indicator}指标下url=>${url}城市分布数据处理完毕, 是否更新成功 => `, isSuccess)\n      }\n    }\n  }\n\n  // 实时的与数据库交互拿数据处理数据，时间花在与数据库通讯上，不值\n  async handleSummary (projectId, projectName, startAt, endAt, startAtMoment, endAtMoment, countAtMoment, countType, getType) {\n    let indicatorMapKeys = Object.keys(MPerformance.INDICATOR_TYPE_MAP)\n    for (let indicator of indicatorMapKeys) {\n      // 统一使用分钟级别的数据\n      let urlList = await MPerformance.getDistinctUrlListInRange(projectId, [indicator], startAt, endAt, getType)\n      this.log(`${projectId}(${projectName})下, ${indicator}指标url列表获取完毕, 共`, urlList.length, `条url`)\n      for (let url of urlList) {\n        let cityDistribute = await MPerformance.getCityDistributeInRange(projectId, [url], [indicator], startAt, endAt, getType)\n        this.log(`时间范围:${startAtMoment.format(DATE_FORMAT.DISPLAY_BY_MINUTE) + ':00'}~${endAtMoment.format(DATE_FORMAT.DISPLAY_BY_MINUTE) + ':59'}`, ` ${projectId}(${projectName})下, ${indicator}指标下url=>${url}城市分布列表获取完毕`)\n        let summaryCountList = MCityDistribution.getFlattenCityRecordListInDistribution(cityDistribute)\n\n        let result = {\n          sum_indicator_value: 0,\n          pv: 0\n        }\n        for (let summaryCount of summaryCountList) {\n          result['sum_indicator_value'] = result['sum_indicator_value'] + summaryCount['sum_indicator_value']\n          result['pv'] = result['pv'] + summaryCount['pv']\n        }\n\n        this.log(`[${projectId}(${projectName})] 城市分布数据获取完毕 =>`, cityDistribute, `summary=> `, result, `将记录更新到数据库中`)\n        let isSuccess = await MPerformance.replaceInto(\n          projectId,\n          url,\n          indicator,\n          countAtMoment.unix(),\n          countType,\n          result['sum_indicator_value'],\n          result['pv'],\n          cityDistribute\n        )\n        this.log(`时间范围:${startAtMoment.format(DATE_FORMAT.DISPLAY_BY_MINUTE) + ':00'}~${endAtMoment.format(DATE_FORMAT.DISPLAY_BY_MINUTE) + ':59'}`, ` ${projectId}(${projectName})下, ${indicator}指标下url=>${url}城市分布数据处理完毕, 是否更新成功 => `, isSuccess)\n      }\n      this.log(`项目${projectId}(${projectName}) ${indicator}数据处理完毕`)\n    }\n  }\n\n  /**\n   * [可覆盖]检查请求参数, 默认检查传入的时间范围是否正确, 如果有自定义需求可以在子类中进行覆盖\n   * @param {*} args\n   * @param {*} options\n   * @return {Boolean}\n   */\n  isArgumentsLegal (args, options) {\n    let { countAtTime, countType } = args\n\n    if (countType !== DATE_FORMAT.UNIT.MONTH && countType !== DATE_FORMAT.UNIT.DAY && countType !== DATE_FORMAT.UNIT.HOUR) {\n      this.warn(`统计类别不为 ${DATE_FORMAT.UNIT.MONTH}/${DATE_FORMAT.UNIT.DAY}/${DATE_FORMAT.UNIT.HOUR} `, 'countType => ', countType)\n      return false\n    }\n    let countAtMoment = moment(countAtTime, DATE_FORMAT.COMMAND_ARGUMENT_BY_UNIT[countType])\n    if (moment.isMoment(countAtMoment) === false || countAtMoment.isValid() === false) {\n      this.warn(`countAtTime解析失败`, ' => ', countAtTime)\n      return false\n    }\n    return true\n  }\n}\n\nexport default PerformanceSummary\n"],"file":"performance.js"}