{"version":3,"sources":["uv.js"],"names":["Base","moment","_","MProject","MUvRecord","MUniqueView","MCityDistribution","DATE_FORMAT","UVSummary","signature","UNIT","HOUR","COMMAND_ARGUMENT_BY_HOUR","DAY","COMMAND_ARGUMENT_BY_DAY","MONTH","COMMAND_ARGUMENT_BY_MONTH","description","execute","args","options","countAtTime","countType","isArgumentsLegal","warn","countAtMoment","COMMAND_ARGUMENT_BY_UNIT","startAt","unix","endAt","clone","add","startAtMoment","endAtMoment","rawProjectList","getList","log","rawProject","projectId","get","projectDesc","format","DISPLAY_BY_MINUTE","handleHour","handleOther","getType","rawRecordList","getRawRecordListInRange","totalUv","cityIdList","rawRecord","city_distribute_id","cityDistributeId","total_count","count","push","cityDistribute","rawCityRecordList","getByIdListInOneMonth","rawCityRecord","cityDistributeString","rawCityJson","JSON","parse","country","Object","keys","province","city","oldCount","set","replaceUvRecord","DATABASE_BY_UNIT","getCityDistributeInRange","uvCountList","getFlattenCityRecordListInDistribution","uvCount","isMoment","isValid"],"mappings":"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","sourcesContent":["import Base from '~/src/commands/base'\nimport moment from 'moment'\nimport _ from 'lodash'\nimport MProject from '~/src/model/project/project'\nimport MUvRecord from '~/src/model/parse/uv_record'\nimport MUniqueView from '~/src/model/summary/unique_view'\nimport MCityDistribution from '~/src/model/parse/city_distribution'\nimport DATE_FORMAT from '~/src/constants/date_format'\n\nclass UVSummary extends Base {\n  static get signature () {\n    return `\n     Summary:UV \n\n     {countAtTime:所统计时间, ${DATE_FORMAT.UNIT.HOUR} 为 ${DATE_FORMAT.COMMAND_ARGUMENT_BY_HOUR}, ${DATE_FORMAT.UNIT.DAY} 为 ${DATE_FORMAT.COMMAND_ARGUMENT_BY_DAY}, ${DATE_FORMAT.UNIT.MONTH} 为 ${DATE_FORMAT.COMMAND_ARGUMENT_BY_MONTH}}\n     {countType:统计类型${DATE_FORMAT.UNIT.HOUR}/${DATE_FORMAT.UNIT.DAY}/${DATE_FORMAT.UNIT.MONTH}}\n     `\n  }\n\n  static get description () {\n    return '[按小时/按天/按月] 根据历史数据, 汇总分析记录指定时间范围内的uv'\n  }\n\n  async execute (args, options) {\n    let { countAtTime, countType } = args\n    if (this.isArgumentsLegal(args, options) === false) {\n      this.warn('参数不正确, 自动退出')\n      return false\n    }\n    let countAtMoment = moment(countAtTime, DATE_FORMAT.COMMAND_ARGUMENT_BY_UNIT[countType])\n    let startAt = countAtMoment.unix()\n    let endAt = 0\n    switch (countType) {\n      case DATE_FORMAT.UNIT.HOUR:\n        endAt = countAtMoment.clone().add(1, 'hours').unix() - 1\n        break\n      case DATE_FORMAT.UNIT.DAY:\n        endAt = countAtMoment.clone().add(1, 'days').unix() - 1\n        break\n      case DATE_FORMAT.UNIT.MONTH:\n        endAt = countAtMoment.clone().add(1, 'months').unix() - 1\n        break\n      default:\n        endAt = startAt + 86400 - 1\n    }\n    let startAtMoment = moment.unix(startAt)\n    let endAtMoment = moment.unix(endAt)\n\n    let rawProjectList = await MProject.getList()\n    this.log('项目列表获取完毕, =>', rawProjectList)\n    for (let rawProject of rawProjectList) {\n      let projectId = _.get(rawProject, 'id', '')\n      let projectDesc = _.get(rawProject, 'c_desc', '')\n      if (projectId === 0 || projectId === '') {\n        continue\n      }\n      this.log(`开始处理项目${projectId}(${projectDesc})的数据`)\n      this.log(`[${projectId}(${projectDesc})] 时间范围:${startAtMoment.format(DATE_FORMAT.DISPLAY_BY_MINUTE) + ':00'}~${endAtMoment.format(DATE_FORMAT.DISPLAY_BY_MINUTE) + ':59'}`)\n      // 如果是hour，则用原始表数据\n      if (countType === DATE_FORMAT.UNIT.HOUR) {\n        await this.handleHour(projectId, startAt, endAt, countAtMoment, countType, projectDesc)\n      } else {\n        await this.handleOther(projectId, startAt, endAt, countAtMoment, countType, projectDesc)\n      }\n      this.log(`项目${projectId}(${projectDesc})处理完毕`)\n    }\n  }\n\n  async handleOther (projectId, startAt, endAt, countAtMoment, countType, projectDesc) {\n    let getType\n    switch (countType) {\n      case DATE_FORMAT.UNIT.DAY:\n        getType = DATE_FORMAT.UNIT.HOUR\n        break\n      case DATE_FORMAT.UNIT.MONTH:\n        getType = DATE_FORMAT.UNIT.DAY\n        break\n      default:\n        return\n    }\n    let rawRecordList = await MUniqueView.getRawRecordListInRange(projectId, startAt, endAt, getType)\n    let totalUv = 0\n    let cityIdList = []\n    for (let rawRecord of rawRecordList) {\n      // 更新总数\n      let { city_distribute_id: cityDistributeId, total_count: count } = rawRecord\n      totalUv += count\n      // 添加城市id\n      cityIdList.push(cityDistributeId)\n    }\n    // 处理城市分布\n    let cityDistribute = {}\n    let rawCityRecordList = await MCityDistribution.getByIdListInOneMonth(projectId, cityIdList, startAt)\n    for (let rawCityRecord of rawCityRecordList) {\n      let cityDistributeString = _.get(rawCityRecord, ['city_distribute_json'], {})\n      if (cityDistributeString === null) continue\n      let rawCityJson = JSON.parse(cityDistributeString)\n      for (let country of Object.keys(rawCityJson)) {\n        for (let province of Object.keys(rawCityJson[country])) {\n          for (let city of Object.keys(rawCityJson[country][province])) {\n            let oldCount = _.get(cityDistribute, [country, province, city], 0)\n            let count = _.get(rawCityJson, [country, province, city], 0)\n            _.set(cityDistribute, [country, province, city], count + oldCount)\n          }\n        }\n      }\n    }\n    this.log(`[${projectId}(${projectDesc})] 城市分布数据获取完毕 =>`, cityDistribute, `totalUv => ${totalUv}将记录更新到数据库中`)\n    MUniqueView.replaceUvRecord(\n      projectId,\n      totalUv,\n      countAtMoment.format(DATE_FORMAT.DATABASE_BY_UNIT[countType]),\n      countType,\n      cityDistribute\n    )\n  }\n  async handleHour (projectId, startAt, endAt, countAtMoment, countType, projectDesc) {\n    let cityDistribute = await MUvRecord.getCityDistributeInRange(projectId, startAt, endAt)\n    let uvCountList = MCityDistribution.getFlattenCityRecordListInDistribution(cityDistribute)\n    let totalUv = 0\n    for (let uvCount of uvCountList) {\n      totalUv = totalUv + uvCount\n    }\n    this.log(`[${projectId}(${projectDesc})] 城市分布数据获取完毕 =>`, cityDistribute, `totalUv => ${totalUv}将记录更新到数据库中`)\n    MUniqueView.replaceUvRecord(\n      projectId,\n      totalUv,\n      countAtMoment.format(DATE_FORMAT.DATABASE_BY_UNIT[countType]),\n      countType,\n      cityDistribute\n    )\n  }\n  /**\n   * [可覆盖]检查请求参数, 默认检查传入的时间范围是否正确, 如果有自定义需求可以在子类中进行覆盖\n   * @param {*} args\n   * @param {*} options\n   * @return {Boolean}\n   */\n  isArgumentsLegal (args, options) {\n    let { countAtTime, countType } = args\n\n    if (countType !== DATE_FORMAT.UNIT.MONTH && countType !== DATE_FORMAT.UNIT.DAY && countType !== DATE_FORMAT.UNIT.HOUR) {\n      this.warn(`统计类别不为 ${DATE_FORMAT.UNIT.MONTH}/${DATE_FORMAT.UNIT.DAY}/${DATE_FORMAT.UNIT.HOUR} `, 'countType => ', countType)\n      return false\n    }\n    let countAtMoment = moment(countAtTime, DATE_FORMAT.COMMAND_ARGUMENT_BY_UNIT[countType])\n    if (moment.isMoment(countAtMoment) === false || countAtMoment.isValid() === false) {\n      this.warn(`countAtTime解析失败`, ' => ', countAtTime)\n      return false\n    }\n    return true\n  }\n}\n\nexport default UVSummary\n"],"file":"uv.js"}