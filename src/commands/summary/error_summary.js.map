{"version":3,"sources":["error_summary.js"],"names":["Base","DATE_FORMAT","moment","_","MProject","MMonitor","MErrorSummary","MCityDistribution","isUrl","URL","SummaryError","signature","UNIT","MINUTE","COMMAND_ARGUMENT_BY_MINUTE","HOUR","COMMAND_ARGUMENT_BY_HOUR","DAY","COMMAND_ARGUMENT_BY_DAY","description","execute","args","options","countAtTime","countType","isArgumentsLegal","warn","countAtMoment","COMMAND_ARGUMENT_BY_UNIT","startAt","unix","endAt","clone","add","startAtMoment","endAtMoment","log","rawProjectList","getList","rawProject","projectId","get","projectName","format","DIAPLAY_BY_MINUTE","handleMinute","handleOther","getType","rawResultList","getErrorSummaryByCountType","resultMap","cityIdSet","Set","rawResult","error_name","errorName","error_count","errorCount","url_path","url","city_distribution_id","cityDistrubutionId","oldTotalCount","set","has","push","allCityIdList","cityIdLen","length","step","recordList","current","sliceIdList","slice","getByIdListInOneMonth","concat","cityMap","rawRecord","id","rawJson","JSON","parse","updateCount","errorNameList","Object","keys","urlList","totalCount","idList","cityDistributionJson","cityId","rawCityDistributionJson","country","province","city","count","oldCount","cityDistributionJsonString","stringify","isSuccess","replaceSummaryRecord","rawRecordMonitorList","getRecordListInRange","errorTypeNameUrlMap","error_type","errorType","urlPath","urlObj","host","pathname","errorCountByCity","oldErrorCount","insertCount","cityDistribution","cityDistrubutionJson","isMoment","isValid"],"mappings":"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","sourcesContent":["import Base from '~/src/commands/base'\nimport DATE_FORMAT from '~/src/constants/date_format'\nimport moment from 'moment'\nimport _ from 'lodash'\nimport MProject from '~/src/model/project/project'\nimport MMonitor from '~/src/model/parse/monitor'\nimport MErrorSummary from '~/src/model/summary/error_summary'\nimport MCityDistribution from '~/src/model/parse/city_distribution'\nimport isUrl from 'is-url'\nimport URL from 'url'\nclass SummaryError extends Base {\n  static get signature () {\n    return `\n     Summary:Error\n\n     {countAtTime:所统计时间, ${DATE_FORMAT.UNIT.MINUTE} 为 ${DATE_FORMAT.COMMAND_ARGUMENT_BY_MINUTE},${DATE_FORMAT.UNIT.HOUR} 为 ${DATE_FORMAT.COMMAND_ARGUMENT_BY_HOUR}, ${DATE_FORMAT.UNIT.DAY} 为 ${DATE_FORMAT.COMMAND_ARGUMENT_BY_DAY}}\n     {countType:统计类型${DATE_FORMAT.UNIT.MINUTE}/${DATE_FORMAT.UNIT.HOUR}/${DATE_FORMAT.UNIT.DAY}} \n     `\n  }\n\n  static get description () {\n    return '[按分钟/按小时/按天] 根据历史数据, 汇总分析错误数'\n  }\n\n  async execute (args, options) {\n    let { countAtTime, countType } = args\n    if (this.isArgumentsLegal(args, options) === false) {\n      this.warn('参数不正确, 自动退出')\n      return false\n    }\n    let countAtMoment = moment(countAtTime, DATE_FORMAT.COMMAND_ARGUMENT_BY_UNIT[countType])\n    let startAt = countAtMoment.unix()\n    let endAt = 0\n    switch (countType) {\n      case DATE_FORMAT.UNIT.MINUTE:\n        endAt = countAtMoment.clone().add(1, 'minute').unix() - 1\n        break\n      case DATE_FORMAT.UNIT.HOUR:\n        endAt = countAtMoment.clone().add(1, 'hours').unix() - 1\n        break\n      case DATE_FORMAT.UNIT.DAY:\n        endAt = countAtMoment.clone().add(1, 'days').unix() - 1\n        break\n      default:\n        endAt = startAt + 3600 - 1\n    }\n    let startAtMoment = moment.unix(startAt)\n    let endAtMoment = moment.unix(endAt)\n    this.log('startAtMoment ',startAtMoment);\n    this.log('endAtMoment ',endAtMoment);\n    let rawProjectList = await MProject.getList()\n    this.log('项目列表获取完毕, =>', rawProjectList)\n    for (let rawProject of rawProjectList) {\n      let projectId = _.get(rawProject, 'id', '')\n      let projectName = _.get(rawProject, 'project_name', '')\n      if (projectId === 0 || projectId === '') {\n        continue\n      }\n      this.log(`开始处理项目${projectId}(${projectName})的数据`)\n      this.log(`[${projectId}(${projectName})] 时间范围:${startAtMoment.format(DATE_FORMAT.DIAPLAY_BY_MINUTE) + ':00'}~${endAtMoment.format(DATE_FORMAT.DIAPLAY_BY_MINUTE) + ':59'}`)\n\n      // 如果countType是分钟，查询原始数据表\n      if (countType === DATE_FORMAT.UNIT.MINUTE) {\n        await this.handleMinute(projectId, projectName, startAt, endAt, countType)\n      } else {\n        await this.handleOther(projectId, projectName, startAt, endAt, countType)\n      }\n    }\n  }\n\n  async handleOther (projectId, projectName, startAt, endAt, countType) {\n    // 如果countType是小时或天，查询结果表errorSummary里分钟的数据即可\n    let getType\n    switch (countType) {\n      case DATE_FORMAT.UNIT.HOUR:\n        getType = DATE_FORMAT.UNIT.MINUTE\n        break\n      case DATE_FORMAT.UNIT.DAY:\n        getType = DATE_FORMAT.UNIT.HOUR\n        break\n      default:\n        this.log(`指令Summary:Error下countType不是day、hour、minute之一，自动退出！`)\n        return\n    }\n    let rawResultList = await MErrorSummary.getErrorSummaryByCountType(projectId, startAt, endAt, getType)\n    let resultMap = {}\n    let cityIdSet = new Set()\n    for (let rawResult of rawResultList) {\n      const {\n        error_name: errorName,\n        error_count: errorCount,\n        url_path: url,\n        city_distribution_id: cityDistrubutionId\n      } = rawResult\n      // 设置错误总数\n      let oldTotalCount = _.get(resultMap, [errorName, url, 'totalCount'], 0)\n      _.set(resultMap, [errorName, url, 'totalCount'], oldTotalCount + errorCount)\n      cityIdSet.add(cityDistrubutionId)\n      if (_.has(resultMap, [errorName, url, 'idList'])) {\n        resultMap[errorName][url]['idList'].push(cityDistrubutionId)\n      } else {\n        resultMap[errorName][url]['idList'] = [cityDistrubutionId]\n      }\n    }\n    // 获取城市id全部数据放到内存\n    // 处理城市分布数据,由于mysql限制，一次查10000条数据\n    let allCityIdList = [...cityIdSet]\n    let cityIdLen = allCityIdList.length\n    let step = 10000\n    let recordList = []\n    for (let current = 0; current < cityIdLen; current += step) {\n      let sliceIdList = allCityIdList.slice(current, current + step)\n      let rawResultList = await MCityDistribution.getByIdListInOneMonth(projectId, sliceIdList, startAt)\n      recordList = recordList.concat(rawResultList)\n    }\n    let cityMap = {}\n    for (let rawRecord of recordList) {\n      let id = _.get(rawRecord, ['id'], 0)\n      let rawJson = JSON.parse(_.get(rawRecord, ['city_distribute_json'], '{}'))\n      _.set(cityMap, [id], rawJson)\n    }\n\n    let updateCount = 0\n    let errorNameList = Object.keys(resultMap)\n    for (let errorName of errorNameList) {\n      let urlList = Object.keys(resultMap[errorName])\n      for (let url of urlList) {\n        let totalCount = _.get(resultMap, [errorName, url, 'totalCount'], 0)\n        let idList = _.get(resultMap, [errorName, url, 'idList'], [])\n\n        // 开始处理城市分布数据\n        // 先处理城市分布数据\n        let cityDistributionJson = {}\n        for (let cityId of idList) {\n          let rawCityDistributionJson = _.get(cityMap, [cityId], {})\n          for (let country of Object.keys(rawCityDistributionJson)) {\n            for (let province of Object.keys(rawCityDistributionJson[country])) {\n              for (let city of Object.keys(rawCityDistributionJson[country][province])) {\n                let count = _.get(rawCityDistributionJson, [country, province, city], 0)\n                let oldCount = _.get(cityDistributionJson, [country, province, city], 0)\n                _.set(cityDistributionJson, [country, province, city], count + oldCount)\n              }\n            }\n          }\n        }\n        let cityDistributionJsonString = JSON.stringify(cityDistributionJson)\n        let isSuccess = await MErrorSummary.replaceSummaryRecord(projectId, startAt, countType, 8, errorName, url, totalCount, cityDistributionJsonString)\n        if (isSuccess) {\n          updateCount++\n        }\n      }\n    }\n    this.log(`项目${projectId}(${projectName})处理完毕, 共插入数据${updateCount}条。`)\n  }\n  async handleMinute (projectId, projectName, startAt, endAt, countType) {\n    let rawRecordMonitorList = await MMonitor.getRecordListInRange(projectId, startAt, endAt)\n    this.log('rawRecordMonitorList',rawRecordMonitorList);\n    let errorTypeNameUrlMap = {}\n    for (let rawRecord of rawRecordMonitorList) {\n      const {\n        error_type: errorType,\n        error_name: errorName,\n        url,\n        country,\n        province,\n        city\n      } = rawRecord\n      let urlPath\n      if (isUrl(url) === false) {\n        urlPath = url\n      } else {\n        let urlObj = new URL.URL(url)\n        urlPath = urlObj.host + urlObj.pathname\n      }\n      let errorCountByCity = _.get(errorTypeNameUrlMap, [errorType, errorName, urlPath, 'cityDistribution', country, province, city], 0)\n      _.set(errorTypeNameUrlMap, [errorType, errorName, urlPath, 'cityDistribution', country, province, city], errorCountByCity + 1)\n      let oldErrorCount = _.get(errorTypeNameUrlMap, [errorType, errorName, urlPath, 'errorCount'], 0)\n      _.set(errorTypeNameUrlMap, [errorType, errorName, urlPath, 'errorCount'], oldErrorCount + 1)\n    }\n    let insertCount = 0\n    for (let errorType of Object.keys(errorTypeNameUrlMap)) {\n      for (let errorName of Object.keys(errorTypeNameUrlMap[errorType])) {\n        for (let urlPath of Object.keys(errorTypeNameUrlMap[errorType][errorName])) {\n          const {\n            cityDistribution,\n            errorCount\n          } = _.get(errorTypeNameUrlMap, [errorType, errorName, urlPath], {})\n\n          // 替换errorSummary数据\n          const cityDistrubutionJson = JSON.stringify(cityDistribution)\n\n          const isSuccess = await MErrorSummary.replaceSummaryRecord(projectId, startAt, countType, errorType, errorName, urlPath, errorCount, cityDistrubutionJson)\n          if (isSuccess) {\n            insertCount++\n          }\n        }\n      }\n    }\n    this.log(`项目${projectId}(${projectName})处理完毕, 共插入数据${insertCount}条。`)\n  }\n\n  /**\n   * [可覆盖]检查请求参数, 默认检查传入的时间范围是否正确, 如果有自定义需求可以在子类中进行覆盖\n   * @param {*} args\n   * @param {*} options\n   * @return {Boolean}\n   */\n  isArgumentsLegal (args, options) {\n    let { countAtTime, countType } = args\n\n    if (countType !== DATE_FORMAT.UNIT.MINUTE && countType !== DATE_FORMAT.UNIT.DAY && countType !== DATE_FORMAT.UNIT.HOUR) {\n      this.warn(`统计类别不为 ${DATE_FORMAT.UNIT.MINUTE}/${DATE_FORMAT.UNIT.DAY}/${DATE_FORMAT.UNIT.HOUR} `, 'countType => ', countType)\n      return false\n    }\n    let countAtMoment = moment(countAtTime, DATE_FORMAT.COMMAND_ARGUMENT_BY_UNIT[countType])\n    if (moment.isMoment(countAtMoment) === false || countAtMoment.isValid() === false) {\n      this.warn(`countAtTime解析失败`, ' => ', countAtTime)\n      return false\n    }\n    return true\n  }\n}\n\nexport default SummaryError\n"],"file":"error_summary.js"}