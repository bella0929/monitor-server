{"version":3,"sources":["alarm.js"],"names":["moment","Base","redis","Alert","MMonitor","WatchIdList","MAlarmConfig","Util","MProject","MProjectMember","MAlarmLog","Logger","_","BASE_REDIS_KEY","MAX_QUERY_COUNT","MAX_SLEEP_COUNT","getRedisKey","id","WatchAlarm","constructor","currentQueryCounter","signature","description","execute","args","options","alarmConfigList","getAllEnabled","alarmConfig","project_id","projectId","error_name","errorName","time_range_s","timeRange","max_error_count","maxErrorCount","alarm_interval_s","alarmInterval","note","redisKey","hasAlertInAlarmInterval","asyncGet","log","waitForDispatch","sleepCounter","autoAlarm","then","catch","sleepMinutes","sendAlert","WATCH_UCID_LIST_BACKEND","sleep","configId","nowAt","unix","timeAgoAt","errorCount","getErrorCountForAlarm","project","get","projectName","projectRate","alarmUcidList","getAlarmUcidList","alarmMsg","isSuccess","insert","error","asyncSetex","ucidList","message","sendMessage"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,IAAP,MAAiB,qBAAjB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,KAAP,MAAkB,mCAAlB;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,OAAOC,WAAP,MAAwB,qBAAxB;AACA,OAAOC,YAAP,MAAyB,wCAAzB;AACA,OAAOC,IAAP,MAAiB,kCAAjB;AACA,OAAOC,QAAP,MAAqB,6BAArB;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AACA,OAAOC,SAAP,MAAsB,qCAAtB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA,MAAMC,cAAc,GAAG,0BAAvB;AACA,MAAMC,eAAe,GAAG,EAAxB;AACA,MAAMC,eAAe,GAAG,EAAxB;AAEA;AACA;AACA;;AACA,SAASC,WAAT,CAAsBC,EAAtB,EAA0B;AACxB,SAAOJ,cAAc,GAAGI,EAAxB;AACD;;AAED,MAAMC,UAAN,SAAyBjB,IAAzB,CAA8B;AAC5BkB,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,mBAAL,GAA2B,CAA3B;AACD;;AAEmB,aAATC,SAAS,GAAI;AACtB,WAAQ;AACZ;AACA,KAFI;AAGD;;AAEqB,aAAXC,WAAW,GAAI;AACxB,WAAO,2BAAP;AACD;;AAEY,QAAPC,OAAO,CAAEC,IAAF,EAAQC,OAAR,EAAiB;AAC5B,UAAMC,eAAe,GAAG,MAAMpB,YAAY,CAACqB,aAAb,EAA9B;;AACA,SAAK,IAAIC,WAAT,IAAwBF,eAAxB,EAAyC;AACvC,YAAM;AACJT,QAAAA,EADI;AAEJY,QAAAA,UAAU,EAAEC,SAFR;AAGJC,QAAAA,UAAU,EAAEC,SAHR;AAIJC,QAAAA,YAAY,EAAEC,SAJV;AAKJC,QAAAA,eAAe,EAAEC,aALb;AAMJC,QAAAA,gBAAgB,EAAEC,aANd;AAOJC,QAAAA;AAPI,UAQFX,WARJ;AASA,YAAMY,QAAQ,GAAGxB,WAAW,CAACC,EAAD,CAA5B;AACA,YAAMwB,uBAAuB,GAAG,MAAMvC,KAAK,CAACwC,QAAN,CAAeF,QAAf,CAAtC;;AACA,UAAIC,uBAAJ,EAA6B;AAC3B,aAAKE,GAAL,CAAU,KAAIb,SAAU,MAAKE,SAAU,MAAKE,SAAU,YAAtD;AACD,OAFD,MAEO;AACL,YAAIU,eAAe,GAAG,IAAtB;AACA,YAAIC,YAAY,GAAG,CAAnB;;AACA,eAAOD,eAAP,EAAwB;AACtB,cAAI,KAAKxB,mBAAL,GAA2BN,eAA/B,EAAgD;AAC9C,iBAAKgC,SAAL,CAAehB,SAAf,EAA0BE,SAA1B,EAAqCE,SAArC,EAAgDE,aAAhD,EAA+DE,aAA/D,EAA8EE,QAA9E,EAAwFD,IAAxF,EAA8FtB,EAA9F,EACG8B,IADH,CACQ,MAAM;AACV,mBAAK3B,mBAAL,GAA2B,KAAKA,mBAAL,GAA2B,CAAtD;AACD,aAHH,EAIG4B,KAJH,CAIS,MAAM;AACX,mBAAK5B,mBAAL,GAA2B,KAAKA,mBAAL,GAA2B,CAAtD;AACD,aANH;AAOA,iBAAKA,mBAAL,GAA2B,KAAKA,mBAAL,GAA2B,CAAtD;AACAwB,YAAAA,eAAe,GAAG,KAAlB;AACD,WAVD,MAUO;AACLC,YAAAA,YAAY,GAAGA,YAAY,GAAG,CAA9B;;AACA,gBAAIA,YAAY,GAAG9B,eAAnB,EAAoC;AAClC,oBAAMkC,YAAY,GAAGJ,YAAY,GAAG,EAApC;AACA,oBAAM,KAAKK,SAAL,CAAe7C,WAAW,CAAC8C,uBAA3B,EAAqD,gBAAeF,YAAa,YAAjF,CAAN;AACD;;AACD,kBAAM1C,IAAI,CAAC6C,KAAL,CAAW,IAAX,CAAN;AACD;AACF;AACF;AACF;AACF;;AAEc,QAATN,SAAS,CAAEhB,SAAF,EAAaE,SAAb,EAAwBE,SAAxB,EAAmCE,aAAnC,EAAkDE,aAAlD,EAAiEE,QAAjE,EAA2ED,IAA3E,EAAiFc,QAAjF,EAA2F;AACxG,UAAMC,KAAK,GAAGtD,MAAM,GAAGuD,IAAT,EAAd;AACA,UAAMC,SAAS,GAAGF,KAAK,GAAGpB,SAA1B;AACA,UAAMuB,UAAU,GAAG,MAAMrD,QAAQ,CAACsD,qBAAT,CAA+B5B,SAA/B,EAA0CE,SAA1C,EAAqDwB,SAArD,EAAgEF,KAAhE,CAAzB;AACA,SAAKX,GAAL,CAAU,KAAIb,SAAU,MAAKE,SAAU,OAAME,SAAU,WAAUuB,UAAW,EAA5E,EAJwG,CAKxG;;AACA,QAAIA,UAAU,IAAIrB,aAAlB,EAAiC;AAC/B,YAAMuB,OAAO,GAAG,MAAMnD,QAAQ,CAACoD,GAAT,CAAa9B,SAAb,CAAtB;;AACA,YAAM+B,WAAW,GAAGjD,CAAC,CAACgD,GAAF,CAAMD,OAAN,EAAe,CAAC,cAAD,CAAf,EAAiC7B,SAAjC,CAApB;;AACA,YAAMgC,WAAW,GAAGlD,CAAC,CAACgD,GAAF,CAAMD,OAAN,EAAe,CAAC,MAAD,CAAf,EAAyB,CAAzB,IAA8B,KAA9B,GAAsC,GAA1D;AACA,YAAMI,aAAa,GAAG,MAAMtD,cAAc,CAACuD,gBAAf,CAAgClC,SAAhC,CAA5B;AACA,YAAMwB,KAAK,GAAGtD,MAAM,GAAGuD,IAAT,EAAd;;AACA,UAAIvB,SAAS,KAAK,GAAlB,EAAuB;AACrBA,QAAAA,SAAS,GAAG,IAAZ;AACD;;AACD,UAAIiC,QAAQ,GAAI,MAAKJ,WAAY,QAAO7B,SAAU,YAAW8B,WAAY,SAAQ5B,SAAU,UAASuB,UAAW,WAAUrB,aAAc,gBAAeG,IAAK,IAA3J;AACA,WAAKI,GAAL,CAASsB,QAAT;AACA,YAAM,KAAKf,SAAL,CAAea,aAAf,EAA8BE,QAA9B,CAAN;AACA,YAAMC,SAAS,GAAG,MAAMxD,SAAS,CAACyD,MAAV,CAAiBrC,SAAjB,EAA4BuB,QAA5B,EAAsCC,KAAtC,EAA6CtB,SAA7C,EAAwDiC,QAAxD,CAAxB;;AACA,UAAIC,SAAS,KAAK,KAAlB,EAAyB;AACvBvD,QAAAA,MAAM,CAACyD,KAAP,CAAa,UAAb;AACD;;AACD,YAAMlE,KAAK,CAACmE,UAAN,CAAiB7B,QAAjB,EAA2BF,aAA3B,EAA0C,CAA1C,CAAN;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;;;AACiB,QAATY,SAAS,CAAEoB,QAAF,EAAYC,OAAZ,EAAqB;AAClCpE,IAAAA,KAAK,CAACqE,WAAN,CAAkBF,QAAlB,EAA4BC,OAA5B;AACD;;AA7F2B;;AAgG9B,eAAerD,UAAf","sourcesContent":["import moment from 'moment'\nimport Base from '~/src/commands/base'\nimport redis from '~/src/library/redis'\nimport Alert from '~/src/library/utils/modules/alert'\nimport MMonitor from '~/src/model/parse/monitor'\nimport WatchIdList from '~/src/configs/alarm'\nimport MAlarmConfig from '~/src/model/project/alarm/alarm_config'\nimport Util from '~/src/library/utils/modules/util'\nimport MProject from '~/src/model/project/project'\nimport MProjectMember from '~/src/model/project/project_member'\nimport MAlarmLog from '~/src/model/project/alarm/alarm_log'\nimport Logger from '~/src/library/logger'\nimport _ from 'lodash'\n\nconst BASE_REDIS_KEY = 'plat_fe_fee_watch_alarm_'\nconst MAX_QUERY_COUNT = 10\nconst MAX_SLEEP_COUNT = 60\n\n/**\n * @param {number} id 报警配置id\n */\nfunction getRedisKey (id) {\n  return BASE_REDIS_KEY + id\n}\n\nclass WatchAlarm extends Base {\n  constructor() {\n    super()\n    this.currentQueryCounter = 0\n  }\n\n  static get signature () {\n    return `\n        WatchDog:Alarm\n    `\n  }\n\n  static get description () {\n    return '[根据报警配置] 监测每一条报警配置对应的项目错误'\n  }\n\n  async execute (args, options) {\n    const alarmConfigList = await MAlarmConfig.getAllEnabled();\n    for (let alarmConfig of alarmConfigList) {\n      const {\n        id,\n        project_id: projectId,\n        error_name: errorName,\n        time_range_s: timeRange,\n        max_error_count: maxErrorCount,\n        alarm_interval_s: alarmInterval,\n        note\n      } = alarmConfig\n      const redisKey = getRedisKey(id)\n      const hasAlertInAlarmInterval = await redis.asyncGet(redisKey)\n      if (hasAlertInAlarmInterval) {\n        this.log(`项目${projectId}监听的${errorName}错误在${timeRange}秒内报警过，自动跳过`)\n      } else {\n        let waitForDispatch = true\n        let sleepCounter = 0\n        while (waitForDispatch) {\n          if (this.currentQueryCounter < MAX_QUERY_COUNT) {\n            this.autoAlarm(projectId, errorName, timeRange, maxErrorCount, alarmInterval, redisKey, note, id)\n              .then(() => {\n                this.currentQueryCounter = this.currentQueryCounter - 1\n              })\n              .catch(() => {\n                this.currentQueryCounter = this.currentQueryCounter - 1\n              })\n            this.currentQueryCounter = this.currentQueryCounter + 1\n            waitForDispatch = false\n          } else {\n            sleepCounter = sleepCounter + 1\n            if (sleepCounter > MAX_SLEEP_COUNT) {\n              const sleepMinutes = sleepCounter / 60\n              await this.sendAlert(WatchIdList.WATCH_UCID_LIST_BACKEND, `报警系统数据库查询已经睡眠${sleepMinutes}分钟，可能出问题了。`)\n            }\n            await Util.sleep(1000)\n          }\n        }\n      }\n    }\n  }\n\n  async autoAlarm (projectId, errorName, timeRange, maxErrorCount, alarmInterval, redisKey, note, configId) {\n    const nowAt = moment().unix()\n    const timeAgoAt = nowAt - timeRange\n    const errorCount = await MMonitor.getErrorCountForAlarm(projectId, errorName, timeAgoAt, nowAt)\n    this.log(`项目${projectId}监控的${errorName}错误最近${timeRange}秒错误数 => ${errorCount}`)\n    // 指定时间内报错数大于MaxErrorCount, 则报警\n    if (errorCount >= maxErrorCount) {\n      const project = await MProject.get(projectId);\n      const projectName = _.get(project, ['display_name'], projectId);\n      const projectRate = _.get(project, ['rate'], 0) / 10000 * 100;\n      const alarmUcidList = await MProjectMember.getAlarmUcidList(projectId);\n      const nowAt = moment().unix();\n      if (errorName === '*') {\n        errorName = '所有'\n      }\n      let alarmMsg = `项目【${projectName}】监控的【${errorName}】错误，抽样比例【${projectRate}%】 最近【${timeRange}】秒内错误数【${errorCount}】, 达到阈值【${maxErrorCount}】,触发报警, 报警备注【${note}】。`\n      this.log(alarmMsg)\n      await this.sendAlert(alarmUcidList, alarmMsg)\n      const isSuccess = await MAlarmLog.insert(projectId, configId, nowAt, errorName, alarmMsg)\n      if (isSuccess === false) {\n        Logger.error('添加报警日志失败')\n      }\n      await redis.asyncSetex(redisKey, alarmInterval, 1)\n    }\n  }\n\n  /**\n   * 发送警报\n   *\n   * @param {Array} ucidList\n   * @param {string} message\n   */\n  async sendAlert (ucidList, message) {\n    Alert.sendMessage(ucidList, message)\n  }\n}\n\nexport default WatchAlarm\n"],"file":"alarm.js"}