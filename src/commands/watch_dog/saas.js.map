{"version":3,"sources":["saas.js"],"names":["moment","Base","redis","Alert","MMonitor","WatchIdList","DATE_FORMAT","PROJECT_ID_SAAS","MAX_ALLOW_ERROR_COUNT","REDIS_KEY","WatchDog4SaaS","signature","description","execute","args","options","nowAt","unix","startAtYmdHis","format","DISPLAY_BY_SECOND","finishAtYmdHis","hasAlertIn5Minute","asyncGet","log","errorCount","getErrorCountInRangeBySameMonth","sendAlert","WATCH_UCID_LIST_SAAS","asyncSetex","ucidList","message","sendMessage"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,IAAP,MAAiB,qBAAjB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,KAAP,MAAkB,mCAAlB;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,OAAOC,WAAP,MAAwB,qBAAxB;AACA,OAAOC,WAAP,MAAwB,6BAAxB;AAEA,MAAMC,eAAe,GAAG,CAAxB;AACA,MAAMC,qBAAqB,GAAG,EAA9B;AACA,MAAMC,SAAS,GAAG,4BAAlB;AACA;AACA;AACA;;AACA,MAAMC,aAAN,SAA4BT,IAA5B,CAAiC;AACX,aAATU,SAAS,GAAI;AACtB,WAAQ;AACZ;AACA,MAFI;AAGD;;AAEqB,aAAXC,WAAW,GAAI;AACxB,WAAO,+BAAP;AACD;;AAEY,QAAPC,OAAO,CAAEC,IAAF,EAAQC,OAAR,EAAiB;AAC5B,QAAIC,KAAK,GAAGhB,MAAM,GAAGiB,IAAT,EAAZ;AACA,QAAIC,aAAa,GAAGlB,MAAM,CAACiB,IAAP,CAAYD,KAAK,GAAG,KAAK,CAAzB,EAA4BG,MAA5B,CAAmCb,WAAW,CAACc,iBAA/C,CAApB;AACA,QAAIC,cAAc,GAAGrB,MAAM,CAACiB,IAAP,CAAYD,KAAK,GAAG,KAAK,CAAzB,EAA4BG,MAA5B,CAAmCb,WAAW,CAACc,iBAA/C,CAArB;AACA,QAAIE,iBAAiB,GAAG,MAAMpB,KAAK,CAACqB,QAAN,CAAed,SAAf,CAA9B;;AACA,QAAIa,iBAAJ,EAAuB;AACrB,WAAKE,GAAL,CAAS,eAAT;AACD,KAFD,MAEO;AACL;AACA,UAAIC,UAAU,GAAG,MAAMrB,QAAQ,CAACsB,+BAAT,CAAyCnB,eAAzC,EAA0DS,KAAK,GAAG,KAAK,EAAvE,EAA2EA,KAAK,GAAG,KAAK,CAAxF,CAAvB;AACA,WAAKQ,GAAL,CAAU,GAAEN,aAAc,IAAGG,cAAe,cAAaI,UAAW,EAApE;;AACA,UAAIA,UAAU,IAAIjB,qBAAlB,EAAyC;AACvC;AACA,aAAKgB,GAAL,CAAU,GAAEN,aAAc,IAAGG,cAAe,aAAYb,qBAAsB,QAA9E;AACA,cAAM,KAAKmB,SAAL,CAAetB,WAAW,CAACuB,oBAA3B,EAAkD,SAAQV,aAAc,IAAGG,cAAe,UAASI,UAAW,SAAQjB,qBAAsB,OAA5I,CAAN;AACA,cAAMN,KAAK,CAAC2B,UAAN,CAAiBpB,SAAjB,EAA4B,IAAI,EAAhC,EAAoC,CAApC,CAAN;AACD;AACF;;AACD,SAAKe,GAAL,CAAU,YAAV;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACiB,QAATG,SAAS,CAAEG,QAAF,EAAYC,OAAZ,EAAqB;AAClC5B,IAAAA,KAAK,CAAC6B,WAAN,CAAkBF,QAAlB,EAA4BC,OAA5B;AACD;;AAxC8B;;AA2CjC,eAAerB,aAAf","sourcesContent":["import moment from 'moment'\nimport Base from '~/src/commands/base'\nimport redis from '~/src/library/redis'\nimport Alert from '~/src/library/utils/modules/alert'\nimport MMonitor from '~/src/model/parse/monitor'\nimport WatchIdList from '~/src/configs/alarm'\nimport DATE_FORMAT from '~/src/constants/date_format'\n\nconst PROJECT_ID_SAAS = 1\nconst MAX_ALLOW_ERROR_COUNT = 20\nconst REDIS_KEY = 'plat_fe_fee_sass_watch_dog'\n/**\n * 只能监控五分钟前的数据(因为日志只会从5分钟前开始落表)\n */\nclass WatchDog4SaaS extends Base {\n  static get signature () {\n    return `\n     WatchDog:Saas \n     `\n  }\n\n  static get description () {\n    return '[按分钟] 检查最近5分钟内错误数是否超出阈值, 自动报警'\n  }\n\n  async execute (args, options) {\n    let nowAt = moment().unix()\n    let startAtYmdHis = moment.unix(nowAt - 60 * 5).format(DATE_FORMAT.DISPLAY_BY_SECOND)\n    let finishAtYmdHis = moment.unix(nowAt - 60 * 0).format(DATE_FORMAT.DISPLAY_BY_SECOND)\n    let hasAlertIn5Minute = await redis.asyncGet(REDIS_KEY)\n    if (hasAlertIn5Minute) {\n      this.log('5分钟内报过警, 自动跳过')\n    } else {\n      // 查找最近5分钟内的报错数\n      let errorCount = await MMonitor.getErrorCountInRangeBySameMonth(PROJECT_ID_SAAS, nowAt - 60 * 10, nowAt - 60 * 5)\n      this.log(`${startAtYmdHis}~${finishAtYmdHis}5分钟内错误数 => ${errorCount}`)\n      if (errorCount >= MAX_ALLOW_ERROR_COUNT) {\n        // 5分钟内报错数大于20, 则报警\n        this.log(`${startAtYmdHis}~${finishAtYmdHis}错误数超出阈值=> ${MAX_ALLOW_ERROR_COUNT}, 触发报警`)\n        await this.sendAlert(WatchIdList.WATCH_UCID_LIST_SAAS, `sass系统${startAtYmdHis}~${finishAtYmdHis}五分钟内错误数${errorCount}, 超过阈值${MAX_ALLOW_ERROR_COUNT},请注意.`)\n        await redis.asyncSetex(REDIS_KEY, 5 * 60, 1)\n      }\n    }\n    this.log(`检查完毕, 自动退出`)\n  }\n\n  /**\n   * 发送警报\n   *\n   * @param {Array} ucidList\n   * @param {string} message\n   */\n  async sendAlert (ucidList, message) {\n    Alert.sendMessage(ucidList, message)\n  }\n}\n\nexport default WatchDog4SaaS\n"],"file":"saas.js"}