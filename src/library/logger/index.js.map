{"version":3,"sources":["index.js"],"names":["path","log4js","config","moment","DATE_FORMAT","_","baseLoggerConfig","appenders","express","type","filename","absoluteLogPath","pattern","alwaysIncludePattern","categories","default","level","loggerCacheMap","Map","getLogger","loggerType","loggerConfig","loggerConfigJSON","JSON","stringify","has","get","configure","logger","set","getLogger4Command","commandName","command","logger4Express","getStackInfoString","stackReg","stackReg2","stacklist","Error","stack","split","slice","s","sp","exec","data","length","method","line","pos","file","basename","log","message","rawMessage","arguments","isString","triggerAt","format","DISPLAY_BY_MILLSECOND","console","info","warn","error"],"mappings":"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","sourcesContent":["import path from 'path'\nimport log4js from 'log4js'\nimport config from '~/src/configs/app'\nimport moment from 'moment'\nimport DATE_FORMAT from '~/src/constants/date_format'\nimport _ from 'lodash'\n\nlet baseLoggerConfig = {\n  appenders: {\n    // command: {\n    //   type: 'dateFile',\n    //   filename: `${config.absoluteLogPath}/command/${commandName}`,\n    //   pattern: '-yyyy-MM-dd.log',\n    //   alwaysIncludePattern: true\n    // },\n    express: {\n      type: 'dateFile',\n      filename: `${config.absoluteLogPath}/express/runtime`,\n      pattern: '-yyyy-MM-dd.log',\n      alwaysIncludePattern: true\n    }\n  },\n  categories: {\n    default: { appenders: ['express'], level: 'info' },\n    // command: { appenders: ['command'], level: 'info' },\n    express: { appenders: ['express'], level: 'info' }\n  }\n}\n\n/**\n * getLogger会重新打开一个文件, 导致文件句柄打开过多, 系统报错退出, 因此需要人工做一层缓存\n */\nlet loggerCacheMap = new Map()\nfunction getLogger (loggerType = 'express', loggerConfig = baseLoggerConfig) {\n  let loggerConfigJSON = JSON.stringify({ loggerType, loggerConfig })\n  if (loggerCacheMap.has(loggerConfigJSON)) {\n    return loggerCacheMap.get(loggerConfigJSON)\n  } else {\n    log4js.configure(loggerConfig)\n    let logger = log4js.getLogger(loggerType)\n    loggerCacheMap.set(loggerConfigJSON, logger)\n    return logger\n  }\n}\n\n/**\n * 为Commande类提供Logger\n * @param {*} commandName\n */\nfunction getLogger4Command (commandName = 'unsetCommandName') {\n  let loggerConfig = {\n    appenders: {\n      command: {\n        type: 'dateFile',\n        filename: `${config.absoluteLogPath}/command/${commandName}`,\n        pattern: '-yyyy-MM-dd.log',\n        alwaysIncludePattern: true\n      },\n      express: {\n        type: 'dateFile',\n        filename: `${config.absoluteLogPath}/express/runtime`,\n        pattern: '-yyyy-MM-dd.log',\n        alwaysIncludePattern: true\n      }\n    },\n    categories: {\n      default: { appenders: ['express'], level: 'info' },\n      command: { appenders: ['command'], level: 'info' },\n      express: { appenders: ['express'], level: 'info' }\n    }\n  }\n\n  return getLogger(`command`, loggerConfig)\n}\nlet logger4Express = getLogger(`express`, baseLoggerConfig)\n/**\n * 追踪日志输出文件名,方法名,行号等信息\n * @returns Object\n */\nfunction getStackInfoString () {\n  let stackReg = /at\\s+(.*)\\s+\\((.*):(\\d*):(\\d*)\\)/i\n  let stackReg2 = /at\\s+()(.*):(\\d*):(\\d*)/i\n  let stacklist = (new Error()).stack.split('\\n').slice(3)\n  let s = stacklist[0]\n  let sp = stackReg.exec(s) || stackReg2.exec(s)\n  let data = {}\n  if (sp && sp.length === 5) {\n    data.method = sp[1]\n    data.path = sp[2]\n    data.line = sp[3]\n    data.pos = sp[4]\n    data.file = path.basename(data.path)\n  }\n  return JSON.stringify(data)\n}\n\n/**\n* 简易logger\n* @returns  null\n*/\nfunction log () {\n  let message = ''\n  for (let rawMessage of arguments) {\n    if (_.isString(rawMessage) === false) {\n      message = message + JSON.stringify(rawMessage)\n    } else {\n      message = message + rawMessage\n    }\n  }\n  let triggerAt = moment().format(DATE_FORMAT.DISPLAY_BY_MILLSECOND)\n  console.log(`[${triggerAt}]-[runtime] ` + message)\n  logger4Express.info(message)\n}\nlet info = log // 别名\n\n/**\n* 简易logger\n* @returns  null\n*/\nfunction warn () {\n  let message = ''\n  for (let rawMessage of arguments) {\n    if (_.isString(rawMessage) === false) {\n      message = message + JSON.stringify(rawMessage)\n    } else {\n      message = message + rawMessage\n    }\n  }\n  let triggerAt = moment().format(DATE_FORMAT.DISPLAY_BY_MILLSECOND)\n  console.warn(`[${triggerAt}]-[runtime] ` + message + ` => ${getStackInfoString()}`)\n  logger4Express.warn(message + ` => ${getStackInfoString()}`)\n}\n\n/**\n* 简易logger\n* @returns  null\n*/\nfunction error () {\n  let message = ''\n  for (let rawMessage of arguments) {\n    if (_.isString(rawMessage) === false) {\n      message = message + JSON.stringify(rawMessage)\n    } else {\n      message = message + rawMessage\n    }\n  }\n  let triggerAt = moment().format(DATE_FORMAT.DISPLAY_BY_MILLSECOND)\n  console.error(`[${triggerAt}]-[runtime] ` + message + ` => ${getStackInfoString()}`)\n  logger4Express.error(message + ` => ${getStackInfoString()}`)\n}\n\nexport default {\n  getLogger4Command,\n  log,\n  info,\n  warn,\n  error\n}\n"],"file":"index.js"}