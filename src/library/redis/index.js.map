{"version":3,"sources":["index.js"],"names":["redisConfig","Redis","_","Logger","RedisClient","constructor","isTest","redisClient","port","host","retryStrategy","hasRetryTimes","lazyConnect","showFriendlyErrorStack","_debounceDisconnect","debounce","checkIsConnected","disconnect","_log","hasConnected","isConnected","get","_autoConnect","connect","_autoDisconnect","log","arguments","asyncGet","key","resultJson","catch","e","result","JSON","parse","asyncSetex","expire","value","valueJSON","stringify","setex","client"],"mappings":"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","sourcesContent":["import redisConfig from '~/src/configs/redis'\nimport Redis from 'ioredis'\nimport _ from 'lodash'\nimport Logger from '~/src/library/logger'\n/**\n * @via(@yaozeyuan)\n * 原生Redis有这么几个问题\n * 1. 命令没有参数提示\n * 2. 连接Redis后不会自动断开, 导致程序无法正常退出\n * 因此, 在这里手工对ioredis进行了一次手工封装, 添加参数提示和链接自动断开逻辑, 方便使用\n * 目前只用到了setex和get方法, 后续有需要可以再添加\n */\nclass RedisClient {\n  constructor (isTest = false) {\n    this.redisClient = new Redis({\n      port: redisConfig.port,\n      host: redisConfig.host,\n      retryStrategy: (hasRetryTimes) => {\n        // 关闭自动重连功能\n        return false\n      },\n      lazyConnect: true, // 初始化时不能连接Redis Server, 否则会因为无法断开连接, 导致npm run fee命令不能退出\n      showFriendlyErrorStack: true\n    })\n    this.isTest = isTest\n\n    // 利用debounce限制当连接空闲1s以上时, 自动断开链接, 避免由于持有连接句柄导致进程无法退出\n    this._debounceDisconnect = _.debounce(async () => {\n      if (this.checkIsConnected() === true) {\n        await this.redisClient.disconnect()\n        this._log(`disconnect success! now connect status change to => ${this.hasConnected}`)\n      }\n    }, 1 * 1000)\n  }\n\n  checkIsConnected () {\n    let isConnected = _.get(this.redisClient, ['connector', 'connecting'], false)\n    return isConnected\n  }\n\n  /**\n   * 自动重连\n   */\n  async _autoConnect () {\n    this._log('connect: this.hasConnected =>', this.hasConnected)\n    if (this.checkIsConnected() === false) {\n      await this.redisClient.connect()\n      this._log(`connect success! now connect status change to => ${this.hasConnected}`)\n    }\n  }\n\n  /**\n   * 自动断开\n   */\n  async _autoDisconnect () {\n    await this._debounceDisconnect()\n  }\n\n  /**\n   * 内部log方法\n   */\n  _log () {\n    if (this.isTest) {\n      Logger.log(...arguments)\n    }\n  }\n\n  /**\n   * 取值\n   * @param {String} key\n   */\n  async asyncGet (key) {\n    await this._autoConnect()\n    let resultJson = await this.redisClient.get(key).catch(e => {\n      Logger.log('Redis异常=>')\n      Logger.log(e)\n      return '{}'\n    })\n    let result = JSON.parse(resultJson)\n    await this._autoDisconnect()\n    return result\n  }\n\n  /**\n   * 设值\n   * @param {String} key\n   * @param {Number} expire\n   * @param {String} value\n   */\n  async asyncSetex (key, expire, value) {\n    await this._autoConnect()\n    // 统一存入json后数据\n    let valueJSON = JSON.stringify(value)\n    let result = await this.redisClient.setex(key, expire, valueJSON).catch(e => {\n      Logger.log('Redis异常=>')\n      Logger.log(e)\n    })\n    await this._autoDisconnect()\n    return result\n  }\n}\n\nlet client = new RedisClient()\n\nexport default client\n"],"file":"index.js"}