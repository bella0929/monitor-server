{"version":3,"sources":["index.js"],"names":["path","appConfig","moment","logPath","absoluteLogPath","YMFormat","DDFormat","HHFormat","mmFormat","LOG_TYPE_RAW","LOG_TYPE_JSON","LOG_TYPE_TEST","getAbsoluteBasePathByType","logType","fileUri","resolve","getAbsoluteLogUriByType","logAt","startAtMoment","unix","basePath","monthDirName","getMonthDirName","fileName","format"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,SAAP,MAAsB,mBAAtB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,IAAIC,OAAO,GAAGF,SAAS,CAACG,eAAxB;AAEA,MAAMC,QAAQ,GAAG,QAAjB;AACA,MAAMC,QAAQ,GAAG,IAAjB;AACA,MAAMC,QAAQ,GAAG,IAAjB;AACA,MAAMC,QAAQ,GAAG,IAAjB;AAEA,MAAMC,YAAY,GAAG,KAArB;AACA,MAAMC,aAAa,GAAG,MAAtB;AACA,MAAMC,aAAa,GAAG,MAAtB;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASC,yBAAT,CAAmCC,OAAO,GAAGJ,YAA7C,EAA2D;AACzD;AACA,UAAQI,OAAR;AACE,SAAKJ,YAAL;AACE;;AACF,SAAKC,aAAL;AACE;;AACF,SAAKC,aAAL;AACE;;AACF;AACEE,MAAAA,OAAO,GAAGJ,YAAV;AARJ;;AAUA,MAAIK,OAAO,GAAGd,IAAI,CAACe,OAAL,CAAaZ,OAAb,EAAsB,OAAtB,EAA+BU,OAA/B,CAAd;AACA,SAAOC,OAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,uBAAT,CAAiCC,KAAjC,EAAwCJ,OAAO,GAAGJ,YAAlD,EAAgE;AAC9D;AACA,UAAQI,OAAR;AACE,SAAKJ,YAAL;AACE;;AACF,SAAKC,aAAL;AACE;;AACF,SAAKC,aAAL;AACE;;AACF;AACEE,MAAAA,OAAO,GAAGJ,YAAV;AARJ;;AAUA,MAAIS,aAAa,GAAGhB,MAAM,CAACiB,IAAP,CAAYF,KAAZ,CAApB;AACA,MAAIG,QAAQ,GAAGR,yBAAyB,CAACC,OAAD,CAAxC;AACA,MAAIQ,YAAY,GAAGC,eAAe,CAACL,KAAD,CAAlC;AACA,MAAIM,QAAQ,GAAI,KAAIF,YAAa,QAAOH,aAAa,CAACM,MAAd,CAAqBlB,QAArB,CAA+B,IAAGY,aAAa,CAACM,MAAd,CAAqBjB,QAArB,CAA+B,IAAGW,aAAa,CAACM,MAAd,CAAqBhB,QAArB,CAA+B,MAA3I;AACA,MAAIM,OAAO,GAAGd,IAAI,CAACe,OAAL,CAAaK,QAAb,EAAuBG,QAAvB,CAAd;AACA,SAAOT,OAAP;AACD;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASQ,eAAT,CAAyBL,KAAzB,EAAgC;AAC9B,MAAIC,aAAa,GAAGhB,MAAM,CAACiB,IAAP,CAAYF,KAAZ,CAApB;AACA,MAAII,YAAY,GAAI,SAAQH,aAAa,CAACM,MAAd,CAAqBnB,QAArB,CAA+B,EAA3D;AACA,SAAOgB,YAAP;AACD;;AAED,eAAe;AACb;AACAL,EAAAA,uBAFa;AAGbJ,EAAAA,yBAHa;AAIbU,EAAAA,eAJa;AAKb;AACAb,EAAAA,YANa;AAObC,EAAAA,aAPa;AAQbC,EAAAA;AARa,CAAf","sourcesContent":["import path from 'path'\nimport appConfig from '~/src/configs/app'\nimport moment from 'moment'\n\nlet logPath = appConfig.absoluteLogPath\n\nconst YMFormat = 'YYYYMM'\nconst DDFormat = 'DD'\nconst HHFormat = 'HH'\nconst mmFormat = 'mm'\n\nconst LOG_TYPE_RAW = 'raw'\nconst LOG_TYPE_JSON = 'json'\nconst LOG_TYPE_TEST = 'test'\n\n/**\n * 获得日志所在文件夹\n * @param {string} logType    日志类型 LOG_TYPE_RAW | LOG_TYPE_JSON | LOG_TYPE_TEST\n * @returns {string}\n */\nfunction getAbsoluteBasePathByType(logType = LOG_TYPE_RAW) {\n  // 确保logType一定是指定类型\n  switch (logType) {\n    case LOG_TYPE_RAW:\n      break\n    case LOG_TYPE_JSON:\n      break\n    case LOG_TYPE_TEST:\n      break\n    default:\n      logType = LOG_TYPE_RAW\n  }\n  let fileUri = path.resolve(logPath, 'nginx', logType)\n  return fileUri\n}\n\n/**\n * 根据开始时间和记录类型, 生成对应日志绝对路径, 按分钟分隔\n * @param {number} logAt    时间戳\n * @param {string} logType    日志类型 LOG_TYPE_RAW | LOG_TYPE_JSON | LOG_TYPE_TEST\n * @returns {string}\n */\nfunction getAbsoluteLogUriByType(logAt, logType = LOG_TYPE_RAW) {\n  // 确保logType一定是指定类型\n  switch (logType) {\n    case LOG_TYPE_RAW:\n      break\n    case LOG_TYPE_JSON:\n      break\n    case LOG_TYPE_TEST:\n      break\n    default:\n      logType = LOG_TYPE_RAW\n  }\n  let startAtMoment = moment.unix(logAt);\n  let basePath = getAbsoluteBasePathByType(logType);\n  let monthDirName = getMonthDirName(logAt);\n  let fileName = `./${monthDirName}/day_${startAtMoment.format(DDFormat)}/${startAtMoment.format(HHFormat)}/${startAtMoment.format(mmFormat)}.log`;\n  let fileUri = path.resolve(basePath, fileName);\n  return fileUri\n}\n\n/**\n * 工具函数, 获取时间戳对应的月份名, 方便删除无用日志\n * @param {string} logAt\n * @return {string}\n */\nfunction getMonthDirName(logAt) {\n  let startAtMoment = moment.unix(logAt)\n  let monthDirName = `month_${startAtMoment.format(YMFormat)}`\n  return monthDirName\n}\n\nexport default {\n  // 工具函数\n  getAbsoluteLogUriByType,\n  getAbsoluteBasePathByType,\n  getMonthDirName,\n  // 常量\n  LOG_TYPE_RAW,\n  LOG_TYPE_JSON,\n  LOG_TYPE_TEST\n}\n"],"file":"index.js"}