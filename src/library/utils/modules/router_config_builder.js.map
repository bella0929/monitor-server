{"version":3,"sources":["router_config_builder.js"],"names":["API_RES","Logger","METHOD_TYPE_GET","METHOD_TYPE_POST","routerConfigBuilder","url","methodType","func","needProjectPriv","needLogin","routerConfig","req","res","next","catch","e","error","message","stack","status","send","showError"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,yBAApB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AAEA,MAAMC,eAAe,GAAG,KAAxB;AACA,MAAMC,gBAAgB,GAAG,MAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,mBAAT,CAA8BC,GAAG,GAAG,GAApC,EAAyCC,UAAU,GAAGJ,eAAtD,EAAuEK,IAAvE,EAA6EC,eAAe,GAAG,IAA/F,EAAqGC,SAAS,GAAG,IAAjH,EAAuH;AACrH,MAAIC,YAAY,GAAG,EAAnB;AACAA,EAAAA,YAAY,CAACL,GAAD,CAAZ,GAAoB;AAClBC,IAAAA,UADkB;AAElBC,IAAAA,IAAI,EAAE,CAACI,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AACxB;AACA,aAAON,IAAI,CAACI,GAAD,EAAMC,GAAN,EAAWC,IAAX,CAAJ,CAAqBC,KAArB,CAA2BC,CAAC,IAAI;AACrCd,QAAAA,MAAM,CAACe,KAAP,CAAa,kBAAb,EAAiCD,CAAC,CAACE,OAAnC,EAA4C,kBAA5C,EAAgEF,CAAC,CAACG,KAAlE;AACAN,QAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBpB,OAAO,CAACqB,SAAR,CAAkB,OAAlB,EAA2B,KAA3B,EAAkCN,CAAC,CAACG,KAApC,CAArB;AACD,OAHM,CAAP;AAID,KARiB;AASlBT,IAAAA,SATkB;AAUlBD,IAAAA;AAVkB,GAApB;AAYA,SAAOE,YAAP;AACD;;AAED,eAAe;AACbN,EAAAA,mBADa;AAGb;AACAF,EAAAA,eAJa;AAKbC,EAAAA;AALa,CAAf","sourcesContent":["import API_RES from '~/src/constants/api_res'\nimport Logger from '~/src/library/logger'\n\nconst METHOD_TYPE_GET = 'get'\nconst METHOD_TYPE_POST = 'post'\n\n/**\n *\n * @param {String} url          接口url\n * @param {String} methodType   接口类型, METHOD_TYPE_GET / METHOD_TYPE_POST\n * @param {Function} func       实际controller函数\n * @param {Boolean} needProjectPriv 是否需要项目权限\n * @param {Boolean} needLogin   是否需要登录\n * @param {Object}\n */\nfunction routerConfigBuilder (url = '/', methodType = METHOD_TYPE_GET, func, needProjectPriv = true, needLogin = true) {\n  let routerConfig = {}\n  routerConfig[url] = {\n    methodType,\n    func: (req, res, next) => {\n      // 封装一层, 统一加上catch代码\n      return func(req, res, next).catch(e => {\n        Logger.error('error.massage =>', e.message, '\\nerror.stack =>', e.stack)\n        res.status(500).send(API_RES.showError('服务器错误', 10000, e.stack))\n      })\n    },\n    needLogin,\n    needProjectPriv\n  }\n  return routerConfig\n}\n\nexport default {\n  routerConfigBuilder,\n\n  // 方法常量\n  METHOD_TYPE_GET,\n  METHOD_TYPE_POST\n}\n"],"file":"router_config_builder.js"}