{"version":3,"sources":["database.js"],"names":["moment","_","DATE_FORMAT","getTableNameListInRange","projectId","startAt","finishAt","getTableFunc","timeSplitUnit","UNIT","MONTH","startAtMoment","unix","finishAtMoment","tableNameList","currentAtMoment","isBefore","clone","add","startOf","currentAt","tableName","push","computePercent","dividend","divisor","showAsPercent","RETURN_ERROR","parseFloat","isFinite","result","resultInt","parseInt","paddingTimeList","rawRecordList","endAt","countType","defaultRecord","resultList","startMoment","endMoment","endOf","timeStep","recordMap","MINUTE","HOUR","DAY","rawRecord","indexAt","get","timeAt","placeholderRecord","record","getDatabaseTimeList","type","countAtTimeList","dateBaseFormat","DATABASE_BY_MINUTE","DATABASE_BY_HOUR","DATABASE_BY_DAY","time","format"],"mappings":"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","sourcesContent":["import moment from 'moment'\nimport _ from 'lodash'\nimport DATE_FORMAT from '~/src/constants/date_format'\n\n/**\n * 获取一段时间内的tableName, 方便进行跨月查询(假定是按月分表)\n * @param {number} projectId\n * @param {number} startAt\n * @param {number} finishAt\n * @param {function} getTableFunc\n * @param {string} timeSplitUnit 按时间分表单位, 默认按月分表\n */\nfunction getTableNameListInRange (projectId, startAt, finishAt, getTableFunc, timeSplitUnit = DATE_FORMAT.UNIT.MONTH) {\n  let startAtMoment = moment.unix(startAt)\n  let finishAtMoment = moment.unix(finishAt)\n  let tableNameList = []\n  for (let currentAtMoment = startAtMoment; currentAtMoment.isBefore(finishAtMoment); currentAtMoment = currentAtMoment.clone().add(1, timeSplitUnit).startOf(timeSplitUnit)) {\n    let currentAt = currentAtMoment.unix()\n    let tableName = getTableFunc(projectId, currentAt)\n    tableNameList.push(tableName)\n  }\n  return tableNameList\n}\n\n/**\n * 计算百分比/除法, 自动处理0/负数的情况, 精确到小数点后两位\n * @param {*} dividend\n * @param {*} divisor\n * @param {*} showAsPercent\n */\nfunction computePercent (dividend, divisor, showAsPercent = true) {\n  let RETURN_ERROR\n  if (showAsPercent) {\n    // 百分比模式下返回 '-'\n    RETURN_ERROR = '-'\n  } else {\n    // 小数模式下返回 0\n    RETURN_ERROR = 0\n  }\n\n  dividend = parseFloat(dividend)\n  divisor = parseFloat(divisor)\n\n  if (dividend <= 0 || divisor <= 0) {\n    // 不能出现0或负值\n    return RETURN_ERROR\n  }\n\n  if (_.isFinite(dividend) === false || _.isFinite(divisor) === false) {\n    // 不能是非数字\n    return RETURN_ERROR\n  }\n\n  let result = RETURN_ERROR\n  let resultInt = parseInt(dividend / divisor * 10000)\n\n  if (showAsPercent) {\n    result = (resultInt / 100) + '%'\n  } else {\n    result = resultInt / 10000\n  }\n  return result\n}\n\n/**\n * 补全按时间分布的数据列表, 依照记录中index字段进行补全, 记录不存在则使用defaultRecord进行填充, index必须为时间戳\n * @param {*} rawRecordList\n * @param {*} startAt\n * @param {*} endAt\n * @param {*} countType\n * @param {*} defaultRecord\n */\nfunction paddingTimeList (rawRecordList, startAt, endAt, countType, defaultRecord = {}) {\n  let resultList = []\n  let startMoment = moment.unix(startAt).startOf(countType)\n  let endMoment = moment.unix(endAt).endOf(countType)\n  let timeStep\n  let recordMap = {}\n  switch (countType) {\n    case DATE_FORMAT.UNIT.MINUTE:\n      timeStep = 60\n      break\n    case DATE_FORMAT.UNIT.HOUR:\n      timeStep = 3600\n      break\n    case DATE_FORMAT.UNIT.DAY:\n      timeStep = 86400\n      break\n    default:\n      return []\n  }\n  for (let rawRecord of rawRecordList) {\n    let indexAt = _.get(rawRecord, ['index'], 0)\n    recordMap[indexAt] = rawRecord\n  }\n  for (let timeAt = startMoment.unix(); timeAt <= endMoment.unix(); timeAt += timeStep) {\n    let placeholderRecord = { ...defaultRecord, 'index': timeAt }\n    let record = _.get(recordMap, [timeAt], placeholderRecord)\n    resultList.push(record)\n  }\n  return resultList\n}\n\n/**\n * 获取数据库时间格式字符串\n * @param {*} startAt\n * @param {*} endAt\n * @param {*} type\n */\nfunction getDatabaseTimeList (startAt, endAt, type) {\n  let countAtTimeList = []\n  let startMoment\n  let endMoment\n  let dateBaseFormat\n  let timeStep = 3600\n  switch (type) {\n    case DATE_FORMAT.UNIT.MINUTE:\n      dateBaseFormat = DATE_FORMAT.DATABASE_BY_MINUTE\n      timeStep = 60\n      break\n    case DATE_FORMAT.UNIT.HOUR:\n      dateBaseFormat = DATE_FORMAT.DATABASE_BY_HOUR\n      timeStep = 3600\n      break\n    case DATE_FORMAT.UNIT.DAY:\n      dateBaseFormat = DATE_FORMAT.DATABASE_BY_DAY\n      timeStep = 86400\n      break\n    default:\n      return []\n  }\n  startMoment = moment.unix(startAt).startOf(type)\n  endMoment = moment.unix(endAt).endOf(type)\n  for (let timeAt = startMoment.unix(); timeAt <= endMoment.unix(); timeAt += timeStep) {\n    let time = moment.unix(timeAt).format(dateBaseFormat)\n    countAtTimeList.push(time)\n  }\n  return countAtTimeList\n}\n\nexport default {\n  getTableNameListInRange,\n  computePercent,\n  paddingTimeList,\n  getDatabaseTimeList\n}\n"],"file":"database.js"}