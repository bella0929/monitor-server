{"version":3,"sources":["util.js"],"names":["LIpip","urlParse","url","obj","reg","arr","match","forEach","item","tempArr","substring","split","key","decodeURIComponent","val","handleEmptyData","newObj","Object","keys","map","sleep","ms","Promise","resolve","setTimeout","objectToArray","value","compare","property","obj1","obj2","value1","value2","ip2Locate"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AACA;AACA;AACA;AACA;;AACA,MAAMC,QAAQ,GAAIC,GAAD,IAAS;AACxB,MAAIC,GAAG,GAAG,EAAV;AACA,MAAIC,GAAG,GAAG,oBAAV;AACA,MAAIC,GAAG,GAAGH,GAAG,CAACI,KAAJ,CAAUF,GAAV,CAAV;;AAEA,MAAIC,GAAJ,EAAS;AACPA,IAAAA,GAAG,CAACE,OAAJ,CAAY,UAAUC,IAAV,EAAgB;AAC1B,UAAIC,OAAO,GAAGD,IAAI,CAACE,SAAL,CAAe,CAAf,EAAkBC,KAAlB,CAAwB,GAAxB,CAAd;AACA,UAAIC,GAAG,GAAGC,kBAAkB,CAACJ,OAAO,CAAC,CAAD,CAAR,CAA5B;AACA,UAAIK,GAAG,GAAGD,kBAAkB,CAACJ,OAAO,CAAC,CAAD,CAAR,CAA5B;AACAN,MAAAA,GAAG,CAACS,GAAD,CAAH,GAAWE,GAAX;AACD,KALD;AAMD;;AACD,SAAOX,GAAP;AACD,CAdD;AAgBA;AACA;AACA;AACA;AACA;;;AACA,MAAMY,eAAe,GAAG,CAACZ,GAAG,GAAG,EAAP,KAAc;AACpC,MAAIa,MAAM,GAAG,EAAb;;AACA,MAAI,OAAQb,GAAR,KAAiB,QAArB,EAA+B;AAC7Bc,IAAAA,MAAM,CAACC,IAAP,CAAYf,GAAZ,EAAiBgB,GAAjB,CAAqBP,GAAG,IAAI;AAC1B,UAAIT,GAAG,CAACS,GAAD,CAAP,EAAc;AACZI,QAAAA,MAAM,CAACJ,GAAD,CAAN,GAAcT,GAAG,CAACS,GAAD,CAAjB;AACD;AACF,KAJD;AAKD;;AACD,SAAOI,MAAP;AACD,CAVD;AAYA;AACA;AACA;AACA;;;AACA,MAAMI,KAAK,GAAGC,EAAE,IAAI,IAAIC,OAAJ,CAAYC,OAAO,IAAIC,UAAU,CAACD,OAAD,EAAUF,EAAV,CAAjC,CAApB;AAEA;AACA;AACA;AACA;;;AACA,MAAMI,aAAa,GAAGtB,GAAG,IAAIc,MAAM,CAACC,IAAP,CAAYf,GAAZ,EAAiBgB,GAAjB,CAAqBP,GAAG,IAAI;AACvD,SAAO;AACLA,IAAAA,GAAG,EAAEA,GADA;AAELc,IAAAA,KAAK,EAAEvB,GAAG,CAACS,GAAD;AAFL,GAAP;AAID,CAL4B,CAA7B;AAOA;AACA;AACA;AACA;;;AACA,MAAMe,OAAO,GAAGC,QAAQ,IAAI;AAC1B,SAAO,UAAUC,IAAV,EAAgBC,IAAhB,EAAsB;AAC3B,QAAIC,MAAM,GAAGF,IAAI,CAACD,QAAD,CAAjB;AACA,QAAII,MAAM,GAAGF,IAAI,CAACF,QAAD,CAAjB;AACA,WAAOI,MAAM,GAAGD,MAAhB,CAH2B,CAGJ;AACxB,GAJD;AAKD,CAND;;AAQA,MAAM;AAAEE,EAAAA;AAAF,IAAgBjC,KAAtB;AACA,eAAe;AACboB,EAAAA,KADa;AAEbnB,EAAAA,QAFa;AAGbgC,EAAAA,SAHa;AAIbR,EAAAA,aAJa;AAKbV,EAAAA,eALa;AAMbY,EAAAA;AANa,CAAf","sourcesContent":["import LIpip from '~/src/library/ipip'\n/**\n * URL 参数解析\n * @param {String} url\n */\nconst urlParse = (url) => {\n  var obj = {}\n  var reg = /[?&][^?&]+=[^?&]+/g\n  var arr = url.match(reg)\n\n  if (arr) {\n    arr.forEach(function (item) {\n      var tempArr = item.substring(1).split('=')\n      var key = decodeURIComponent(tempArr[0])\n      var val = decodeURIComponent(tempArr[1])\n      obj[key] = val\n    })\n  }\n  return obj\n}\n\n/**\n * 处理空对象\n * @example {a: 1, b: undefined} => {a:1}\n * @param {Object} obj\n */\nconst handleEmptyData = (obj = {}) => {\n  var newObj = {}\n  if (typeof (obj) === 'object') {\n    Object.keys(obj).map(key => {\n      if (obj[key]) {\n        newObj[key] = obj[key]\n      }\n    })\n  }\n  return newObj\n}\n\n/**\n * 延迟执行函数, 返回一个 Promise\n * @param {number} ms\n */\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms))\n\n/**\n * 对象转化为键值对\n * @param {object} obj\n */\nconst objectToArray = obj => Object.keys(obj).map(key => {\n  return {\n    key: key,\n    value: obj[key]\n  }\n})\n\n/**\n * 对比对象中指定参数\n * @param {object} obj\n */\nconst compare = property => {\n  return function (obj1, obj2) {\n    var value1 = obj1[property]\n    var value2 = obj2[property]\n    return value2 - value1 // 降序\n  }\n}\n\nconst { ip2Locate } = LIpip\nexport default {\n  sleep,\n  urlParse,\n  ip2Locate,\n  objectToArray,\n  handleEmptyData,\n  compare\n}\n"],"file":"util.js"}